/*
  ==============================================================================

   This file is part of the JUCE library.
   Copyright (c) 2017 - ROLI Ltd.

   JUCE is an open source library subject to commercial or open-source
   licensing.

   By using JUCE, you agree to the terms of both the JUCE 5 End-User License
   Agreement and JUCE 5 Privacy Policy (both updated and effective as of the
   27th April 2017).

   End User License Agreement: www.juce.com/juce-5-licence
   Privacy Policy: www.juce.com/juce-5-privacy-policy

   Or: You may also use this code under the terms of the GPL v3 (see
   www.gnu.org/licenses).

   JUCE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY, AND ALL WARRANTIES, WHETHER
   EXPRESSED OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR PURPOSE, ARE
   DISCLAIMED.

  ==============================================================================
*/

namespace juce
{
// This byte-code is generated from native/java/com/roli/juce/ComponentPeerView.java with min sdk version 23
// See juce_core/native/java/README.txt on how to generate this byte-code.
//================== test.dex.gz ==================
static const uint8 javaComponentPeerView[] =
{ 31,139,8,8,10,75,218,94,0,11,116,101,115,116,46,100,101,120,0,165,155,11,124,92,85,157,199,255,231,222,121,36,147,201,100,50,105,155,119,59,77,211,146,166,121,76,154,62,82,146,210,166,73,90,210,166,15,154,105,161,73,49,76,102,110,146,105,39,119,166,51,
147,151,160,148,138,182,60,212,86,16,80,193,79,117,89,182,187,128,130,2,139,194,106,93,20,81,64,11,130,86,173,90,22,62,90,112,193,82,68,171,40,221,223,121,76,50,73,27,1,119,250,249,222,255,255,252,207,255,156,123,238,121,252,207,185,211,73,200,24,117,
248,234,151,210,209,87,191,245,187,250,43,127,237,55,190,245,226,127,28,244,253,233,198,203,253,235,220,195,157,111,189,123,105,61,81,140,136,70,183,47,241,144,250,140,46,38,202,103,210,222,8,158,177,16,45,135,124,212,74,52,15,178,35,131,40,14,25,202,
36,202,130,252,163,19,148,19,249,93,68,139,75,136,150,128,70,208,2,58,193,149,32,6,174,1,159,2,247,128,251,193,3,224,33,240,56,248,54,120,2,60,9,126,8,94,6,191,5,175,129,55,192,91,32,171,148,168,25,236,4,35,224,51,224,107,224,121,240,119,144,63,155,200,
7,218,64,55,72,130,131,224,49,112,12,188,6,202,230,160,93,32,1,62,15,158,4,111,131,149,94,60,55,248,2,120,16,60,15,236,115,137,26,64,4,124,17,28,3,172,140,168,10,108,1,49,112,11,184,31,28,5,175,0,7,58,104,14,88,3,182,131,33,112,3,184,11,60,3,78,129,191,
130,12,244,87,46,40,4,115,64,13,104,2,171,192,70,208,13,122,64,31,216,5,226,96,20,124,20,124,12,236,7,55,131,67,224,54,112,39,56,12,142,128,123,193,3,224,17,240,24,248,54,248,46,120,10,60,3,78,130,183,1,155,79,148,13,10,193,124,80,7,46,1,107,65,39,184,
18,140,130,125,224,227,224,14,112,24,28,1,15,128,111,128,163,224,89,240,2,120,9,188,9,10,22,16,93,4,124,96,57,88,9,214,129,245,224,50,208,3,118,129,235,192,65,240,121,112,15,120,8,124,27,188,0,126,3,78,131,119,129,253,34,34,55,40,5,181,96,21,240,131,
32,72,128,67,224,118,112,23,56,12,30,4,79,128,23,193,43,224,77,96,175,64,187,192,66,208,0,218,192,102,48,0,226,96,20,92,13,14,128,195,224,81,240,52,248,25,56,1,94,7,127,3,217,11,209,14,80,1,150,129,75,192,122,224,7,61,96,0,92,7,14,130,219,193,61,224,
97,240,24,120,2,28,3,199,193,73,240,50,120,21,156,1,103,193,187,32,183,146,104,1,104,0,27,192,0,184,26,124,10,220,1,30,4,223,0,79,129,227,224,101,112,6,188,3,172,139,136,102,128,50,80,9,234,193,74,208,10,182,128,203,65,23,248,40,216,15,14,129,175,130,
71,192,99,224,105,240,115,112,6,104,85,232,115,80,9,154,193,135,192,110,240,97,240,9,112,27,184,27,124,29,124,7,60,7,78,130,83,224,15,32,179,154,40,7,204,4,165,96,62,88,4,124,96,25,88,13,90,192,122,208,9,118,128,93,96,8,236,7,183,128,219,192,231,192,
93,224,75,192,129,88,147,13,114,192,44,144,15,10,64,33,40,2,197,0,97,130,16,10,8,75,157,176,172,9,203,152,176,108,9,75,83,196,46,76,123,194,20,37,76,43,194,180,32,12,41,161,219,9,221,71,120,108,66,211,9,183,162,26,80,11,124,160,14,32,36,18,66,37,45,1,
75,193,50,146,49,177,1,172,0,23,171,88,217,4,86,130,75,192,42,176,26,52,131,53,160,5,180,130,54,176,22,172,3,155,193,85,160,15,244,131,1,16,38,249,172,169,79,150,146,39,139,228,243,51,149,118,41,157,219,121,159,104,202,238,86,250,41,216,121,80,183,41,
251,12,128,208,77,167,149,221,165,236,30,69,74,159,153,230,207,251,247,108,145,212,121,223,242,78,246,168,254,226,159,60,213,95,188,13,51,85,159,101,20,75,127,174,187,149,127,157,242,159,169,250,176,160,88,62,251,82,101,223,170,116,94,79,167,210,189,
240,241,43,189,10,250,54,165,47,129,190,93,233,173,208,47,87,250,22,232,87,40,125,39,244,29,74,15,65,239,86,122,36,205,158,76,211,175,129,126,165,210,175,79,179,31,76,211,239,72,211,15,167,213,121,36,205,254,0,244,157,74,127,52,205,126,172,104,66,231,
125,216,165,244,163,105,245,60,149,230,207,251,237,67,169,178,208,123,148,126,60,205,231,84,154,126,186,88,206,163,101,170,63,3,74,63,11,123,111,202,142,1,12,42,221,9,221,80,250,12,232,33,165,151,164,217,203,211,236,85,208,157,152,109,35,36,165,157,241,
245,183,144,246,144,148,247,9,201,232,235,74,62,172,228,35,74,254,167,146,223,80,254,255,77,124,205,46,163,239,8,89,76,86,198,187,165,132,44,74,102,11,89,68,110,198,155,173,209,253,162,249,197,116,84,200,101,244,146,144,89,244,10,241,117,94,71,186,146,
54,33,151,81,166,74,59,133,100,180,69,165,47,227,243,10,233,7,136,199,5,70,79,40,249,55,226,49,130,209,87,149,124,80,201,175,17,143,27,140,146,188,63,32,45,74,90,197,188,175,164,14,72,43,86,129,166,228,79,133,44,165,83,196,215,157,141,110,20,210,77,183,
67,102,42,191,76,148,124,157,248,26,159,43,210,89,202,158,69,118,122,67,244,175,76,231,224,122,131,144,185,116,147,74,223,193,231,134,178,187,209,154,79,169,244,103,132,212,233,22,146,235,255,86,37,63,43,36,163,187,148,252,34,241,245,168,209,167,133,
44,163,59,137,175,225,217,226,126,121,136,114,191,20,178,142,78,8,57,147,126,67,124,205,46,160,132,146,191,39,30,123,231,11,255,66,68,196,123,133,156,71,111,10,185,148,222,17,227,121,145,200,47,66,13,191,16,211,125,161,72,23,195,190,75,201,221,66,58,
41,34,100,30,253,93,201,119,197,184,206,17,254,37,232,201,65,33,43,200,20,50,143,134,149,188,90,72,31,93,39,100,17,29,16,210,70,159,36,57,95,62,45,100,13,29,20,50,147,110,19,210,65,159,83,249,159,23,50,131,190,32,164,236,135,18,60,217,97,37,191,164,228,
151,133,44,160,127,81,242,110,101,255,87,33,243,233,30,37,255,77,201,35,66,22,210,191,11,89,75,255,165,228,183,132,44,161,31,171,121,124,76,201,231,148,124,94,229,255,68,165,95,80,242,69,53,207,127,38,164,151,142,11,57,159,126,46,164,28,175,18,53,94,
60,253,43,33,171,232,215,66,202,241,43,65,196,61,41,228,34,250,131,146,167,133,44,167,183,132,156,65,111,11,89,73,127,82,233,63,43,191,179,74,254,69,229,255,85,61,191,139,241,125,118,54,61,74,124,175,149,243,117,182,154,255,115,84,218,171,228,92,37,203,
148,156,167,100,185,146,243,149,172,196,140,60,36,228,50,122,92,172,47,23,57,25,223,71,100,126,45,118,191,155,137,196,106,191,70,72,141,158,36,190,55,87,210,247,137,239,43,57,244,24,201,179,0,145,220,127,120,220,229,123,222,106,200,34,181,9,21,171,181,
81,171,252,120,254,22,228,87,171,124,190,207,229,146,220,219,142,171,242,87,65,110,83,249,252,108,193,247,93,171,42,191,81,73,235,98,41,231,168,242,169,250,237,74,230,33,255,132,79,158,73,210,243,55,128,24,234,95,136,252,83,62,121,94,153,154,191,23,249,
75,145,255,134,79,158,101,166,230,31,68,126,11,242,255,226,147,231,156,169,249,135,249,190,138,252,204,58,121,6,154,154,255,0,242,123,144,159,83,39,207,71,83,243,143,34,127,80,61,31,31,139,43,113,159,16,224,113,215,132,28,2,215,250,100,191,28,240,73,
159,67,144,119,164,233,95,78,211,239,75,211,31,73,211,143,170,58,158,22,117,107,66,191,187,154,68,60,239,246,100,81,204,29,129,205,67,59,221,14,113,126,201,64,138,183,225,254,106,185,143,230,217,102,80,153,230,132,159,3,165,253,137,44,242,215,59,201,
116,47,129,151,147,121,104,5,107,154,176,122,27,208,87,19,62,139,225,227,208,183,162,123,182,206,199,14,224,63,68,186,101,41,6,126,91,194,65,13,250,44,242,232,59,161,165,252,253,201,44,218,131,215,18,11,57,45,123,220,139,32,179,44,123,124,85,212,98,229,
254,43,116,59,45,191,202,74,158,60,94,198,133,123,229,99,92,77,247,44,180,119,234,61,42,126,68,40,173,139,62,248,73,181,60,203,117,123,156,234,89,203,48,159,99,222,50,204,216,110,183,139,186,243,178,213,185,143,137,190,121,185,154,196,158,20,115,243,
147,172,107,220,254,251,113,251,66,97,215,212,169,241,173,106,57,102,126,119,182,24,99,29,118,126,223,119,170,73,236,149,126,111,54,90,201,79,20,120,194,185,188,221,37,184,179,107,220,79,171,153,206,175,84,248,185,176,42,248,147,100,194,143,239,253,30,
155,103,102,204,91,128,120,88,102,225,163,151,129,86,117,223,138,157,199,82,76,49,95,57,221,154,217,125,171,155,74,44,86,212,176,11,209,213,97,105,176,92,73,115,28,60,205,163,116,215,157,57,208,118,226,76,188,243,11,185,208,182,225,196,99,122,183,139,
235,229,136,230,101,152,25,49,55,95,137,121,150,25,52,175,121,57,45,96,124,143,55,189,124,215,245,243,59,89,29,232,63,59,241,26,51,113,158,244,232,166,123,16,165,156,150,34,235,25,242,44,152,215,183,130,60,246,222,140,50,218,152,97,179,123,242,75,50,
178,132,102,250,194,228,183,57,245,6,125,6,121,52,79,249,188,214,139,201,99,221,227,222,141,167,115,218,54,218,44,86,207,76,143,144,166,111,15,221,98,65,31,184,49,127,80,239,28,139,108,253,173,84,241,165,108,75,197,31,193,25,112,26,252,2,28,199,144,139,
243,241,196,103,239,42,250,64,233,169,31,153,191,158,248,222,156,37,206,111,124,175,215,244,170,235,217,162,125,172,126,47,211,124,7,88,205,39,152,28,111,254,217,83,35,231,65,167,55,71,196,66,62,255,120,122,180,70,205,27,223,37,52,87,231,163,41,215,215,
117,53,114,94,118,174,206,161,89,154,56,207,107,43,144,227,18,150,152,175,17,39,183,138,191,78,212,127,67,141,140,143,252,61,173,11,247,112,169,123,240,207,167,107,228,122,247,184,115,198,231,229,231,84,123,182,185,115,213,187,140,156,199,95,172,145,
239,66,166,123,25,95,57,120,215,178,136,114,30,170,120,87,87,245,221,93,35,99,134,75,148,147,111,65,247,165,217,108,176,113,207,175,191,199,51,172,80,207,144,242,127,252,61,252,47,30,127,102,217,142,239,93,160,29,207,94,192,246,66,154,205,162,238,245,
203,26,25,151,61,140,239,94,221,62,13,171,94,99,221,62,157,118,212,33,138,156,222,225,179,211,14,159,141,100,110,38,230,15,78,186,238,29,62,62,147,14,34,10,238,240,101,96,45,204,66,171,102,147,151,229,138,103,224,253,255,90,141,140,229,23,126,6,255,26,
15,197,182,174,33,203,101,21,103,249,62,165,139,177,63,51,109,153,250,182,115,231,196,179,175,246,145,37,192,203,100,194,206,239,115,174,70,190,43,123,220,157,189,40,133,106,234,152,102,89,193,48,90,232,195,42,59,127,87,231,57,38,226,78,6,57,88,236,178,
38,90,144,168,120,43,234,43,164,225,12,7,85,188,97,186,171,209,234,138,215,120,71,201,118,164,222,237,249,251,99,182,194,129,28,126,191,162,90,249,222,233,97,227,247,211,112,63,148,204,97,43,236,153,184,79,22,218,230,208,60,243,22,47,182,83,20,219,255,
240,29,14,86,113,198,116,59,249,218,215,26,180,215,207,165,116,211,107,226,30,14,209,190,216,22,180,75,247,228,86,252,74,246,7,191,215,178,90,249,222,58,185,63,228,147,113,27,127,38,27,238,21,219,186,18,61,233,113,87,188,45,207,254,252,211,90,59,49,214,
153,168,141,215,183,181,86,246,111,244,138,98,242,15,167,215,218,128,123,202,185,245,33,204,45,94,134,175,16,126,254,8,162,76,9,42,234,124,14,222,58,239,93,166,139,222,101,57,204,116,243,184,235,200,52,221,124,157,101,217,95,60,116,142,22,177,63,137,
222,169,120,179,243,121,172,22,102,122,115,113,110,113,88,76,183,135,251,90,77,119,30,151,54,251,115,195,25,171,248,142,154,91,113,226,189,61,155,165,231,247,223,219,115,53,60,77,55,223,17,28,89,158,220,229,197,56,219,205,157,87,210,128,184,88,79,207,
146,167,104,233,55,231,18,175,133,215,241,21,94,135,119,6,151,204,99,109,181,58,173,251,182,61,57,211,244,206,148,150,89,173,54,167,109,95,223,147,179,82,245,30,119,96,36,79,162,29,31,155,193,232,28,209,195,135,94,114,176,140,21,142,2,122,191,79,176,
144,250,206,165,183,231,159,105,9,175,169,226,151,31,188,5,171,84,11,230,255,191,91,176,74,180,0,195,204,228,9,83,172,11,146,231,54,46,121,92,121,8,36,196,220,211,196,190,252,243,90,249,221,22,218,136,93,208,142,217,95,164,255,145,60,51,230,181,98,23,
180,246,218,176,11,138,29,45,76,139,45,78,182,2,53,187,176,238,42,222,5,127,243,120,230,149,97,15,212,249,30,152,129,125,110,163,69,211,249,222,183,71,171,120,35,91,171,248,95,240,26,56,197,231,123,46,218,198,207,217,78,30,137,52,223,172,154,2,189,170,
98,81,85,125,101,90,28,180,250,38,214,134,174,172,217,62,121,214,107,208,236,88,95,166,183,11,30,46,242,172,174,120,135,63,159,140,149,179,124,242,187,56,211,93,39,78,117,69,218,55,225,105,193,249,202,137,179,119,33,53,32,114,152,238,40,86,168,131,173,
100,121,232,109,211,55,151,124,120,226,229,194,223,244,121,201,109,241,215,185,113,126,155,47,234,79,229,120,52,211,55,135,220,154,204,91,192,251,247,204,196,89,107,145,47,117,166,34,74,157,169,184,221,231,147,251,92,212,205,211,123,220,61,184,22,97,
55,222,227,142,137,145,184,116,92,107,87,218,196,57,237,226,241,58,35,147,236,171,166,177,183,78,99,111,159,198,190,105,26,123,231,52,246,43,166,216,253,169,47,9,213,231,170,41,233,216,148,244,232,148,244,245,83,210,7,167,164,239,156,146,62,50,37,253,
208,148,52,111,35,63,59,241,185,146,139,150,50,101,227,148,40,153,161,100,190,146,197,202,191,150,46,22,233,58,149,174,19,167,137,212,248,202,231,151,223,227,208,248,185,132,167,117,154,56,143,72,221,46,190,147,21,231,97,90,150,102,231,50,91,164,45,234,
222,54,149,103,131,159,166,108,118,37,51,149,116,170,178,46,180,72,174,29,117,62,82,101,74,212,218,224,223,15,240,252,101,170,141,203,210,218,205,89,174,100,131,42,207,212,217,141,203,156,113,91,142,186,151,44,231,30,191,151,76,243,216,97,173,171,169,
175,241,145,173,41,108,134,147,151,144,171,121,203,150,142,246,150,102,127,251,230,77,61,237,173,148,209,28,139,249,7,140,65,131,114,83,90,79,71,96,200,12,14,24,113,114,172,217,214,222,209,218,227,223,177,165,141,220,107,134,194,145,80,75,212,236,11,
247,215,236,10,12,7,104,86,75,116,48,22,53,13,51,185,197,48,226,219,195,198,136,180,91,91,219,214,108,91,71,108,45,105,107,219,201,182,182,163,121,251,230,173,196,218,73,107,111,39,182,158,180,245,29,148,191,193,24,235,141,6,226,161,214,112,98,48,156,
72,116,132,19,73,195,196,45,89,7,105,29,112,237,232,32,189,3,151,89,29,1,51,20,143,134,67,181,129,88,172,182,57,152,12,15,135,147,99,141,180,100,178,61,22,139,132,131,129,100,56,106,150,167,124,58,194,125,70,112,44,24,49,90,2,145,72,111,32,184,59,209,
72,133,211,149,74,207,10,70,77,180,37,89,219,194,229,104,50,61,171,63,30,136,13,132,131,137,218,150,128,57,28,64,133,179,47,144,21,141,68,227,107,195,145,164,17,159,62,127,99,32,25,15,143,54,210,194,127,152,63,169,170,130,243,93,183,4,194,38,218,151,
127,126,206,86,35,136,140,188,241,140,104,162,118,205,144,25,138,24,141,52,35,221,216,190,38,108,134,120,237,19,117,12,99,32,107,49,60,109,195,6,175,188,104,114,198,198,40,239,46,149,183,112,114,30,159,2,229,155,205,181,209,224,80,162,101,32,96,246,27,
169,97,77,111,202,184,107,250,35,141,27,215,197,163,67,177,70,90,118,126,142,63,110,24,155,123,19,70,124,216,136,227,46,235,34,209,222,64,164,35,48,22,29,74,78,220,102,206,63,46,215,72,53,147,29,194,102,108,40,57,104,36,7,162,161,218,53,129,132,209,206,
211,24,120,19,253,39,166,197,252,233,253,219,66,225,100,52,222,110,246,69,27,169,114,122,183,243,170,172,126,15,223,141,66,223,24,48,3,253,188,197,107,59,130,209,193,218,120,52,18,174,221,53,20,52,106,207,91,117,229,211,172,165,242,201,79,190,226,159,
173,167,145,230,190,87,81,62,171,38,187,172,71,36,224,195,193,173,201,145,104,143,25,77,26,137,218,184,49,8,89,235,143,14,5,7,176,250,26,169,126,138,3,58,52,102,132,162,61,35,225,184,17,49,18,137,30,85,34,45,248,52,82,237,251,44,180,181,60,200,23,80,
35,45,126,223,5,66,241,192,72,160,151,47,19,223,251,46,51,24,142,13,6,98,31,164,68,2,139,219,252,64,15,146,72,142,241,70,45,124,191,5,26,169,172,35,20,136,12,135,119,215,6,76,248,138,32,87,219,102,6,35,209,4,110,221,18,9,36,68,244,58,223,167,29,19,53,
174,242,231,94,32,127,163,49,216,171,28,140,4,95,194,60,230,215,70,176,218,107,177,230,227,157,198,158,33,195,12,162,173,185,233,57,178,190,178,52,83,123,36,98,244,7,34,205,193,32,218,221,54,26,52,98,114,117,148,95,192,39,222,63,52,136,217,150,230,149,
151,238,133,48,221,47,167,233,132,113,83,180,19,115,76,46,165,180,114,158,52,151,205,189,187,68,148,44,77,179,117,26,193,161,56,54,143,105,138,116,170,129,155,100,27,195,50,25,228,203,122,194,22,55,250,34,168,27,77,27,142,202,13,198,31,136,247,27,233,
79,80,116,1,119,217,220,70,114,95,150,92,218,44,99,68,219,104,50,30,72,144,19,150,53,145,33,35,25,141,38,7,200,142,84,75,52,110,144,109,171,220,114,45,98,139,206,78,173,43,105,116,166,175,127,98,219,201,185,189,109,107,39,223,247,91,54,183,182,77,164,
54,53,111,108,35,109,123,59,89,183,183,227,3,117,61,217,182,175,111,95,187,118,61,89,32,219,249,149,239,199,219,215,119,33,147,43,29,235,249,69,104,93,200,237,232,194,174,190,189,11,165,186,68,13,172,139,244,46,94,14,151,14,174,98,83,239,226,10,223,217,
187,113,46,232,110,39,79,247,249,243,35,175,251,2,195,227,8,136,41,82,238,195,201,60,165,215,165,233,139,211,244,250,52,125,9,244,44,169,175,141,4,250,19,100,11,136,0,204,141,92,118,4,122,141,8,101,4,212,113,129,10,3,161,208,133,183,21,56,197,98,61,102,
0,135,36,214,75,185,252,44,177,102,40,153,140,154,91,226,168,220,8,145,173,55,138,228,32,164,216,99,201,22,20,199,3,178,7,197,46,24,34,43,142,33,129,56,101,5,163,33,99,75,20,155,118,115,18,54,30,156,184,109,124,191,39,151,72,248,227,1,51,209,23,141,15,
210,124,44,247,154,241,229,94,51,205,114,167,108,126,100,193,89,32,33,234,198,109,229,201,133,223,98,8,105,75,40,220,215,71,25,169,216,70,204,32,171,193,119,112,114,246,77,236,213,33,202,196,12,109,150,125,52,147,171,19,199,35,117,20,162,108,152,249,
42,71,167,25,241,4,101,240,36,31,58,114,112,77,57,57,249,68,231,213,251,195,232,49,94,233,165,70,184,127,32,73,121,80,59,212,122,216,108,118,6,49,61,77,145,47,231,61,229,64,21,79,128,248,34,26,238,156,48,180,135,200,142,212,214,192,200,21,41,101,7,101,
113,5,43,130,111,65,228,70,66,174,197,78,204,248,112,208,32,23,44,219,204,48,239,116,222,104,113,255,169,39,2,241,72,219,195,137,112,111,56,194,103,1,47,115,57,206,68,209,17,127,116,55,154,87,50,158,22,78,17,3,155,99,44,18,24,91,27,231,211,193,130,220,
43,196,117,7,177,1,202,65,71,98,252,209,113,91,2,67,124,98,184,199,13,91,141,4,98,216,184,101,205,248,28,162,108,105,193,230,219,26,29,193,236,28,79,110,139,209,140,241,132,216,152,47,13,135,66,104,147,186,205,198,40,238,33,202,76,50,196,3,253,169,58,
133,1,213,168,58,197,113,145,50,6,2,9,113,68,163,252,129,112,200,232,140,246,37,197,177,99,109,60,58,40,159,20,46,112,244,243,177,180,12,68,19,73,98,97,202,10,7,123,34,169,247,130,89,105,137,30,190,28,250,113,106,51,67,147,237,152,192,134,178,231,166,
219,165,201,129,185,177,89,132,194,4,233,225,193,65,202,225,239,39,225,64,164,37,16,75,108,196,136,81,182,50,116,26,145,54,20,200,153,72,118,38,3,241,36,185,148,33,156,48,214,111,107,105,163,76,113,144,242,143,197,12,114,10,181,71,30,170,200,22,70,20,
222,109,224,150,137,118,51,145,12,96,119,162,140,112,98,115,44,128,173,10,197,18,106,100,201,190,219,24,107,225,183,206,223,61,205,219,73,118,42,163,115,128,247,187,53,34,98,72,182,124,182,158,132,156,209,72,142,25,113,222,144,77,56,36,145,37,98,244,
37,201,22,49,204,126,132,238,172,72,52,16,234,8,247,198,3,241,49,178,165,90,40,143,16,196,76,178,136,48,99,55,141,145,77,98,130,69,35,161,1,113,29,161,220,168,153,122,183,105,137,27,129,36,102,83,222,132,169,213,192,169,34,58,198,167,216,132,81,77,195,
180,146,169,121,88,60,97,234,12,12,27,169,142,65,215,34,158,164,249,139,190,158,92,69,103,50,26,67,24,162,12,196,5,209,14,202,79,105,83,206,186,100,139,154,152,143,35,148,29,77,127,43,32,87,116,82,156,165,204,168,153,154,254,217,66,221,56,20,73,134,99,
124,72,68,18,83,56,131,7,108,225,12,143,206,240,135,141,84,208,114,98,111,229,219,158,136,56,184,161,28,85,187,148,61,40,55,132,96,155,68,176,178,198,196,244,119,196,2,113,120,138,144,97,141,137,120,201,226,84,134,185,202,7,57,62,253,219,35,217,121,208,
197,59,2,101,40,165,135,74,120,0,30,54,228,195,108,54,167,108,27,214,184,8,123,122,194,192,108,77,240,0,57,254,58,71,78,164,69,151,136,136,156,159,158,106,151,15,36,22,1,47,150,246,82,32,138,117,164,166,23,21,32,117,193,247,45,154,153,72,5,195,109,225,
180,232,86,124,65,51,63,206,7,146,148,149,144,225,81,76,188,236,196,164,176,232,72,37,35,178,77,151,135,35,145,77,209,164,24,92,103,2,139,33,21,162,80,16,169,241,160,130,76,68,203,196,64,143,220,236,92,9,62,157,100,43,113,144,130,51,230,210,68,210,38,
15,198,100,21,199,93,60,158,108,106,251,68,67,84,55,88,176,27,34,56,37,7,194,216,214,249,181,220,167,100,29,172,124,219,209,81,49,84,222,75,25,67,201,190,6,177,1,176,97,178,14,7,34,124,126,8,177,185,143,44,252,29,140,114,248,53,125,86,101,114,131,63,
186,13,163,237,30,158,186,101,56,134,39,58,134,141,16,27,37,109,212,7,234,136,141,209,131,26,35,187,171,171,137,30,213,200,94,213,173,107,167,88,246,126,157,253,150,229,205,209,233,227,76,171,25,253,243,174,38,150,155,27,110,210,18,165,77,116,88,211,
232,160,102,119,105,23,239,208,214,141,84,211,93,26,251,44,146,231,201,123,80,155,235,33,186,87,138,217,250,199,216,203,236,43,204,94,165,61,71,141,218,27,108,68,123,226,35,35,7,152,102,117,52,87,55,213,52,53,93,210,173,211,181,142,107,116,182,151,53,
52,221,51,87,215,127,192,150,178,252,153,190,217,186,246,61,166,177,220,124,171,166,93,86,106,37,43,179,234,54,135,182,232,110,171,195,70,54,102,211,108,122,101,165,54,92,101,213,42,181,68,21,21,202,155,23,106,159,213,110,227,202,73,254,108,55,150,16,
246,96,215,6,122,68,215,110,213,110,231,246,93,72,211,125,58,191,158,208,181,196,24,228,79,117,150,128,56,42,4,138,252,78,40,55,149,208,49,229,240,63,210,225,135,82,188,172,177,87,152,189,116,195,134,234,174,13,93,221,20,96,31,22,165,246,233,218,77,218,
189,12,5,139,171,233,85,166,29,101,7,224,181,95,243,148,106,177,82,45,167,81,27,186,123,167,54,182,158,110,214,244,163,236,122,145,169,101,127,66,27,46,189,173,123,215,126,157,110,212,180,46,218,167,201,98,174,253,222,146,219,232,29,205,122,245,147,236,
128,246,58,27,197,109,207,104,150,91,180,195,236,199,236,71,200,95,185,191,139,198,164,167,246,20,149,106,223,188,182,116,131,158,185,71,235,208,237,251,53,93,123,130,118,104,171,171,88,94,142,79,226,238,208,179,158,102,218,202,38,221,249,59,182,98,37,
99,186,227,171,76,171,102,37,217,171,172,14,171,179,206,154,181,203,230,168,97,121,179,180,171,27,155,108,206,149,172,116,38,183,79,54,106,107,89,169,139,14,233,236,51,232,71,175,206,246,105,75,153,103,150,230,172,210,6,75,49,97,246,179,186,217,86,18,
74,237,60,43,189,228,171,164,79,234,236,89,52,145,30,212,217,176,221,21,46,161,103,25,187,1,133,191,171,211,195,172,168,102,215,134,209,171,10,247,83,6,31,139,108,92,86,54,117,117,225,100,206,147,89,252,226,226,23,15,191,228,243,75,17,191,56,248,69,91,
192,110,210,10,138,181,139,180,168,69,123,154,229,111,146,134,18,97,240,192,144,171,85,192,80,194,10,138,82,74,177,116,153,47,92,10,225,242,145,113,237,227,227,218,15,198,181,115,41,109,57,49,89,133,181,160,188,96,94,65,89,193,220,2,175,45,127,111,254,
171,115,242,95,179,176,124,198,66,68,236,90,13,87,237,218,16,195,69,135,170,115,21,23,13,23,238,96,17,14,86,110,181,94,75,26,99,14,141,29,244,150,237,221,107,121,188,116,30,59,89,74,186,141,156,7,189,152,237,90,249,117,123,45,71,230,176,3,222,227,252,
114,154,95,14,32,227,48,120,202,75,150,156,194,28,141,137,127,149,112,60,237,69,246,193,114,92,142,148,91,246,105,148,9,216,251,160,4,84,179,163,229,140,157,6,55,207,159,193,14,207,103,236,81,112,2,156,6,215,47,96,236,33,240,10,56,11,110,190,136,177,
195,224,44,184,175,130,177,147,224,216,66,198,30,175,100,150,179,224,230,69,140,29,93,100,97,7,124,140,221,90,167,177,35,224,153,58,116,13,187,10,237,252,238,226,0,59,177,216,70,140,242,10,217,248,191,94,228,220,81,207,191,254,45,44,12,66,127,160,158,
127,217,93,132,156,16,82,79,213,243,255,210,47,17,158,6,210,39,133,231,156,194,62,232,103,133,167,23,57,253,72,29,92,194,191,94,30,224,29,183,68,124,135,157,250,190,62,37,83,127,83,194,191,111,78,253,93,137,78,19,127,91,194,191,51,79,253,125,9,255,126,
59,245,55,38,252,59,244,212,223,153,232,110,249,189,57,255,127,9,230,149,255,7,252,56,116,155,87,218,249,239,188,152,91,254,174,155,255,246,75,243,202,251,242,191,75,209,149,63,255,61,145,197,43,255,63,153,255,142,201,234,149,247,224,191,205,226,63,206,
226,247,18,191,21,115,203,118,243,191,135,249,63,244,180,148,156,72,51,0,0,0,0 };

//==============================================================================
#if JUCE_PUSH_NOTIFICATIONS && JUCE_MODULE_AVAILABLE_juce_gui_extra
 // Returns true if the intent was handled.
 extern bool juce_handleNotificationIntent (void*);
 extern void juce_firebaseDeviceNotificationsTokenRefreshed (void*);
 extern void juce_firebaseRemoteNotificationReceived (void*);
 extern void juce_firebaseRemoteMessagesDeleted();
 extern void juce_firebaseRemoteMessageSent(void*);
 extern void juce_firebaseRemoteMessageSendError (void*, void*);
#endif

extern void juce_contentSharingCompleted (int);

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,                      "<init>",                      "(II)V")

DECLARE_JNI_CLASS (AndroidLayoutParams, "android/view/ViewGroup$LayoutParams")
#undef JNI_CLASS_MEMBERS

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (addView,       "addView",             "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V") \
 METHOD (removeView, "removeView", "(Landroid/view/View;)V") \
 METHOD (updateViewLayout, "updateViewLayout", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V")

DECLARE_JNI_CLASS (AndroidViewManager, "android/view/ViewManager")
#undef JNI_CLASS_MEMBERS

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,           "<init>",             "(IIIIIII)V") \
 FIELD  (gravity,          "gravity",            "I") \
 FIELD  (windowAnimations, "windowAnimations",   "I")

DECLARE_JNI_CLASS (AndroidWindowManagerLayoutParams, "android/view/WindowManager$LayoutParams")
#undef JNI_CLASS_MEMBERS

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getDecorView, "getDecorView",       "()Landroid/view/View;") \
 METHOD (setFlags,     "setFlags",           "(II)V") \
 METHOD (clearFlags,   "clearFlags",         "(I)V")

DECLARE_JNI_CLASS (AndroidWindow, "android/view/Window")
#undef JNI_CLASS_MEMBERS

namespace
{
    enum
    {
        SYSTEM_UI_FLAG_VISIBLE = 0,
        SYSTEM_UI_FLAG_LOW_PROFILE = 1,
        SYSTEM_UI_FLAG_HIDE_NAVIGATION = 2,
        SYSTEM_UI_FLAG_FULLSCREEN = 4,
        SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION = 512,
        SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN = 1024,
        SYSTEM_UI_FLAG_IMMERSIVE = 2048,
        SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 4096
    };

    constexpr int fullScreenFlags = SYSTEM_UI_FLAG_HIDE_NAVIGATION | SYSTEM_UI_FLAG_FULLSCREEN | SYSTEM_UI_FLAG_IMMERSIVE_STICKY;

    constexpr int FLAG_NOT_FOCUSABLE = 0x8;
}

//==============================================================================
class AndroidComponentPeer  : public ComponentPeer,
                              private Timer
{
public:
    AndroidComponentPeer (Component& comp, int windowStyleFlags, void* nativeViewHandle)
        : ComponentPeer (comp, windowStyleFlags),
          fullScreen (false),
          navBarsHidden (false),
          sizeAllocated (0),
          scale ((float) Desktop::getInstance().getDisplays().getMainDisplay().scale)
    {
        auto* env = getEnv();

        // NB: must not put this in the initialiser list, as it invokes a callback,
        // which will fail if the peer is only half-constructed.
        view = GlobalRef (LocalRef<jobject> (env->NewObject (ComponentPeerView, ComponentPeerView.create,
                                                             getAppContext().get(), (jboolean) component.isOpaque(),
                                                             (jlong) this)));

        if (nativeViewHandle != nullptr)
        {
            viewGroupIsWindow = false;

            // we don't know if the user is holding on to a local ref to this, so
            // explicitly create a new one
            auto nativeView = LocalRef<jobject>(env->NewLocalRef(static_cast<jobject> (nativeViewHandle)));

            if (env->IsInstanceOf (nativeView.get(), AndroidActivity))
            {
                viewGroup = GlobalRef (nativeView);
                env->CallVoidMethod (viewGroup.get(), AndroidActivity.setContentView, view.get());
            }
            else if (env->IsInstanceOf (nativeView.get(), AndroidViewGroup))
            {
                viewGroup = GlobalRef (nativeView);
                LocalRef<jobject> layoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));

                env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, layoutParams.get());
                env->CallVoidMethod ((jobject) viewGroup.get(), AndroidViewGroup.addView, view.get());
            }
            else
            {
                // the native handle you passed as a second argument to Component::addToDesktop must
                // either be an Activity or a ViewGroup
                jassertfalse;
            }
        }
        else
        {
            viewGroupIsWindow = true;

            LocalRef<jobject> viewLayoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));

            env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, viewLayoutParams.get());

            Rectangle<int> physicalBounds = comp.getBoundsInParent() * scale;

            view.callVoidMethod (AndroidView.layout,
                                 physicalBounds.getX(), physicalBounds.getY(), physicalBounds.getRight(), physicalBounds.getBottom());

            LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                  physicalBounds.getWidth(), physicalBounds.getHeight(),
                                                                  physicalBounds.getX(), physicalBounds.getY(),
                                                                  TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN | FLAG_NOT_FOCUSABLE,
                                                                  component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));
            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, GRAVITY_LEFT | GRAVITY_TOP);
            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.windowAnimations, 0x01030000 /* android.R.style.Animation */);

            if (Desktop::getInstance().getKioskModeComponent() != nullptr)
                setNavBarsHidden (true);

            LocalRef<jobject> activity (getCurrentActivity());

            if (activity == nullptr)
                activity = getMainActivity();

            viewGroup = GlobalRef (LocalRef<jobject> (env->CallObjectMethod (activity.get(), AndroidContext.getSystemService, javaString ("window").get())));
            env->CallVoidMethod (viewGroup.get(), AndroidViewManager.addView, view.get(), windowLayoutParams.get());
        }

        if (isFocused())
            handleFocusGain();
    }

    ~AndroidComponentPeer() override
    {
        auto* env = getEnv();

        env->CallVoidMethod (view, ComponentPeerView.clear);
        frontWindow = nullptr;

        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            if (env->IsInstanceOf (viewGroup.get(), AndroidActivity))
                env->CallVoidMethod (viewGroup.get(), AndroidActivity.setContentView, nullptr);
            else
                env->CallVoidMethod (viewGroup.get(), AndroidViewManager.removeView, view.get());
        }
        else
        {
            struct ViewDeleter  : public CallbackMessage
            {
                ViewDeleter (const GlobalRef& view_, const GlobalRef& viewGroup_) : view (view_), group (viewGroup_) {}

                void messageCallback() override
                {
                    auto* callbackEnv = getEnv();

                    if (callbackEnv->IsInstanceOf (group.get(), AndroidActivity))
                        callbackEnv->CallVoidMethod (group.get(), AndroidActivity.setContentView, nullptr);
                    else
                        callbackEnv->CallVoidMethod (group.get(), AndroidViewManager.removeView, view.get());
                }

            private:
                GlobalRef view, group;
            };

            (new ViewDeleter (view, viewGroup))->post();
        }
    }

    void* getNativeHandle() const override
    {
        return (void*) view.get();
    }

    void setVisible (bool shouldBeVisible) override
    {
        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            view.callVoidMethod (ComponentPeerView.setVisible, shouldBeVisible);
        }
        else
        {
            struct VisibilityChanger  : public CallbackMessage
            {
                VisibilityChanger (const GlobalRef& view_, bool shouldBeVisible_)
                    : view (view_), shouldBeVisible (shouldBeVisible_)
                {}

                void messageCallback() override
                {
                    view.callVoidMethod (ComponentPeerView.setVisible, shouldBeVisible);
                }

                GlobalRef view;
                bool shouldBeVisible;
            };

            (new VisibilityChanger (view, shouldBeVisible))->post();
        }
    }

    void setTitle (const String& title) override
    {
        view.callVoidMethod (ComponentPeerView.setViewName, javaString (title).get());
    }

    void setBounds (const Rectangle<int>& userRect, bool isNowFullScreen) override
    {
        Rectangle<int> r = (userRect.toFloat() * scale).toNearestInt();

        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            auto* env = getEnv();

            fullScreen = isNowFullScreen;

            {
                view.callVoidMethod (AndroidView.layout,
                                     r.getX(), r.getY(), r.getRight(), r.getBottom());

                if (viewGroup != nullptr && viewGroupIsWindow)
                {
                    LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                          r.getWidth(), r.getHeight(),
                                                                          r.getX(), r.getY(),
                                                                          TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN,
                                                                          component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));
                    env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, 0x3 /* LEFT */ | 0x30 /* TOP */);
                    env->CallVoidMethod (viewGroup.get(), AndroidViewManager.updateViewLayout, view.get(), windowLayoutParams.get());
                }
            }
        }
        else
        {
            class ViewMover  : public CallbackMessage
            {
            public:
                ViewMover (const GlobalRef& v, Rectangle<int> boundsToUse)  : view (v), bounds (boundsToUse) {}

                void messageCallback() override
                {
                    view.callVoidMethod (AndroidView.layout,
                                         bounds.getX(), bounds.getY(), bounds.getRight(), bounds.getBottom());
                }

            private:
                GlobalRef view;
                Rectangle<int> bounds;
            };

            (new ViewMover (view, r))->post();
        }
    }

    Rectangle<int> getBounds() const override
    {
        Rectangle<int> r (view.callIntMethod (AndroidView.getLeft),
                          view.callIntMethod (AndroidView.getTop),
                          view.callIntMethod (AndroidView.getWidth),
                          view.callIntMethod (AndroidView.getHeight));

        return r / scale;
    }

    void handleScreenSizeChange() override
    {
        ComponentPeer::handleScreenSizeChange();

        if (isFullScreen())
            setFullScreen (true);
    }

    Point<int> getScreenPosition() const
    {
        auto* env = getEnv();

        LocalRef<jintArray> position (env->NewIntArray (2));
        env->CallVoidMethod (view.get(), AndroidView.getLocationOnScreen, position.get());

        jint* const screenPosition = env->GetIntArrayElements (position.get(), nullptr);
        Point<int> pos (screenPosition[0], screenPosition[1]);
        env->ReleaseIntArrayElements (position.get(), screenPosition, 0);

        return pos;
    }

    Point<float> localToGlobal (Point<float> relativePosition) override
    {
        return relativePosition + (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::localToGlobal;

    Point<float> globalToLocal (Point<float> screenPosition) override
    {
        return screenPosition - (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::globalToLocal;

    void setMinimised (bool /*shouldBeMinimised*/) override
    {
        // n/a
    }

    bool isMinimised() const override
    {
        return false;
    }

    bool shouldNavBarsBeHidden (bool shouldBeFullScreen) const
    {
        if (shouldBeFullScreen)
            if (Component* kiosk = Desktop::getInstance().getKioskModeComponent())
                if (kiosk->getPeer() == this)
                    return true;

        return false;
    }

    void setNavBarsHidden (bool hidden)
    {
        view.callVoidMethod (ComponentPeerView.setSystemUiVisibilityCompat,
                             hidden ? (jint) (fullScreenFlags)
                                    : (jint) (SYSTEM_UI_FLAG_VISIBLE));

        navBarsHidden = hidden;
    }

    void setFullScreen (bool shouldBeFullScreen) override
    {
        // updating the nav bar visibility is a bit odd on Android - need to wait for
        if (shouldNavBarsBeHidden (shouldBeFullScreen))
        {
            if (! isTimerRunning())
            {
                startTimer (500);
            }
        }
        else
        {
            setNavBarsHidden (false);
        }

        Rectangle<int> r (shouldBeFullScreen ? Desktop::getInstance().getDisplays().getMainDisplay().userArea
                                             : lastNonFullscreenBounds);

        if ((! shouldBeFullScreen) && r.isEmpty())
            r = getBounds();

        // (can't call the component's setBounds method because that'll reset our fullscreen flag)
        if (! r.isEmpty())
            setBounds (r, shouldBeFullScreen);

        component.repaint();
    }

    bool isFullScreen() const override
    {
        return fullScreen;
    }

    void timerCallback() override
    {
        setNavBarsHidden (shouldNavBarsBeHidden (fullScreen));
        setFullScreen (fullScreen);
        stopTimer();
    }

    void setIcon (const Image& /*newIcon*/) override
    {
        // n/a
    }

    bool contains (Point<int> localPos, bool trueIfInAChildWindow) const override
    {
        return isPositiveAndBelow (localPos.x, component.getWidth())
            && isPositiveAndBelow (localPos.y, component.getHeight())
            && ((! trueIfInAChildWindow) || view.callBooleanMethod (ComponentPeerView.containsPoint,
                                                                    localPos.x * scale,
                                                                    localPos.y * scale));
    }

    BorderSize<int> getFrameSize() const override
    {
        // TODO
        return BorderSize<int>();
    }

    bool setAlwaysOnTop (bool /*alwaysOnTop*/) override
    {
        // TODO
        return false;
    }

    void toFront (bool makeActive) override
    {
        // Avoid calling bringToFront excessively: it's very slow
        if (frontWindow != this)
        {
            view.callVoidMethod (AndroidView.bringToFront);

            frontWindow = this;
        }

        if (makeActive)
            grabFocus();

        handleBroughtToFront();
    }

    void toBehind (ComponentPeer*) override
    {
        // TODO
    }

    //==============================================================================
    void handleMouseDownCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        Point<float> pos = globalToLocal (lastMousePos);

        // this forces a mouse-enter/up event, in case for some reason we didn't get a mouse-up before.
        handleMouseEvent (MouseInputSource::InputSourceType::touch, pos, ModifierKeys::currentModifiers.withoutMouseButtons(),
                          MouseInputSource::invalidPressure, MouseInputSource::invalidOrientation, time, {}, index);

        if (isValidPeer (this))
            handleMouseDragCallback (index, sysPos, time);
    }

    void handleMouseDragCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        Point<float> pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown | (1 << (index & 63)));
        ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier);
        handleMouseEvent (MouseInputSource::InputSourceType::touch, pos, ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier),
                          MouseInputSource::invalidPressure, MouseInputSource::invalidOrientation, time, {}, index);
    }

    void handleMouseUpCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        Point<float> pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown & ~(1 << (index & 63)));

        if (touchesDown == 0)
            ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons();

        handleMouseEvent (MouseInputSource::InputSourceType::touch, pos, ModifierKeys::currentModifiers.withoutMouseButtons(), MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation, time, {}, index);
    }

    void handleKeyDownCallback (int k, int kc)
    {
        handleKeyPress (k, static_cast<juce_wchar> (kc));
    }

    void handleKeyUpCallback (int /*k*/, int /*kc*/)
    {
    }

    void handleBackButtonCallback()
    {
        bool handled = false;

        if (auto* app = JUCEApplicationBase::getInstance())
            handled = app->backButtonPressed();

        if (Component* kiosk = Desktop::getInstance().getKioskModeComponent())
            if (kiosk->getPeer() == this)
                setNavBarsHidden (navBarsHidden);

        if (! handled)
        {
            auto* env = getEnv();
            LocalRef<jobject> activity (getCurrentActivity());

            if (activity != nullptr)
            {
                jmethodID finishMethod = env->GetMethodID (AndroidActivity, "finish", "()V");

                if (finishMethod != nullptr)
                    env->CallVoidMethod (activity.get(), finishMethod);
            }
        }

    }

    void handleKeyboardHiddenCallback()
    {
        Component::unfocusAllComponents();
    }

    void handleAppPausedCallback() {}

    void handleAppResumedCallback()
    {
        if (Component* kiosk = Desktop::getInstance().getKioskModeComponent())
            if (kiosk->getPeer() == this)
                setNavBarsHidden (navBarsHidden);
    }

    //==============================================================================
    bool isFocused() const override
    {
        if (view != nullptr)
            return view.callBooleanMethod (AndroidView.hasFocus);

        return false;
    }

    void grabFocus() override
    {
        if (view != nullptr)
            view.callBooleanMethod (AndroidView.requestFocus);
    }

    void handleFocusChangeCallback (bool hasFocus)
    {
        if (isFullScreen())
            setFullScreen (true);

        if (hasFocus)
            handleFocusGain();
        else
            handleFocusLoss();
    }

    static const char* getVirtualKeyboardType (TextInputTarget::VirtualKeyboardType type) noexcept
    {
        switch (type)
        {
            case TextInputTarget::textKeyboard:          return "text";
            case TextInputTarget::numericKeyboard:       return "number";
            case TextInputTarget::decimalKeyboard:       return "numberDecimal";
            case TextInputTarget::urlKeyboard:           return "textUri";
            case TextInputTarget::emailAddressKeyboard:  return "textEmailAddress";
            case TextInputTarget::phoneNumberKeyboard:   return "phone";
            default:                                     jassertfalse; break;
        }

        return "text";
    }

    void textInputRequired (Point<int>, TextInputTarget& target) override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard,
                             javaString (getVirtualKeyboardType (target.getKeyboardType())).get());
    }

    void dismissPendingTextInput() override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard, javaString ("").get());

        // updating the nav bar visibility is a bit odd on Android - need to wait for
        if (! isTimerRunning())
            hideNavBarDelayed();
     }

    void hideNavBarDelayed()
    {
        startTimer (500);
    }

    //==============================================================================
    void handlePaintCallback (jobject canvas, jobject paint)
    {
        auto* env = getEnv();

        jobject rect = env->CallObjectMethod (canvas, AndroidCanvas.getClipBounds);
        const int left   = env->GetIntField (rect, AndroidRect.left);
        const int top    = env->GetIntField (rect, AndroidRect.top);
        const int right  = env->GetIntField (rect, AndroidRect.right);
        const int bottom = env->GetIntField (rect, AndroidRect.bottom);
        env->DeleteLocalRef (rect);

        const Rectangle<int> clip (left, top, right - left, bottom - top);

        const int sizeNeeded = clip.getWidth() * clip.getHeight();
        if (sizeAllocated < sizeNeeded)
        {
            buffer.clear();
            sizeAllocated = sizeNeeded;
            buffer = GlobalRef (LocalRef<jobject> ((jobject) env->NewIntArray (sizeNeeded)));
        }
        else if (sizeNeeded == 0)
        {
            return;
        }

        if (jint* dest = env->GetIntArrayElements ((jintArray) buffer.get(), nullptr))
        {
            {
                Image temp (new PreallocatedImage (clip.getWidth(), clip.getHeight(),
                                                   dest, ! component.isOpaque()));

                {
                    LowLevelGraphicsSoftwareRenderer g (temp);
                    g.setOrigin (-clip.getPosition());
                    g.addTransform (AffineTransform::scale (scale));
                    handlePaint (g);
                }
            }

            env->ReleaseIntArrayElements ((jintArray) buffer.get(), dest, 0);

            env->CallVoidMethod (canvas, AndroidCanvas.drawBitmap, (jintArray) buffer.get(), 0, clip.getWidth(),
                                 (jfloat) clip.getX(), (jfloat) clip.getY(),
                                 clip.getWidth(), clip.getHeight(), true, paint);
        }
    }

    void repaint (const Rectangle<int>& userArea) override
    {
        Rectangle<int> area = userArea * scale;

        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            view.callVoidMethod (AndroidView.invalidate, area.getX(), area.getY(), area.getRight(), area.getBottom());
        }
        else
        {
            struct ViewRepainter  : public CallbackMessage
            {
                ViewRepainter (const GlobalRef& view_, const Rectangle<int>& area_)
                    : view (view_), area (area_) {}

                void messageCallback() override
                {
                    view.callVoidMethod (AndroidView.invalidate, area.getX(), area.getY(),
                                         area.getRight(), area.getBottom());
                }

            private:
                GlobalRef view;
                const Rectangle<int> area;
            };

            (new ViewRepainter (view, area))->post();
        }
    }

    void performAnyPendingRepaintsNow() override
    {
        // TODO
    }

    void setAlpha (float /*newAlpha*/) override
    {
        // TODO
    }

    StringArray getAvailableRenderingEngines() override
    {
        return StringArray ("Software Renderer");
    }

    //==============================================================================
    static Point<float> lastMousePos;
    static int64 touchesDown;

    //==============================================================================
    struct StartupActivityCallbackListener : ActivityLifecycleCallbacks
    {
        void onActivityStarted (jobject /*activity*/) override
        {
            auto* env = getEnv();
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {

                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.unregisterActivityLifecycleCallbacks,
                                     activityCallbackListener.get());
                clear();
                activityCallbackListener.clear();

                const_cast<Displays &> (Desktop::getInstance().getDisplays()).refresh();
            }
        }
    };

private:
    //==============================================================================
    GlobalRef view, viewGroup;
    bool viewGroupIsWindow = false;
    GlobalRef buffer;
    bool fullScreen;
    bool navBarsHidden;
    int sizeAllocated;
    float scale;

    //==============================================================================
    #define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
     METHOD   (create,                      "<init>",                      "(Landroid/content/Context;ZJ)V") \
     METHOD   (clear,                       "clear",                       "()V") \
     METHOD   (setViewName,                 "setViewName",                 "(Ljava/lang/String;)V") \
     METHOD   (setVisible,                  "setVisible",                  "(Z)V") \
     METHOD   (isVisible,                   "isVisible",                   "()Z") \
     METHOD   (containsPoint,               "containsPoint",               "(II)Z") \
     METHOD   (showKeyboard,                "showKeyboard",                "(Ljava/lang/String;)V") \
     METHOD   (setSystemUiVisibilityCompat, "setSystemUiVisibilityCompat", "(I)V") \
     CALLBACK (handlePaintJni,              "handlePaint",                 "(JLandroid/graphics/Canvas;Landroid/graphics/Paint;)V") \
     CALLBACK (handleMouseDownJni,          "handleMouseDown",             "(JIFFJ)V") \
     CALLBACK (handleMouseDragJni,          "handleMouseDrag",             "(JIFFJ)V") \
     CALLBACK (handleMouseUpJni,            "handleMouseUp",               "(JIFFJ)V") \
     CALLBACK (handleKeyDownJni,            "handleKeyDown",               "(JII)V") \
     CALLBACK (handleKeyUpJni,              "handleKeyUp",                 "(JII)V") \
     CALLBACK (handleBackButtonJni,         "handleBackButton",            "(J)V") \
     CALLBACK (handleKeyboardHiddenJni,     "handleKeyboardHidden",        "(J)V") \
     CALLBACK (viewSizeChangedJni,          "viewSizeChanged",             "(J)V") \
     CALLBACK (focusChangedJni,             "focusChanged",                "(JZ)V") \
     CALLBACK (handleAppPausedJni,          "handleAppPaused",             "(J)V") \
     CALLBACK (handleAppResumedJni,         "handleAppResumed",            "(J)V") \

    DECLARE_JNI_CLASS_WITH_BYTECODE (ComponentPeerView, "com/roli/juce/ComponentPeerView", 16, javaComponentPeerView, sizeof (javaComponentPeerView))
//    DECLARE_JNI_CLASS_WITH_MIN_SDK (ComponentPeerView, "com/roli/juce/ComponentPeerView", 16)    
    #undef JNI_CLASS_MEMBERS

    static void JNICALL handlePaintJni          (JNIEnv*, jobject /*view*/, jlong host, jobject canvas, jobject paint)           { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handlePaintCallback (canvas, paint); }
    static void JNICALL handleMouseDownJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDownCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseDragJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDragCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseUpJni        (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseUpCallback   (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL viewSizeChangedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMovedOrResized(); }
    static void JNICALL focusChangedJni         (JNIEnv*, jobject /*view*/, jlong host, jboolean hasFocus)                       { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleFocusChangeCallback (hasFocus); }
    static void JNICALL handleKeyDownJni        (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyDownCallback ((int) k, (int) kc); }
    static void JNICALL handleKeyUpJni          (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyUpCallback ((int) k, (int) kc); }
    static void JNICALL handleBackButtonJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleBackButtonCallback(); }
    static void JNICALL handleKeyboardHiddenJni (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyboardHiddenCallback(); }
    static void JNICALL handleAppPausedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppPausedCallback(); }
    static void JNICALL handleAppResumedJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppResumedCallback(); }

    //==============================================================================
    friend class Displays;
    static AndroidComponentPeer* frontWindow;
    static GlobalRef activityCallbackListener;

    //==============================================================================
    static constexpr int GRAVITY_LEFT = 0x3, GRAVITY_TOP = 0x30;
    static constexpr int TYPE_APPLICATION = 0x2;
    static constexpr int FLAG_NOT_TOUCH_MODAL = 0x20, FLAG_LAYOUT_IN_SCREEN = 0x100, FLAG_LAYOUT_NO_LIMITS = 0x200;
    static constexpr int PIXEL_FORMAT_OPAQUE = -1, PIXEL_FORMAT_TRANSPARENT = -2;

    struct PreallocatedImage  : public ImagePixelData
    {
        PreallocatedImage (int width_, int height_, jint* data_, bool hasAlpha_)
            : ImagePixelData (Image::ARGB, width_, height_), data (data_), hasAlpha (hasAlpha_)
        {
            if (hasAlpha_)
                zeromem (data_, static_cast<size_t> (width * height) * sizeof (jint));
        }

        ~PreallocatedImage() override
        {
            if (hasAlpha)
            {
                auto pix = (PixelARGB*) data;

                for (int i = width * height; --i >= 0;)
                {
                    pix->unpremultiply();
                    ++pix;
                }
            }
        }

        std::unique_ptr<ImageType> createType() const override
        {
            return std::make_unique<SoftwareImageType>();
        }

        std::unique_ptr<LowLevelGraphicsContext> createLowLevelContext() override
        {
            return std::make_unique<LowLevelGraphicsSoftwareRenderer> (Image (this));
        }

        void initialiseBitmapData (Image::BitmapData& bm, int x, int y, Image::BitmapData::ReadWriteMode /*mode*/) override
        {
            bm.lineStride = width * static_cast<int> (sizeof (jint));
            bm.pixelStride = static_cast<int> (sizeof (jint));
            bm.pixelFormat = Image::ARGB;
            bm.data = (uint8*) (data + x + y * width);
        }

        ImagePixelData::Ptr clone() override
        {
            auto s = new PreallocatedImage (width, height, nullptr, hasAlpha);
            s->allocatedData.malloc (sizeof (jint) * static_cast<size_t> (width * height));
            s->data = s->allocatedData;
            memcpy (s->data, data, sizeof (jint) * static_cast<size_t> (width * height));
            return s;
        }

    private:
        jint* data;
        HeapBlock<jint> allocatedData;
        bool hasAlpha;

        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PreallocatedImage)
    };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidComponentPeer)
};

Point<float> AndroidComponentPeer::lastMousePos;
int64 AndroidComponentPeer::touchesDown = 0;
AndroidComponentPeer* AndroidComponentPeer::frontWindow = nullptr;
GlobalRef AndroidComponentPeer::activityCallbackListener;
AndroidComponentPeer::ComponentPeerView_Class AndroidComponentPeer::ComponentPeerView;

//==============================================================================
ComponentPeer* Component::createNewPeer (int styleFlags, void* nativeWindow)
{
    return new AndroidComponentPeer (*this, styleFlags, nativeWindow);
}

//==============================================================================
bool Desktop::canUseSemiTransparentWindows() noexcept
{
    return true;
}

double Desktop::getDefaultMasterScale()
{
    return 1.0;
}

Desktop::DisplayOrientation Desktop::getCurrentOrientation() const
{
    enum
    {
        ROTATION_0   = 0,
        ROTATION_90  = 1,
        ROTATION_180 = 2,
        ROTATION_270 = 3
    };

    JNIEnv* env = getEnv();
    LocalRef<jstring> windowServiceString (javaString ("window"));


    LocalRef<jobject> windowManager = LocalRef<jobject> (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));

    if (windowManager.get() != nullptr)
    {
        LocalRef<jobject> display = LocalRef<jobject> (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

        if (display.get() != nullptr)
        {
            int rotation = env->CallIntMethod (display, AndroidDisplay.getRotation);

            switch (rotation)
            {
                case ROTATION_0:   return upright;
                case ROTATION_90:  return rotatedAntiClockwise;
                case ROTATION_180: return upsideDown;
                case ROTATION_270: return rotatedClockwise;
            }
        }
    }

    jassertfalse;
    return upright;
}

bool MouseInputSource::SourceList::addSource()
{
    addSource (sources.size(), MouseInputSource::InputSourceType::touch);
    return true;
}

bool MouseInputSource::SourceList::canUseTouch()
{
    return true;
}

Point<float> MouseInputSource::getCurrentRawMousePosition()
{
    return AndroidComponentPeer::lastMousePos;
}

void MouseInputSource::setRawMousePosition (Point<float>)
{
    // not needed
}

//==============================================================================
bool KeyPress::isKeyCurrentlyDown (int /*keyCode*/)
{
    // TODO
    return false;
}

JUCE_API void JUCE_CALLTYPE Process::hide()
{
    auto* env = getEnv();
    LocalRef<jobject> currentActivity (getCurrentActivity().get());

    if (env->CallBooleanMethod (currentActivity.get(), AndroidActivity.moveTaskToBack, true) == 0)
    {
        GlobalRef intent (LocalRef<jobject> (env->NewObject (AndroidIntent, AndroidIntent.constructor)));
        env->CallObjectMethod (intent, AndroidIntent.setAction,   javaString ("android.intent.action.MAIN")  .get());
        env->CallObjectMethod (intent, AndroidIntent.addCategory, javaString ("android.intent.category.HOME").get());

        env->CallVoidMethod (currentActivity.get(), AndroidContext.startActivity, intent.get());
    }
}

//==============================================================================
// TODO
JUCE_API bool JUCE_CALLTYPE Process::isForegroundProcess() { return true; }
JUCE_API void JUCE_CALLTYPE Process::makeForegroundProcess() {}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (show,                   "show",                 "()V") \
 METHOD (getWindow,              "getWindow",            "()Landroid/view/Window;")

DECLARE_JNI_CLASS (AndroidDialog, "android/app/Dialog")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (construct,                   "<init>",                 "(Landroid/content/Context;)V") \
 METHOD (create,                      "create",                 "()Landroid/app/AlertDialog;") \
 METHOD (setTitle,                    "setTitle",               "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setMessage,                  "setMessage",             "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setCancelable,               "setCancelable",          "(Z)Landroid/app/AlertDialog$Builder;") \
 METHOD (setOnCancelListener,         "setOnCancelListener",    "(Landroid/content/DialogInterface$OnCancelListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setPositiveButton,           "setPositiveButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNegativeButton,           "setNegativeButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNeutralButton,            "setNeutralButton",       "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;")

DECLARE_JNI_CLASS (AndroidAlertDialogBuilder, "android/app/AlertDialog$Builder")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (dismiss,    "dismiss",  "()V")

DECLARE_JNI_CLASS (AndroidDialogInterface, "android/content/DialogInterface")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \

DECLARE_JNI_CLASS (AndroidDialogOnClickListener, "android/content/DialogInterface$OnClickListener")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class DialogListener  : public juce::AndroidInterfaceImplementer
{
public:
    DialogListener (ModalComponentManager::Callback* callbackToUse, int resultToUse)
        : callback (callbackToUse), result (resultToUse)
    {}

    void onResult (jobject dialog)
    {
        auto* env = getEnv();
        env->CallVoidMethod (dialog, AndroidDialogInterface.dismiss);

        if (callback != nullptr)
            callback->modalStateFinished (result);

        callback = nullptr;
    }

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onCancel" || methodName == "onClick")
        {
            onResult (env->GetObjectArrayElement (args, 0));
            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::unique_ptr<ModalComponentManager::Callback> callback;
    int result;
};

//==============================================================================
static void createAndroidDialog (const String& title, const String& message,
                                 ModalComponentManager::Callback* callback,
                                 const String& positiveButton = {}, const String& negativeButton = {},
                                 const String& neutralButton = {})
{
    auto* env = getEnv();

    LocalRef<jobject> builder (env->NewObject (AndroidAlertDialogBuilder, AndroidAlertDialogBuilder.construct, getMainActivity().get()));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setTitle,   javaString (title).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setMessage, javaString (message).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setCancelable, true));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setOnCancelListener,
                                     CreateJavaInterface (new DialogListener (callback, 0),
                                                          "android/content/DialogInterface$OnCancelListener").get()));

    auto positiveButtonText = positiveButton.isEmpty() ? String ("OK") : positiveButton;

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setPositiveButton,
                                     javaString (positiveButtonText).get(),
                                     CreateJavaInterface (new DialogListener (callback, positiveButton.isEmpty() ? 0 : 1),
                                                          "android/content/DialogInterface$OnClickListener").get()));

    if (negativeButton.isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNegativeButton,
                                         javaString (negativeButton).get(),
                                         CreateJavaInterface (new DialogListener (callback, neutralButton.isEmpty() ? 0 : 2),
                                                              "android/content/DialogInterface$OnClickListener").get()));

    if (neutralButton.isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNegativeButton,
                                         javaString (neutralButton).get(),
                                         CreateJavaInterface (new DialogListener (callback, 0),
                                                              "android/content/DialogInterface$OnClickListener").get()));

    LocalRef<jobject> dialog (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.create));

    LocalRef<jobject> window (env->CallObjectMethod (dialog.get(), AndroidDialog.getWindow));

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
    {
        env->CallVoidMethod (window.get(), AndroidWindow.setFlags, FLAG_NOT_FOCUSABLE, FLAG_NOT_FOCUSABLE);
        LocalRef<jobject> decorView (env->CallObjectMethod (window.get(), AndroidWindow.getDecorView));
        env->CallVoidMethod (decorView.get(), AndroidView.setSystemUiVisibility, fullScreenFlags);
    }

    env->CallVoidMethod (dialog.get(), AndroidDialog.show);

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
        env->CallVoidMethod (window.get(), AndroidWindow.clearFlags, FLAG_NOT_FOCUSABLE);
}

void JUCE_CALLTYPE NativeMessageBox::showMessageBoxAsync (AlertWindow::AlertIconType /*iconType*/,
                                                          const String& title, const String& message,
                                                          Component* /*associatedComponent*/,
                                                          ModalComponentManager::Callback* callback)
{
    createAndroidDialog (title, message, callback);
}

bool JUCE_CALLTYPE NativeMessageBox::showOkCancelBox (AlertWindow::AlertIconType /*iconType*/,
                                                      const String& title, const String& message,
                                                      Component* /*associatedComponent*/,
                                                      ModalComponentManager::Callback* callback)
{
    jassert (callback != nullptr); // on android, all alerts must be non-modal!!

    createAndroidDialog (title, message, callback, "OK", "Cancel");
    return false;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoCancelBox (AlertWindow::AlertIconType /*iconType*/,
                                                        const String& title, const String& message,
                                                        Component* /*associatedComponent*/,
                                                        ModalComponentManager::Callback* callback)
{
    jassert (callback != nullptr); // on android, all alerts must be non-modal!!

    createAndroidDialog (title, message, callback, "Yes", "No", "Cancel");
    return 0;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoBox (AlertWindow::AlertIconType /*iconType*/,
                                                   const String& title, const String& message,
                                                   Component* /*associatedComponent*/,
                                                   ModalComponentManager::Callback* callback)
{
    jassert (callback != nullptr); // on android, all alerts must be non-modal!!

    createAndroidDialog (title, message, callback, "Yes", "No");
    return 0;
}

//==============================================================================
static bool androidScreenSaverEnabled = true;

void Desktop::setScreenSaverEnabled (bool shouldEnable)
{
    constexpr auto FLAG_KEEP_SCREEN_ON = 0x80;

    if (shouldEnable != androidScreenSaverEnabled)
    {
        LocalRef<jobject> activity (getMainActivity());

        if (activity != nullptr)
        {
            auto* env = getEnv();

            LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
            env->CallVoidMethod (mainWindow.get(), AndroidWindow.setFlags, shouldEnable ? 0 : FLAG_KEEP_SCREEN_ON, FLAG_KEEP_SCREEN_ON);
        }

        androidScreenSaverEnabled = shouldEnable;
    }
}

bool Desktop::isScreenSaverEnabled()
{
    return androidScreenSaverEnabled;
}

//==============================================================================
void Desktop::setKioskComponent (Component* kioskComp, bool enableOrDisable, bool allowMenusAndBars)
{
    ignoreUnused (allowMenusAndBars);

    if (AndroidComponentPeer* peer = dynamic_cast<AndroidComponentPeer*> (kioskComp->getPeer()))
        peer->setFullScreen (enableOrDisable);
    else
        jassertfalse; // (this should have been checked by the caller)
}

//==============================================================================
static jint getAndroidOrientationFlag (int orientations) noexcept
{
    enum
    {
        SCREEN_ORIENTATION_LANDSCAPE          = 0,
        SCREEN_ORIENTATION_PORTRAIT           = 1,
        SCREEN_ORIENTATION_USER               = 2,
        SCREEN_ORIENTATION_REVERSE_LANDSCAPE  = 8,
        SCREEN_ORIENTATION_REVERSE_PORTRAIT   = 9,
        SCREEN_ORIENTATION_USER_LANDSCAPE     = 11,
        SCREEN_ORIENTATION_USER_PORTRAIT      = 12,
    };

    switch (orientations)
    {
        case Desktop::upright:                                          return (jint) SCREEN_ORIENTATION_PORTRAIT;
        case Desktop::upsideDown:                                       return (jint) SCREEN_ORIENTATION_REVERSE_PORTRAIT;
        case Desktop::upright + Desktop::upsideDown:                    return (jint) SCREEN_ORIENTATION_USER_PORTRAIT;
        case Desktop::rotatedAntiClockwise:                             return (jint) SCREEN_ORIENTATION_LANDSCAPE;
        case Desktop::rotatedClockwise:                                 return (jint) SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
        case Desktop::rotatedClockwise + Desktop::rotatedAntiClockwise: return (jint) SCREEN_ORIENTATION_USER_LANDSCAPE;
        default:                                                        return (jint) SCREEN_ORIENTATION_USER;
    }
}

void Desktop::allowedOrientationsChanged()
{
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
        getEnv()->CallVoidMethod (activity.get(), AndroidActivity.setRequestedOrientation, getAndroidOrientationFlag (allowedOrientations));
}

//==============================================================================
bool juce_areThereAnyAlwaysOnTopWindows()
{
    return false;
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,          "<init>",         "()V") \
 FIELD  (density,         "density",        "F") \
 FIELD  (widthPixels,     "widthPixels",    "I") \
 FIELD  (heightPixels,    "heightPixels",   "I")

DECLARE_JNI_CLASS (AndroidDisplayMetrics, "android/util/DisplayMetrics")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class LayoutChangeListener  : public juce::AndroidInterfaceImplementer
{
public:
    virtual void onLayoutChange (LocalRef<jobject> view, int left, int top, int right, int bottom,
                                 int oldLeft, int oldTop, int oldRight, int oldBottom) = 0;

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onLayoutChange")
        {
            jassert (env->GetArrayLength (args) == 9);

            LocalRef<jobject> view (env->GetObjectArrayElement (args, 0));
            int dims[8];

            for (int i = 1; i < 9; ++i)
            {
                LocalRef<jobject> integer (env->GetObjectArrayElement (args, i));
                dims[i - 1] = env->CallIntMethod (integer.get(), JavaInteger.intValue);
            }

            onLayoutChange (std::move (view), dims[0], dims[1], dims[2], dims[3],
                            dims[4], dims[5], dims[6], dims[7]);

            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::unique_ptr<ModalComponentManager::Callback> callback;
};

//==============================================================================
class MainActivityWindowLayoutListener   : public LayoutChangeListener
{
public:
    void onLayoutChange (LocalRef<jobject> /*view*/, int left, int top, int right, int bottom,
                         int oldLeft, int oldTop, int oldRight, int oldBottom) override
    {
        auto newBounds = Rectangle<int>::leftTopRightBottom (left, top, right, bottom);
        auto oldBounds = Rectangle<int>::leftTopRightBottom (oldLeft, oldTop, oldRight, oldBottom);

        if (newBounds != oldBounds)
        {
            auto& displays = Desktop::getInstance().getDisplays();
            auto& mainDisplay = displays.getMainDisplay();

            Rectangle<int> userArea = newBounds / mainDisplay.scale;

            if (userArea != mainDisplay.userArea)
                const_cast<Displays&> (displays).refresh();
        }
    }
};

//==============================================================================
void Displays::findDisplays (float masterScale)
{
    auto* env = getEnv();

    LocalRef<jobject> usableSize (env->NewObject (AndroidPoint, AndroidPoint.create, 0, 0));
    LocalRef<jstring> windowServiceString (javaString ("window"));
    LocalRef<jobject> displayMetrics (env->NewObject (AndroidDisplayMetrics, AndroidDisplayMetrics.create));
    LocalRef<jobject> windowManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));
    LocalRef <jobject> display (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

    jmethodID getRealMetricsMethod = env->GetMethodID (AndroidDisplay, "getRealMetrics", "(Landroid/util/DisplayMetrics;)V");

    if (getRealMetricsMethod != nullptr)
        env->CallVoidMethod (display.get(), getRealMetricsMethod, displayMetrics.get());
    else
        env->CallVoidMethod (display.get(), AndroidDisplay.getMetrics, displayMetrics.get());

    env->CallVoidMethod (display.get(), AndroidDisplay.getSize, usableSize.get());

    Display d;

    d.isMain = true;
    d.scale = env->GetFloatField (displayMetrics.get(), AndroidDisplayMetrics.density);
    d.dpi = (d.scale * 160.f);
    d.scale *= masterScale;

    d.totalArea = Rectangle<int> (env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.widthPixels),
                                  env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.heightPixels)) / d.scale;

    d.userArea = Rectangle<int> (env->GetIntField (usableSize.get(), AndroidPoint.x),
                                 env->GetIntField (usableSize.get(), AndroidPoint.y)) / d.scale;

    // unfortunately usableSize still contains the nav bar
    // the best workaround is to try to get the size of the top-level view of
    // the main activity
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
    {
        LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
        LocalRef<jobject> decorView (env->CallObjectMethod (mainWindow.get(), AndroidWindow.getDecorView));
        LocalRef<jobject> contentView (env->CallObjectMethod (decorView.get(), AndroidView.findViewById, 0x01020002 /* android.R.id.content */));

        if (contentView != nullptr)
        {
            Rectangle<int> activityArea (env->CallIntMethod (contentView.get(), AndroidView.getLeft),
                                         env->CallIntMethod (contentView.get(), AndroidView.getTop),
                                         env->CallIntMethod (contentView.get(), AndroidView.getWidth),
                                         env->CallIntMethod (contentView.get(), AndroidView.getHeight));

            if (! activityArea.isEmpty())
                d.userArea = activityArea / d.scale;

            static bool hasAddedMainActivityListener = false;

            if (! hasAddedMainActivityListener)
            {
                hasAddedMainActivityListener = true;

                env->CallVoidMethod (contentView.get(), AndroidView.addOnLayoutChangeListener,
                                     CreateJavaInterface (new MainActivityWindowLayoutListener,
                                                          "android/view/View$OnLayoutChangeListener").get());
            }
        }
    }
    else
    {
        // the main activity may have not started yet so add an activity listener
        if (AndroidComponentPeer::activityCallbackListener == nullptr)
        {
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {
                AndroidComponentPeer::activityCallbackListener = GlobalRef (CreateJavaInterface (
                        new AndroidComponentPeer::StartupActivityCallbackListener,
                        "android/app/Application$ActivityLifecycleCallbacks"));

                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.registerActivityLifecycleCallbacks,
                                     AndroidComponentPeer::activityCallbackListener.get());
            }
        }
    }

    displays.add (d);
}

//==============================================================================
Image juce_createIconForFile (const File& /*file*/)
{
    return Image();
}

//==============================================================================
void* CustomMouseCursorInfo::create() const                                         { return nullptr; }
void* MouseCursor::createStandardMouseCursor (MouseCursor::StandardCursorType)      { return nullptr; }
void MouseCursor::deleteMouseCursor (void* /*cursorHandle*/, bool /*isStandard*/)   {}

//==============================================================================
void MouseCursor::showInWindow (ComponentPeer*) const   {}

//==============================================================================
bool DragAndDropContainer::performExternalDragDropOfFiles (const StringArray& /*files*/, bool /*canMove*/,
                                                           Component* /*srcComp*/, std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

bool DragAndDropContainer::performExternalDragDropOfText (const String& /*text*/, Component* /*srcComp*/,
                                                          std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

//==============================================================================
void LookAndFeel::playAlertSound()
{
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getText,      "getText",            "()Ljava/lang/CharSequence;") \
 METHOD (setText,      "setText",            "(Ljava/lang/CharSequence;)V")

DECLARE_JNI_CLASS (AndroidClipboardManager, "android/content/ClipboardManager")
#undef JNI_CLASS_MEMBERS

//==============================================================================
void SystemClipboard::copyTextToClipboard (const String& text)
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    env->CallVoidMethod (clipboardManager.get(), AndroidClipboardManager.setText, javaString(text).get());
}

String SystemClipboard::getTextFromClipboard()
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    LocalRef<jobject> charSequence (env->CallObjectMethod (clipboardManager.get(), AndroidClipboardManager.getText));

    if (charSequence == nullptr)
        return {};

    return juceString(LocalRef<jstring> ((jstring) env->CallObjectMethod(charSequence.get(), JavaCharSequence.toString)));
}

//==============================================================================
const int extendedKeyModifier       = 0x10000;

const int KeyPress::spaceKey        = ' ';
const int KeyPress::returnKey       = 66;
const int KeyPress::escapeKey       = 4;
const int KeyPress::backspaceKey    = 67;
const int KeyPress::leftKey         = extendedKeyModifier + 1;
const int KeyPress::rightKey        = extendedKeyModifier + 2;
const int KeyPress::upKey           = extendedKeyModifier + 3;
const int KeyPress::downKey         = extendedKeyModifier + 4;
const int KeyPress::pageUpKey       = extendedKeyModifier + 5;
const int KeyPress::pageDownKey     = extendedKeyModifier + 6;
const int KeyPress::endKey          = extendedKeyModifier + 7;
const int KeyPress::homeKey         = extendedKeyModifier + 8;
const int KeyPress::deleteKey       = extendedKeyModifier + 9;
const int KeyPress::insertKey       = -1;
const int KeyPress::tabKey          = 61;
const int KeyPress::F1Key           = extendedKeyModifier + 10;
const int KeyPress::F2Key           = extendedKeyModifier + 11;
const int KeyPress::F3Key           = extendedKeyModifier + 12;
const int KeyPress::F4Key           = extendedKeyModifier + 13;
const int KeyPress::F5Key           = extendedKeyModifier + 14;
const int KeyPress::F6Key           = extendedKeyModifier + 16;
const int KeyPress::F7Key           = extendedKeyModifier + 17;
const int KeyPress::F8Key           = extendedKeyModifier + 18;
const int KeyPress::F9Key           = extendedKeyModifier + 19;
const int KeyPress::F10Key          = extendedKeyModifier + 20;
const int KeyPress::F11Key          = extendedKeyModifier + 21;
const int KeyPress::F12Key          = extendedKeyModifier + 22;
const int KeyPress::F13Key          = extendedKeyModifier + 23;
const int KeyPress::F14Key          = extendedKeyModifier + 24;
const int KeyPress::F15Key          = extendedKeyModifier + 25;
const int KeyPress::F16Key          = extendedKeyModifier + 26;
const int KeyPress::F17Key          = extendedKeyModifier + 50;
const int KeyPress::F18Key          = extendedKeyModifier + 51;
const int KeyPress::F19Key          = extendedKeyModifier + 52;
const int KeyPress::F20Key          = extendedKeyModifier + 53;
const int KeyPress::F21Key          = extendedKeyModifier + 54;
const int KeyPress::F22Key          = extendedKeyModifier + 55;
const int KeyPress::F23Key          = extendedKeyModifier + 56;
const int KeyPress::F24Key          = extendedKeyModifier + 57;
const int KeyPress::F25Key          = extendedKeyModifier + 58;
const int KeyPress::F26Key          = extendedKeyModifier + 59;
const int KeyPress::F27Key          = extendedKeyModifier + 60;
const int KeyPress::F28Key          = extendedKeyModifier + 61;
const int KeyPress::F29Key          = extendedKeyModifier + 62;
const int KeyPress::F30Key          = extendedKeyModifier + 63;
const int KeyPress::F31Key          = extendedKeyModifier + 64;
const int KeyPress::F32Key          = extendedKeyModifier + 65;
const int KeyPress::F33Key          = extendedKeyModifier + 66;
const int KeyPress::F34Key          = extendedKeyModifier + 67;
const int KeyPress::F35Key          = extendedKeyModifier + 68;
const int KeyPress::numberPad0      = extendedKeyModifier + 27;
const int KeyPress::numberPad1      = extendedKeyModifier + 28;
const int KeyPress::numberPad2      = extendedKeyModifier + 29;
const int KeyPress::numberPad3      = extendedKeyModifier + 30;
const int KeyPress::numberPad4      = extendedKeyModifier + 31;
const int KeyPress::numberPad5      = extendedKeyModifier + 32;
const int KeyPress::numberPad6      = extendedKeyModifier + 33;
const int KeyPress::numberPad7      = extendedKeyModifier + 34;
const int KeyPress::numberPad8      = extendedKeyModifier + 35;
const int KeyPress::numberPad9      = extendedKeyModifier + 36;
const int KeyPress::numberPadAdd            = extendedKeyModifier + 37;
const int KeyPress::numberPadSubtract       = extendedKeyModifier + 38;
const int KeyPress::numberPadMultiply       = extendedKeyModifier + 39;
const int KeyPress::numberPadDivide         = extendedKeyModifier + 40;
const int KeyPress::numberPadSeparator      = extendedKeyModifier + 41;
const int KeyPress::numberPadDecimalPoint   = extendedKeyModifier + 42;
const int KeyPress::numberPadEquals         = extendedKeyModifier + 43;
const int KeyPress::numberPadDelete         = extendedKeyModifier + 44;
const int KeyPress::playKey         = extendedKeyModifier + 45;
const int KeyPress::stopKey         = extendedKeyModifier + 46;
const int KeyPress::fastForwardKey  = extendedKeyModifier + 47;
const int KeyPress::rewindKey       = extendedKeyModifier + 48;

} // namespace juce
