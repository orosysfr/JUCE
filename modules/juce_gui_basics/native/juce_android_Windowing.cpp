/*
  ==============================================================================

   This file is part of the JUCE library.
   Copyright (c) 2020 - Raw Material Software Limited

   JUCE is an open source library subject to commercial or open-source
   licensing.

   By using JUCE, you agree to the terms of both the JUCE 6 End-User License
   Agreement and JUCE Privacy Policy (both effective as of the 16th June 2020).

   End User License Agreement: www.juce.com/juce-6-licence
   Privacy Policy: www.juce.com/juce-privacy-policy

   Or: You may also use this code under the terms of the GPL v3 (see
   www.gnu.org/licenses).

   JUCE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY, AND ALL WARRANTIES, WHETHER
   EXPRESSED OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR PURPOSE, ARE
   DISCLAIMED.

  ==============================================================================
*/

namespace juce
{
// This byte-code is generated from native/java/com/rmsl/juce/ComponentPeerView.java with min sdk version 16
// See juce_core/native/java/README.txt on how to generate this byte-code.
static const uint8 javaComponentPeerView[] = {
    0x1F, 0x8B, 0x08, 0x08, 0x1C, 0x97, 0x49, 0x61, 0x00, 0x0B, 0x4A, 0x61, 0x76, 0x61, 0x44, 0x65, 0x78, 0x42, 0x79, 0x74,
    0x65, 0x43, 0x6F, 0x64, 0x65, 0x2E, 0x64, 0x65, 0x78, 0x00, 0xA5, 0x9B, 0x09, 0x7C, 0x5C, 0x55, 0xBD, 0xC7, 0xFF, 0xE7,
    0xDC, 0x59, 0x92, 0xC9, 0x24, 0x99, 0x4C, 0xD2, 0xA4, 0x4B, 0xA6, 0x99, 0x74, 0x4D, 0xDB, 0xA4, 0x99, 0x24, 0x5D, 0x4D,
    0xF7, 0x8D, 0xA6, 0x4D, 0x17, 0x9A, 0xB4, 0xD2, 0xA4, 0x0A, 0x93, 0xE4, 0x26, 0x99, 0x76, 0x72, 0x67, 0x3A, 0x33, 0x59,
    0x0A, 0xBC, 0xD7, 0x0A, 0x68, 0x0B, 0x8A, 0x16, 0x28, 0xB4, 0x40, 0x11, 0x50, 0x1E, 0xE2, 0xF2, 0xD4, 0xC7, 0x26, 0xF2,
    0xD4, 0x87, 0x08, 0x08, 0x8A, 0x50, 0x10, 0x14, 0xA5, 0xFA, 0x00, 0x51, 0x2A, 0x94, 0x52, 0x4B, 0x15, 0x04, 0x81, 0xF7,
    0xFB, 0x9F, 0x7B, 0x26, 0x99, 0x74, 0xB1, 0xEA, 0x4B, 0x3F, 0xDF, 0xFB, 0xFF, 0xDF, 0x73, 0xFE, 0xE7, 0xDC, 0xB3, 0xFC,
    0xCF, 0xFF, 0x9C, 0x7B, 0xD3, 0x74, 0x98, 0x03, 0x9E, 0x50, 0xDD, 0x4C, 0xAA, 0xAD, 0x3D, 0x18, 0x98, 0xFE, 0xE6, 0xDF,
    0x6E, 0x9B, 0xB5, 0xFE, 0x48, 0x56, 0xF5, 0x89, 0x65, 0xDF, 0x59, 0xB1, 0xF9, 0xF3, 0xC9, 0x5F, 0xBF, 0x71, 0xDF, 0xD8,
    0x7D, 0x33, 0x88, 0xE2, 0x44, 0x34, 0xB0, 0x69, 0x86, 0x9F, 0xF4, 0xCF, 0xA1, 0x3A, 0xA2, 0x80, 0xB0, 0xD3, 0xE7, 0x80,
    0x57, 0x1D, 0x44, 0x4B, 0x20, 0x1F, 0x71, 0x12, 0x8D, 0x84, 0x3C, 0x9C, 0x45, 0x74, 0x31, 0xE4, 0xC1, 0x6C, 0x22, 0x64,
    0x51, 0x34, 0x97, 0xE8, 0xAE, 0x49, 0x44, 0x47, 0x21, 0x6F, 0x08, 0x10, 0x1D, 0x00, 0x37, 0x83, 0x2F, 0x82, 0x3B, 0xC1,
    0xD7, 0xC0, 0xC3, 0xE0, 0x51, 0xF0, 0x04, 0x78, 0x12, 0x1C, 0x02, 0xCF, 0x81, 0x5F, 0x82, 0x17, 0xC1, 0x7B, 0xA0, 0x70,
    0x2C, 0x51, 0x31, 0x18, 0x0D, 0xC6, 0x82, 0x71, 0x60, 0x32, 0xA8, 0x04, 0x35, 0xA0, 0x01, 0xEC, 0x04, 0x37, 0x81, 0xFB,
    0xC0, 0x21, 0x70, 0x1C, 0xF8, 0xCA, 0x88, 0xEA, 0xC1, 0x46, 0x60, 0x81, 0xCB, 0xC1, 0x8D, 0xE0, 0x6E, 0xF0, 0x14, 0xF8,
    0x2B, 0xC8, 0x0B, 0x12, 0x55, 0x80, 0x8B, 0xC0, 0xA7, 0xC0, 0xBD, 0xE0, 0x08, 0x08, 0x96, 0x13, 0xAD, 0x07, 0xFD, 0xE0,
    0xCB, 0xE0, 0x59, 0x50, 0x38, 0x8E, 0xA8, 0x15, 0xDC, 0x00, 0xBE, 0x0B, 0x7E, 0x03, 0x3E, 0x00, 0xC1, 0xF1, 0x44, 0x0B,
    0xC1, 0x66, 0x10, 0x05, 0x7B, 0xC1, 0xFD, 0xE0, 0xA7, 0xE0, 0x18, 0x90, 0x13, 0x88, 0xCA, 0xC1, 0x4C, 0xD0, 0x01, 0x76,
    0x81, 0xFD, 0xE0, 0x2E, 0xF0, 0x20, 0x78, 0x08, 0x3C, 0x05, 0x9E, 0x01, 0xCF, 0x83, 0xC3, 0xE0, 0x25, 0x70, 0x04, 0x1C,
    0x03, 0x27, 0xC1, 0x5F, 0xC1, 0x07, 0x40, 0x4E, 0x24, 0x72, 0x03, 0x2F, 0xF0, 0x83, 0x62, 0x30, 0x16, 0x94, 0x83, 0x49,
    0xA0, 0x12, 0xD4, 0x80, 0x39, 0x60, 0x01, 0x58, 0x02, 0xCE, 0x03, 0xEB, 0xC0, 0x26, 0xD0, 0x02, 0x3E, 0x09, 0x12, 0x60,
    0x37, 0xB8, 0x0E, 0xDC, 0x0A, 0xBE, 0x0E, 0xBE, 0x03, 0x7E, 0x04, 0x9E, 0x06, 0x2F, 0x82, 0xD7, 0xC0, 0xDB, 0x80, 0x30,
    0x87, 0xF9, 0x60, 0x22, 0xA8, 0x02, 0x1F, 0x03, 0xCB, 0xC0, 0x85, 0x60, 0x2B, 0xE8, 0x01, 0xBB, 0xC0, 0x1E, 0xB0, 0x17,
    0x1C, 0x00, 0xB7, 0x4F, 0xB2, 0xE7, 0xFE, 0x3E, 0xF0, 0x30, 0x78, 0x16, 0xBC, 0x0C, 0x5E, 0x07, 0x7F, 0x02, 0x79, 0x93,
    0x89, 0x8A, 0x40, 0x09, 0x18, 0x0B, 0x16, 0x81, 0xD5, 0x60, 0x03, 0xB8, 0x08, 0xF4, 0x80, 0xAB, 0xC0, 0x5D, 0xE0, 0x1E,
    0xF0, 0x13, 0xF0, 0x2B, 0xF0, 0x3B, 0xF0, 0x16, 0xF8, 0x00, 0x64, 0x55, 0xC0, 0x1F, 0x41, 0x2D, 0x98, 0x0F, 0xD6, 0x82,
    0x2D, 0xC0, 0x04, 0x16, 0xB8, 0x04, 0x5C, 0x0D, 0x6E, 0x01, 0x77, 0x83, 0x1F, 0x82, 0x67, 0xC0, 0x5B, 0xE0, 0xCF, 0xE0,
    0x7D, 0xF0, 0x21, 0xC8, 0x9F, 0x82, 0xF1, 0x03, 0x75, 0x60, 0x09, 0x58, 0x07, 0x4C, 0xD0, 0x07, 0x76, 0x83, 0x1B, 0xC0,
    0x97, 0xC1, 0x03, 0xE0, 0x61, 0xF0, 0x22, 0xF8, 0x3D, 0x78, 0x03, 0x1C, 0x03, 0xEF, 0x81, 0x8F, 0x80, 0x6F, 0x2A, 0x51,
    0x19, 0x08, 0x81, 0x7A, 0xD0, 0x00, 0x9A, 0x40, 0x2B, 0xE8, 0x02, 0xDB, 0xC1, 0xE7, 0xC0, 0x7E, 0x70, 0x1B, 0xF8, 0x2E,
    0x78, 0x1C, 0x3C, 0x0D, 0x7E, 0x0B, 0x5E, 0x05, 0x47, 0xC1, 0x49, 0xF0, 0x0E, 0xF8, 0x00, 0xB8, 0xA6, 0xA1, 0x5E, 0x30,
    0x16, 0x4C, 0x02, 0x95, 0xA0, 0x16, 0x2C, 0x07, 0x2D, 0x20, 0x0A, 0x76, 0x82, 0x83, 0xE0, 0x5B, 0xE0, 0x61, 0xF0, 0x22,
    0xF8, 0x1D, 0x38, 0x01, 0x64, 0x25, 0xCA, 0x83, 0x31, 0x60, 0x2A, 0xA8, 0x03, 0xF3, 0x41, 0x23, 0x68, 0x01, 0x6D, 0x60,
    0x1B, 0xE8, 0x05, 0x97, 0x82, 0x3D, 0x60, 0x3F, 0xF8, 0x22, 0xF8, 0x3E, 0x78, 0x08, 0x3C, 0x01, 0xDE, 0x04, 0x39, 0x55,
    0xF0, 0x39, 0x50, 0x02, 0x26, 0x83, 0x99, 0x60, 0x2D, 0xF8, 0x24, 0x88, 0x82, 0xCF, 0x80, 0x5B, 0xC0, 0x83, 0xE0, 0xC7,
    0xE0, 0x17, 0xE0, 0x15, 0x70, 0x02, 0xD0, 0x74, 0x8C, 0x33, 0x28, 0x03, 0xD3, 0xC1, 0x4A, 0xB0, 0x16, 0x34, 0x83, 0x2D,
    0xA0, 0x03, 0x6C, 0x05, 0x31, 0xD0, 0x0B, 0x76, 0x82, 0xCB, 0xC0, 0x95, 0xE0, 0x5A, 0x70, 0x00, 0x7C, 0x15, 0xDC, 0x0B,
    0x1E, 0x03, 0xCF, 0x83, 0x97, 0xC1, 0xAB, 0xE0, 0x35, 0xF0, 0x06, 0x78, 0x0B, 0xBC, 0x0D, 0xDE, 0x01, 0xEF, 0x03, 0x17,
    0x1E, 0x8B, 0x90, 0x44, 0x39, 0xA0, 0x18, 0x94, 0x90, 0x1D, 0xA7, 0x46, 0x81, 0xD1, 0x60, 0x0C, 0x28, 0x05, 0x08, 0x31,
    0x84, 0x70, 0x41, 0x08, 0x07, 0x84, 0xA5, 0x4F, 0x58, 0xEA, 0x84, 0x65, 0x4D, 0x58, 0xBA, 0x84, 0x25, 0x47, 0x7A, 0x09,
    0x10, 0x5C, 0x8E, 0xE0, 0x2E, 0x84, 0xA9, 0x26, 0x4C, 0x0D, 0x61, 0x78, 0x09, 0xC3, 0x42, 0xBA, 0x7B, 0x54, 0x0D, 0x42,
    0xA0, 0x06, 0xD4, 0x02, 0x84, 0x4B, 0x42, 0x18, 0xA5, 0x99, 0x60, 0x16, 0x98, 0xAD, 0xE3, 0xE6, 0x5C, 0xF0, 0x31, 0x50,
    0x0F, 0xE6, 0x81, 0xF9, 0x60, 0x01, 0x58, 0x08, 0x16, 0x81, 0xC5, 0x64, 0xC7, 0xD5, 0xA5, 0x60, 0x39, 0x58, 0x09, 0x3E,
    0x0E, 0xC2, 0xA0, 0x0D, 0xB4, 0x83, 0x0E, 0xB2, 0xFB, 0x97, 0xFE, 0x71, 0x6B, 0xF9, 0xB7, 0x31, 0x76, 0x9F, 0x85, 0xBE,
    0xF7, 0x68, 0x9D, 0xD3, 0x79, 0x1C, 0xA4, 0x4E, 0xF7, 0x6A, 0xDD, 0x81, 0x01, 0xC8, 0xCF, 0xA8, 0xCB, 0xAF, 0xC7, 0xCC,
    0xAB, 0xD3, 0xF3, 0x74, 0x7A, 0xBE, 0xCE, 0x4B, 0xEB, 0x23, 0xB4, 0xEE, 0xD3, 0xE3, 0xCA, 0xF5, 0x17, 0x6A, 0xBD, 0x48,
    0x97, 0x1D, 0x99, 0x51, 0xA7, 0x1A, 0xEB, 0x52, 0x5B, 0xE7, 0x31, 0x9E, 0xA0, 0x6D, 0x26, 0x65, 0xD4, 0x33, 0x45, 0xD7,
    0x53, 0xA0, 0xF5, 0x4A, 0xD8, 0x14, 0x69, 0x7D, 0x46, 0xA9, 0xFD, 0x4C, 0x1E, 0xF3, 0x79, 0xBA, 0x1E, 0xD6, 0x97, 0xE9,
    0x7A, 0xAA, 0x74, 0x3D, 0x23, 0xF4, 0x3C, 0x34, 0x96, 0xDA, 0xED, 0xE1, 0xB9, 0x68, 0x2E, 0xB5, 0xC7, 0xB0, 0x56, 0xDB,
    0x34, 0x68, 0x9D, 0x9F, 0xB5, 0x4A, 0xEB, 0x5B, 0x60, 0xB3, 0x5A, 0xEB, 0xFC, 0xDC, 0x46, 0xAD, 0x77, 0x43, 0x5F, 0xA3,
    0xF5, 0x01, 0xE8, 0x6B, 0xB5, 0x7E, 0x05, 0xF4, 0x75, 0x5A, 0xDF, 0x0B, 0x7D, 0xBD, 0xD6, 0x0F, 0x40, 0xDF, 0xA0, 0xF5,
    0xDB, 0x32, 0xD2, 0xEF, 0xCA, 0xD0, 0xBF, 0x0D, 0xBD, 0x59, 0xEB, 0x0F, 0x64, 0xA4, 0x3F, 0x92, 0xA1, 0x3F, 0x99, 0xA1,
    0x3F, 0x97, 0x51, 0xE7, 0xE1, 0x8C, 0xF4, 0x57, 0xA1, 0x37, 0x69, 0xFD, 0x68, 0x46, 0xFA, 0xD1, 0x31, 0x43, 0x3A, 0x8F,
    0xF3, 0xF9, 0x5A, 0x9F, 0x91, 0x51, 0xCF, 0xC9, 0x0C, 0x7B, 0x1E, 0xC3, 0x8D, 0xE9, 0x31, 0x81, 0xBE, 0x49, 0xEB, 0x8E,
    0xC0, 0x90, 0x4D, 0x51, 0x86, 0x5E, 0x1A, 0xB0, 0xFD, 0xB1, 0x4E, 0x8F, 0xE7, 0x05, 0x5A, 0x9F, 0x80, 0xF4, 0xCD, 0x5A,
    0xAF, 0xCC, 0xD0, 0xE7, 0x40, 0x6F, 0xD1, 0xFA, 0x32, 0xE8, 0xAD, 0x5A, 0x6F, 0x84, 0xBE, 0x45, 0xEB, 0x17, 0x40, 0xFF,
    0xA4, 0xD6, 0x3B, 0xA0, 0x7F, 0x42, 0xEB, 0xD1, 0x8C, 0x74, 0xF6, 0xAB, 0x0B, 0xB5, 0x9E, 0x42, 0xFA, 0x45, 0x5A, 0xBF,
    0x22, 0xC3, 0x7E, 0x6F, 0x80, 0x7D, 0x5B, 0xD0, 0x00, 0xD9, 0x32, 0x5B, 0xF0, 0x5A, 0x9F, 0x48, 0x09, 0xB2, 0xE5, 0x3D,
    0x4A, 0x0A, 0xBA, 0x5F, 0xCB, 0x07, 0xB4, 0xFC, 0xAE, 0x96, 0x0F, 0x6A, 0xF9, 0xDF, 0xDA, 0xFE, 0x31, 0xE2, 0xF8, 0x10,
    0x24, 0x97, 0xB0, 0x65, 0xBE, 0xE0, 0x58, 0x51, 0x47, 0x8F, 0x12, 0xCB, 0x32, 0x72, 0x0B, 0x8E, 0x1B, 0x76, 0x7E, 0x99,
    0xCE, 0x2F, 0x43, 0x8E, 0x5F, 0xB0, 0x9F, 0x17, 0xAB, 0xB3, 0x52, 0x10, 0x2B, 0xED, 0x5E, 0x25, 0xCB, 0xE8, 0x11, 0x25,
    0x03, 0xF4, 0xB4, 0x92, 0x75, 0xF4, 0x7B, 0x25, 0x73, 0xE8, 0x88, 0xF2, 0xF3, 0x49, 0xB4, 0x02, 0xD2, 0x89, 0xC8, 0xF3,
    0x16, 0xF1, 0x9A, 0x74, 0xD1, 0x17, 0x94, 0x1C, 0x41, 0xB7, 0x40, 0x66, 0x23, 0x72, 0x19, 0x4A, 0xD6, 0xD1, 0x09, 0xE2,
    0xB5, 0x3D, 0x59, 0xDD, 0xE7, 0xE8, 0xF4, 0x1C, 0x44, 0x81, 0xB7, 0x55, 0xBF, 0xED, 0xFB, 0x7C, 0x3C, 0xF7, 0xF3, 0x4A,
    0x16, 0xD3, 0x5E, 0x7D, 0xFF, 0x45, 0xE2, 0xB5, 0x66, 0xA7, 0xFB, 0x70, 0x4A, 0xBB, 0x4E, 0xDF, 0x1F, 0x50, 0xD2, 0xA0,
    0x1B, 0xC9, 0x5E, 0x8B, 0x37, 0x69, 0x79, 0xB3, 0x92, 0x82, 0xBE, 0xAC, 0xE5, 0x1D, 0xC4, 0x6B, 0x4F, 0xD2, 0x3E, 0x25,
    0x2B, 0xE8, 0x4B, 0xC4, 0xEB, 0x6C, 0x82, 0x7A, 0x5E, 0x21, 0x22, 0xDB, 0xFF, 0x2A, 0x39, 0x87, 0x5E, 0x52, 0x72, 0x0C,
    0xFD, 0x8E, 0x78, 0x4D, 0x56, 0x52, 0x4A, 0xCB, 0xE3, 0xC4, 0xB1, 0x78, 0x26, 0xFD, 0x90, 0x38, 0x56, 0x78, 0xE9, 0x90,
    0x92, 0xA3, 0xE8, 0x18, 0x71, 0xBC, 0xB0, 0xDB, 0x3D, 0x0A, 0x2B, 0x9B, 0x65, 0x29, 0xA2, 0xE3, 0xDD, 0x4A, 0x4E, 0xA1,
    0xBF, 0x28, 0xB9, 0x40, 0x05, 0xB3, 0x00, 0x56, 0xB8, 0xA1, 0xE6, 0x25, 0x87, 0x2E, 0x57, 0x72, 0x24, 0xED, 0xD6, 0xF7,
    0x7B, 0x94, 0x9C, 0x4D, 0xAF, 0xAB, 0xF9, 0xA9, 0x52, 0x76, 0x63, 0x51, 0xE3, 0x6F, 0x88, 0xE7, 0xC5, 0x2E, 0x57, 0x86,
    0x74, 0x53, 0xCB, 0x4E, 0x25, 0xF3, 0xA9, 0x4B, 0xC9, 0x51, 0x24, 0x84, 0x2D, 0xA5, 0x9A, 0xBF, 0x89, 0xCA, 0x3E, 0x88,
    0x19, 0xE9, 0x56, 0x72, 0x3A, 0x45, 0x94, 0x5C, 0x44, 0x5B, 0x95, 0x2C, 0xA4, 0x6D, 0x5A, 0x46, 0x95, 0x5C, 0x48, 0x3D,
    0x4A, 0x8E, 0xA2, 0x7E, 0x2D, 0x2F, 0x55, 0x72, 0x16, 0xED, 0x52, 0x32, 0x48, 0x57, 0x29, 0xE9, 0xA7, 0xCF, 0x29, 0x99,
    0x4B, 0x57, 0x2B, 0xE9, 0xA2, 0x6B, 0xB5, 0x9F, 0xEC, 0xD3, 0xF9, 0xD7, 0x2B, 0x39, 0x83, 0x6E, 0x50, 0x32, 0x9B, 0x0E,
    0x2A, 0xE9, 0xA1, 0x5B, 0xB5, 0xDD, 0x6D, 0x4A, 0x66, 0xD1, 0xED, 0x4A, 0xDA, 0xF3, 0x10, 0xC4, 0x08, 0xDD, 0xA9, 0xE5,
    0x57, 0xB4, 0xBC, 0x4B, 0xC9, 0xB1, 0xF4, 0x55, 0x2D, 0xBF, 0xA6, 0xD3, 0xBF, 0xAE, 0xFD, 0xF0, 0x1B, 0x5A, 0xFE, 0xA7,
    0x96, 0xDF, 0xD4, 0x7E, 0xFA, 0x2D, 0x25, 0x3F, 0x46, 0xDF, 0x56, 0x72, 0x26, 0x3D, 0xA4, 0xE5, 0xC3, 0x4A, 0x8E, 0xA3,
    0x9F, 0x2B, 0x59, 0x4E, 0xCF, 0x69, 0xF9, 0xBC, 0x96, 0xBF, 0xD0, 0xF9, 0xBF, 0xD4, 0xF7, 0x2F, 0x68, 0xF9, 0x2B, 0x25,
    0xF3, 0xE8, 0xD7, 0x4A, 0x4E, 0xA2, 0x17, 0x95, 0x9C, 0x46, 0x87, 0x95, 0x9C, 0x4F, 0xBF, 0x55, 0xD2, 0xF6, 0x9F, 0xA0,
    0xF6, 0x1F, 0xBE, 0x7F, 0x59, 0xC9, 0x5A, 0x7A, 0x45, 0x49, 0xDB, 0x9F, 0xD8, 0xFE, 0x55, 0x25, 0xEB, 0xE9, 0xA8, 0x92,
    0x35, 0x74, 0x52, 0xCB, 0x3F, 0x2B, 0x39, 0x95, 0xDE, 0x55, 0x72, 0x34, 0xBD, 0xA7, 0x64, 0x88, 0xDE, 0xD7, 0xF7, 0x7F,
    0xD3, 0x76, 0x1F, 0x68, 0xF9, 0xA1, 0xCE, 0xFF, 0x48, 0x8F, 0x8B, 0x4F, 0xF0, 0x9E, 0x54, 0x42, 0xFB, 0x89, 0xE5, 0x62,
    0xFA, 0x1F, 0xB5, 0x2E, 0x25, 0x7D, 0x5F, 0xC9, 0x02, 0xCA, 0x13, 0xBC, 0xEF, 0xD8, 0x7E, 0x3A, 0x0D, 0x2B, 0xE2, 0x1A,
    0x22, 0xE5, 0x65, 0xFF, 0xA6, 0xA4, 0xA4, 0x27, 0x88, 0xF7, 0x9F, 0x22, 0xFA, 0x01, 0xF1, 0x59, 0x60, 0x94, 0xF6, 0x53,
    0x7B, 0x2D, 0xA5, 0xF7, 0x43, 0xBC, 0x2E, 0xD1, 0x1D, 0x88, 0xD1, 0xD7, 0xE9, 0x0D, 0x69, 0xAC, 0x4E, 0xE7, 0xFD, 0x8C,
    0x63, 0x37, 0xE7, 0x7F, 0x0F, 0xF2, 0x6E, 0x9D, 0x5F, 0xA6, 0xCB, 0x4F, 0xCB, 0x28, 0xFF, 0x24, 0xF2, 0x1F, 0xD5, 0xF9,
    0x41, 0xB2, 0xF7, 0x4C, 0xDE, 0xEF, 0x4E, 0xEA, 0xF2, 0x87, 0x21, 0xDF, 0xD4, 0xF9, 0xBC, 0xCF, 0x2F, 0x80, 0xBE, 0xBC,
    0xD6, 0x3E, 0x0B, 0xAC, 0xAB, 0xB5, 0xD3, 0x3A, 0x20, 0xB7, 0x01, 0x43, 0xE7, 0xF7, 0x82, 0x9D, 0xDA, 0x66, 0x8F, 0x4A,
    0x37, 0x94, 0xFE, 0xE1, 0x74, 0xFB, 0x4C, 0xD0, 0x2A, 0x3C, 0x14, 0xE7, 0x97, 0x2A, 0x6A, 0x95, 0x39, 0x98, 0xCB, 0x2C,
    0xD4, 0xC2, 0xCF, 0xCA, 0xAE, 0xB6, 0xCF, 0x45, 0x7E, 0xD1, 0xDC, 0xE6, 0xA1, 0xED, 0xBE, 0x5A, 0xA4, 0xE7, 0xC8, 0x62,
    0xBC, 0x02, 0xD6, 0x48, 0xE9, 0x98, 0x2B, 0x1D, 0xE4, 0xF6, 0x15, 0x50, 0x73, 0x5B, 0x0E, 0x6D, 0x0F, 0x06, 0x10, 0x89,
    0xBD, 0xC4, 0x76, 0xCD, 0xED, 0xB6, 0xAD, 0x41, 0x39, 0x8E, 0xED, 0xEB, 0x67, 0xD0, 0x92, 0x5E, 0x8F, 0x9C, 0x2B, 0xDF,
    0xFC, 0xC8, 0xF2, 0xF1, 0x78, 0xB8, 0x7D, 0x15, 0xAF, 0x39, 0xF4, 0xF3, 0xCB, 0xAA, 0xED, 0xF3, 0xC9, 0x38, 0x8C, 0x68,
    0xDC, 0xB7, 0x43, 0xF5, 0x96, 0x9F, 0xCD, 0xED, 0x9E, 0x52, 0x6D, 0x9F, 0xAF, 0xCE, 0xF6, 0x6C, 0x83, 0x0A, 0x84, 0xDF,
    0x5F, 0x37, 0x79, 0xD4, 0xE9, 0xCF, 0x0C, 0xCD, 0xA4, 0x25, 0x4E, 0x2F, 0x7C, 0xED, 0x38, 0x9E, 0xC9, 0xFB, 0x83, 0x47,
    0x58, 0xC1, 0x89, 0x88, 0x4E, 0x5E, 0x51, 0xF1, 0x87, 0xD3, 0xAD, 0x67, 0x29, 0xEB, 0x8A, 0x3F, 0x72, 0x9C, 0x75, 0xA8,
    0xF6, 0x2C, 0xAC, 0xB6, 0xE7, 0xAE, 0x39, 0x6E, 0xDB, 0x71, 0x4E, 0xB1, 0x54, 0x67, 0x0E, 0x39, 0x17, 0x36, 0x7E, 0xC4,
    0x95, 0xE6, 0xED, 0x9E, 0xCC, 0x7C, 0x29, 0xAE, 0x10, 0xD7, 0xBB, 0xEF, 0xEC, 0x77, 0xCD, 0x46, 0xCF, 0x3C, 0x54, 0x71,
    0xDC, 0x40, 0x7B, 0xB9, 0x8F, 0xAB, 0xAB, 0x39, 0xAE, 0x63, 0x64, 0xFD, 0xB9, 0xE8, 0x63, 0x0A, 0x69, 0x7E, 0xDA, 0xE2,
    0xF3, 0xAA, 0xF3, 0x57, 0x16, 0xEE, 0xB8, 0xAF, 0xCD, 0xD5, 0xF6, 0x3E, 0x5A, 0xE8, 0x2A, 0xA2, 0x71, 0xD2, 0x0B, 0x3B,
    0x1E, 0x85, 0xE6, 0x64, 0x2E, 0x35, 0xD7, 0xE5, 0x91, 0xE5, 0x5B, 0x02, 0x2B, 0xAF, 0x98, 0x2B, 0xE6, 0x0D, 0xA5, 0x05,
    0x57, 0x60, 0x2F, 0x19, 0xB2, 0x58, 0x08, 0x0B, 0x8F, 0xB1, 0x01, 0x87, 0xDA, 0x0D, 0x13, 0x05, 0xFD, 0x57, 0xF3, 0x35,
    0x64, 0x38, 0x66, 0x5E, 0x34, 0x9A, 0x36, 0x26, 0x31, 0x0E, 0x46, 0x31, 0xF9, 0x8D, 0x2D, 0xD0, 0xD2, 0xF6, 0xCD, 0xA9,
    0x5C, 0xB4, 0x7B, 0x3A, 0x7A, 0xE2, 0x75, 0x70, 0xFB, 0x1D, 0x6A, 0x1C, 0xEA, 0x68, 0xA9, 0x93, 0xED, 0xE7, 0x1A, 0x6E,
    0x9A, 0x7D, 0x91, 0x93, 0xFC, 0x85, 0x5C, 0x86, 0x9F, 0x35, 0x02, 0xEB, 0xDC, 0xF2, 0x15, 0x71, 0xCF, 0x4E, 0x79, 0x46,
    0xC5, 0x53, 0x3C, 0x97, 0xEC, 0x73, 0x3B, 0xAB, 0xED, 0xF3, 0x5A, 0xAB, 0x3F, 0x4F, 0xF7, 0x73, 0x1C, 0xC6, 0x30, 0x1E,
    0x9C, 0x02, 0x0F, 0x6F, 0xF5, 0x81, 0xC2, 0x7C, 0xD5, 0x67, 0xA1, 0xFE, 0x11, 0x7D, 0xA1, 0xDA, 0xFE, 0x96, 0x10, 0xF7,
    0xF1, 0xA9, 0x2E, 0x6F, 0x30, 0x7D, 0xFF, 0x60, 0x7A, 0x48, 0xA5, 0x4B, 0x7D, 0xE2, 0xBD, 0xB5, 0xDA, 0xF6, 0xE7, 0x66,
    0x5F, 0xBE, 0x5A, 0x13, 0xEC, 0x41, 0xFC, 0xDC, 0xAF, 0x54, 0xDB, 0x67, 0xDE, 0xE6, 0x60, 0x3E, 0xDA, 0xC8, 0x27, 0x6B,
    0xF4, 0xB3, 0xDC, 0x87, 0x56, 0x8F, 0xC6, 0x93, 0xF3, 0x06, 0xED, 0xBE, 0x79, 0x56, 0xBB, 0x31, 0xCA, 0x2E, 0x0F, 0x1E,
    0xCF, 0x3D, 0xB9, 0x0F, 0x76, 0x4F, 0xB2, 0xDF, 0xB9, 0xFD, 0xC5, 0xF1, 0x60, 0x31, 0xE2, 0xEB, 0x38, 0x47, 0x0E, 0x5A,
    0xE3, 0x42, 0xAB, 0x5A, 0xF7, 0x15, 0xE3, 0xAE, 0x8C, 0xE2, 0xA1, 0x69, 0xB4, 0x2F, 0xBB, 0x75, 0x5F, 0x21, 0xEE, 0x02,
    0xB8, 0x9B, 0xA0, 0xEE, 0x8A, 0x50, 0xEF, 0x02, 0xCC, 0xB5, 0xD7, 0x31, 0xDA, 0x19, 0x43, 0xBD, 0x98, 0x41, 0xE8, 0x65,
    0x8E, 0x62, 0x94, 0x2B, 0xA0, 0x52, 0x87, 0x13, 0x69, 0xDB, 0xB1, 0xCF, 0x7A, 0x1C, 0x73, 0x1C, 0x9F, 0xA0, 0x32, 0x0F,
    0xDF, 0xF3, 0x7E, 0xDC, 0x72, 0xD0, 0x0F, 0xAD, 0x87, 0x76, 0xD0, 0x96, 0x9B, 0x47, 0x40, 0xEB, 0xC4, 0x5E, 0x64, 0x05,
    0xBB, 0xD4, 0xB5, 0x1B, 0xFB, 0xF6, 0x38, 0xD4, 0x19, 0xF7, 0xA9, 0x7D, 0xD8, 0x51, 0x44, 0xE3, 0x17, 0xCF, 0xA0, 0x49,
    0x82, 0x4F, 0x7B, 0x56, 0xD0, 0x81, 0x96, 0x37, 0x73, 0x9B, 0x9C, 0x58, 0xBF, 0x41, 0x27, 0x71, 0x8D, 0x6E, 0x3C, 0xD5,
    0x6F, 0x58, 0xBE, 0x5E, 0xDD, 0x92, 0x77, 0xC8, 0x3F, 0x69, 0x7C, 0xE7, 0x2C, 0xF4, 0xA7, 0x2D, 0xAB, 0x84, 0xD6, 0x64,
    0xB9, 0xDC, 0xFE, 0x92, 0xD2, 0xAC, 0x1C, 0xA5, 0x59, 0xA1, 0x38, 0x35, 0xBB, 0xBC, 0xC6, 0x1C, 0xA3, 0x88, 0xFC, 0xD2,
    0x3F, 0x61, 0xFC, 0xB2, 0xD9, 0xE4, 0x77, 0x6E, 0xF7, 0x25, 0x31, 0x0E, 0x5E, 0xD7, 0x1A, 0x97, 0xC3, 0xE9, 0x1F, 0xE1,
    0x57, 0xD2, 0x0A, 0x0D, 0xD0, 0x75, 0x0E, 0xF6, 0x34, 0xF6, 0x6E, 0xEE, 0x95, 0xDD, 0xFA, 0x7D, 0x54, 0x71, 0x7B, 0xAE,
    0xA3, 0xE2, 0x24, 0x38, 0x01, 0x8E, 0x83, 0x5F, 0x03, 0xDE, 0x1C, 0x0C, 0x87, 0x3A, 0xE3, 0x0F, 0xFD, 0xEC, 0x5A, 0x48,
    0xFF, 0xD4, 0xFD, 0xA9, 0x3F, 0x76, 0x3E, 0x9F, 0x13, 0x8B, 0xB1, 0x1E, 0xF9, 0x7B, 0x14, 0x9F, 0x5B, 0xA4, 0x51, 0x71,
    0xA3, 0x98, 0xBC, 0x5F, 0x4C, 0xBF, 0x5E, 0xC8, 0xCA, 0x5B, 0xC4, 0xD4, 0x9B, 0x05, 0xE9, 0xE8, 0x82, 0xB8, 0x12, 0xB2,
    0x7D, 0xA6, 0x29, 0xE8, 0x57, 0x71, 0xD6, 0xA1, 0x22, 0x1F, 0x62, 0x4B, 0x48, 0xFB, 0x58, 0xA8, 0x91, 0xCA, 0x8D, 0x3C,
    0xAC, 0x79, 0xA7, 0x8A, 0x77, 0xB5, 0x21, 0x3B, 0xC6, 0xC6, 0x37, 0x9A, 0x54, 0xBE, 0xD4, 0xA3, 0xFC, 0x39, 0x5D, 0x66,
    0x61, 0x3A, 0x2F, 0xB4, 0x08, 0x65, 0xBC, 0xCA, 0x07, 0xD3, 0x79, 0x2B, 0x07, 0xF3, 0xE6, 0x0D, 0xE6, 0xB9, 0xD5, 0x29,
    0x0F, 0x67, 0x74, 0x9D, 0xD7, 0xE7, 0x3A, 0x5F, 0x45, 0x06, 0xAE, 0xD3, 0xA9, 0xD7, 0xFD, 0x45, 0x21, 0x7B, 0xCD, 0x34,
    0x2D, 0xF2, 0x67, 0xC4, 0x17, 0x03, 0xBE, 0xC8, 0x29, 0xF1, 0x50, 0x03, 0x39, 0x44, 0xC5, 0x7B, 0x43, 0xFD, 0xE9, 0xD6,
    0x75, 0xF1, 0x3B, 0x6F, 0x0B, 0xFA, 0x94, 0xA7, 0xDB, 0xC0, 0x3F, 0x56, 0xC8, 0x8E, 0xFD, 0x7E, 0x5F, 0xFE, 0xE0, 0x9A,
    0x19, 0x08, 0xA5, 0xD7, 0x4C, 0x91, 0x6A, 0x53, 0x3A, 0xFD, 0xDF, 0x75, 0xFA, 0x46, 0xDF, 0x08, 0xF5, 0x7C, 0xA9, 0xD7,
    0xDE, 0x15, 0x21, 0xFB, 0xBD, 0xD2, 0xF2, 0x2D, 0x53, 0x6D, 0x55, 0xB1, 0x0E, 0xF5, 0xE1, 0x3C, 0xF8, 0xA1, 0xA1, 0x9F,
    0x73, 0x55, 0xC8, 0xDE, 0x47, 0xF2, 0x54, 0x39, 0xFB, 0xAD, 0xF3, 0xDA, 0x8C, 0x34, 0x97, 0x8E, 0xDF, 0x37, 0x9E, 0xA3,
    0x6F, 0xE7, 0xE9, 0xBE, 0xA5, 0xED, 0xBF, 0x74, 0x0E, 0xFB, 0x95, 0x83, 0x63, 0x61, 0xB7, 0xE3, 0xEB, 0x67, 0x68, 0xC7,
    0x3D, 0x67, 0x48, 0x7B, 0x30, 0x23, 0xCD, 0xA1, 0x9F, 0xF5, 0xC3, 0x90, 0xFD, 0xFE, 0xEF, 0x17, 0xFC, 0xB5, 0xA0, 0x35,
    0x24, 0xC9, 0x96, 0x06, 0x6D, 0xAE, 0x41, 0xDC, 0x3B, 0xBE, 0x39, 0xE4, 0xA6, 0xCD, 0x21, 0x97, 0x4E, 0xCD, 0x86, 0x1F,
    0x63, 0x26, 0x7D, 0x9B, 0x43, 0xEC, 0xD1, 0x7B, 0x11, 0xB5, 0x37, 0x87, 0xB2, 0xB0, 0x2A, 0x47, 0xA1, 0x55, 0x38, 0xF9,
    0x89, 0x02, 0xD5, 0x07, 0x9E, 0x97, 0x43, 0x21, 0x7B, 0xBF, 0x3E, 0x73, 0x1F, 0x9A, 0x97, 0xE0, 0xAD, 0x61, 0xC3, 0x7A,
    0x72, 0x9C, 0x5F, 0xF1, 0x2E, 0xFB, 0x87, 0xA1, 0x7C, 0xF0, 0x85, 0xB3, 0x96, 0xA9, 0x5B, 0xFE, 0xD1, 0x47, 0xAA, 0xEF,
    0x8B, 0xEA, 0xC9, 0x11, 0xE6, 0x32, 0x5E, 0x3C, 0x87, 0xF7, 0xEB, 0xDF, 0xA3, 0x0C, 0x9F, 0x53, 0xFD, 0xA3, 0xFC, 0xD4,
    0xF4, 0x25, 0x94, 0xE3, 0x5D, 0x51, 0x48, 0xC7, 0x1C, 0xEC, 0xE3, 0xCD, 0xB7, 0x17, 0x60, 0xFE, 0x4A, 0x79, 0xFE, 0xB0,
    0x63, 0x18, 0xC4, 0xD1, 0xCE, 0x8B, 0xF5, 0xE2, 0xC9, 0xB2, 0x7C, 0xB9, 0x90, 0x39, 0xAE, 0xE7, 0x3F, 0xF5, 0x11, 0x4D,
    0x13, 0xFC, 0x2D, 0xA2, 0xE2, 0x44, 0xD3, 0xED, 0x1C, 0x7B, 0xF2, 0x39, 0x1F, 0x31, 0xC3, 0xC7, 0xD2, 0x61, 0x61, 0x4F,
    0x87, 0x74, 0xBA, 0x6F, 0xEB, 0xCB, 0xE2, 0xB7, 0x62, 0xB1, 0xB7, 0xE2, 0xB7, 0xE7, 0xB2, 0x5B, 0x63, 0xDB, 0xFD, 0xE4,
    0x5C, 0x76, 0xEB, 0x6C, 0x3B, 0x7E, 0x49, 0x13, 0x0E, 0xF5, 0x6D, 0x83, 0xC7, 0x80, 0xE7, 0x84, 0xCF, 0x50, 0xFC, 0xCD,
    0x25, 0x1B, 0x77, 0x3C, 0x96, 0x05, 0x35, 0xF6, 0x37, 0x17, 0xBF, 0xAF, 0xA9, 0x6D, 0xA8, 0x87, 0x73, 0x85, 0xBD, 0xFB,
    0x56, 0xBA, 0xF9, 0x7B, 0x04, 0xE7, 0x58, 0xBE, 0x1C, 0x8C, 0x89, 0x47, 0xC4, 0xCF, 0x5F, 0x45, 0x93, 0x92, 0x15, 0x6F,
    0xC7, 0x42, 0x25, 0xD4, 0x97, 0x85, 0x1D, 0xF8, 0x98, 0xE5, 0x9B, 0x83, 0x99, 0xA9, 0xE0, 0x17, 0x06, 0x69, 0x8F, 0x75,
    0xFA, 0x1B, 0x11, 0x7F, 0x63, 0xC8, 0xD5, 0x78, 0x90, 0xC3, 0xCF, 0xAB, 0xAC, 0xB1, 0xBF, 0x35, 0xF8, 0xC5, 0xE0, 0xF3,
    0xF4, 0x39, 0x23, 0x5F, 0xCC, 0x75, 0x67, 0xE3, 0x39, 0xD9, 0x68, 0x9B, 0x47, 0xFA, 0xC7, 0xD7, 0xD6, 0xBA, 0x29, 0xB6,
    0x68, 0x24, 0xF5, 0x1D, 0xF0, 0x88, 0x8A, 0x13, 0x96, 0xCF, 0xC3, 0x91, 0x56, 0xCE, 0x51, 0x27, 0x1C, 0x5B, 0xB7, 0x82,
    0x7D, 0x78, 0x86, 0x47, 0xB5, 0x2F, 0xBE, 0x1E, 0xED, 0x32, 0xFC, 0x05, 0x15, 0xBF, 0xB1, 0xE7, 0x9C, 0x9F, 0xB5, 0xB2,
    0xC6, 0xFE, 0x9E, 0x31, 0x7C, 0xCE, 0xED, 0x9E, 0x71, 0x1A, 0xF7, 0xC9, 0x85, 0x67, 0xC5, 0x37, 0xAC, 0x86, 0xB7, 0xF8,
    0x7D, 0x15, 0x7F, 0x26, 0x1D, 0x4D, 0xF0, 0x0E, 0x5F, 0x33, 0xE4, 0xCF, 0xD9, 0x3A, 0x6E, 0x75, 0xD4, 0xD8, 0x3E, 0x14,
    0xBB, 0x00, 0xA7, 0xA1, 0xBE, 0xCC, 0x5A, 0xE7, 0xE0, 0x99, 0xF6, 0xFA, 0x89, 0x61, 0xFD, 0x70, 0x99, 0x7C, 0xED, 0x43,
    0xBD, 0xC8, 0x2E, 0x45, 0x45, 0x4D, 0xCF, 0xC0, 0xDA, 0xE0, 0xD1, 0x15, 0x86, 0x1A, 0x5D, 0x91, 0x2F, 0x2C, 0x75, 0x3E,
    0xF1, 0x64, 0xB3, 0xC7, 0xE4, 0x51, 0x8E, 0xFB, 0xF9, 0x6B, 0xD8, 0x63, 0xFE, 0xA2, 0x46, 0xA7, 0xE2, 0x4F, 0x4D, 0xCF,
    0xFA, 0x21, 0x79, 0x96, 0xC7, 0xAA, 0xD9, 0xE5, 0xDD, 0xD3, 0xE3, 0xE4, 0x59, 0x86, 0x74, 0xB9, 0x9F, 0x61, 0x6F, 0xC0,
    0x29, 0xA7, 0xA0, 0xE2, 0xF0, 0xB9, 0x2D, 0xD7, 0xD9, 0x96, 0x3F, 0x3E, 0xB7, 0xE5, 0x5A, 0x58, 0x5A, 0x3E, 0xDE, 0xA7,
    0x3D, 0x39, 0xFE, 0x82, 0xD9, 0x63, 0xA6, 0x92, 0xBF, 0x7C, 0x7C, 0xE9, 0x4C, 0x78, 0xDB, 0x62, 0xFA, 0x19, 0xF9, 0x47,
    0xCF, 0x7C, 0xB0, 0x9C, 0xB8, 0x16, 0xAE, 0xE3, 0x9B, 0x5C, 0x07, 0xE2, 0x23, 0xA4, 0xF0, 0x3B, 0x97, 0x39, 0xBD, 0xCE,
    0xCB, 0x36, 0x3E, 0x36, 0xC2, 0x0A, 0x16, 0xDA, 0x29, 0xC5, 0xCB, 0x5C, 0x5E, 0xD7, 0x65, 0x9D, 0x8F, 0x15, 0xA7, 0xEB,
    0x7D, 0xC1, 0x83, 0x99, 0x7C, 0x09, 0xED, 0xB8, 0xBC, 0x48, 0xF0, 0x0B, 0xC3, 0x7D, 0xD7, 0xBC, 0xEC, 0x11, 0x59, 0x73,
    0x3D, 0x23, 0xE9, 0x1F, 0xED, 0xC1, 0x14, 0xEA, 0xFC, 0x28, 0xB3, 0x3D, 0xFF, 0x4A, 0x4B, 0xB8, 0xA6, 0x8A, 0x17, 0xFF,
    0xF9, 0x16, 0xAC, 0xD1, 0x2D, 0x98, 0xF8, 0xFF, 0x6E, 0xC1, 0x1A, 0xD5, 0x02, 0x5E, 0x9B, 0xF6, 0x57, 0x47, 0xF6, 0x2D,
    0x8E, 0x81, 0xD5, 0x5A, 0xF2, 0x3A, 0xE5, 0xEF, 0x1D, 0x49, 0xE5, 0x7B, 0x52, 0x9D, 0x97, 0x8E, 0xD6, 0xD8, 0xDF, 0x48,
    0xD1, 0x46, 0x9C, 0x39, 0xDC, 0xF0, 0xFE, 0xD1, 0xC6, 0x5F, 0xC9, 0x5F, 0x34, 0x7E, 0x19, 0xCE, 0x1C, 0xCE, 0x36, 0x17,
    0xCE, 0x1C, 0xEA, 0xFC, 0x10, 0xA7, 0x5A, 0x07, 0x9F, 0x61, 0xDD, 0x68, 0x77, 0x2E, 0xF6, 0x13, 0xF0, 0x37, 0xBF, 0x7F,
    0xFC, 0x38, 0x9C, 0x38, 0x0C, 0x3E, 0x71, 0x64, 0xE1, 0x54, 0xB1, 0xC6, 0x21, 0x0D, 0x3E, 0x69, 0x6C, 0x97, 0x15, 0xC7,
    0x72, 0x65, 0xC5, 0x51, 0xF0, 0x3A, 0x38, 0xC2, 0xFE, 0x5E, 0x80, 0xB6, 0xF1, 0xB7, 0x46, 0x2F, 0x47, 0x5B, 0x59, 0x59,
    0x3C, 0x75, 0xA4, 0x51, 0x51, 0x31, 0xB9, 0x72, 0xFA, 0xD4, 0x8C, 0x58, 0x3F, 0xB2, 0x76, 0x68, 0x6D, 0x18, 0x3A, 0x35,
    0x58, 0x6B, 0x9F, 0xBF, 0xE7, 0x48, 0x37, 0xF1, 0x88, 0x6C, 0x83, 0x45, 0x1E, 0xF9, 0x17, 0x55, 0xBC, 0xCF, 0xFD, 0xD3,
    0xEF, 0x1A, 0xB5, 0xF6, 0x37, 0x26, 0x3E, 0xBF, 0xF1, 0x49, 0x7B, 0xB4, 0xFC, 0x9E, 0x3A, 0xBF, 0x95, 0xE3, 0x69, 0x65,
    0x78, 0x77, 0x9C, 0x83, 0xC8, 0x61, 0xF9, 0xFA, 0xB1, 0x42, 0x3D, 0x62, 0xBE, 0x28, 0xC4, 0x68, 0x5B, 0xA1, 0xF1, 0x14,
    0x42, 0x8F, 0x97, 0x2B, 0x7B, 0x2B, 0x34, 0x8E, 0x7C, 0x8E, 0xE6, 0x9A, 0x42, 0x9C, 0xAA, 0x2B, 0x55, 0xFD, 0xE9, 0x1C,
    0xBF, 0xB4, 0x42, 0xE5, 0xE4, 0x93, 0x76, 0x5E, 0x15, 0x8F, 0xEF, 0x09, 0xFB, 0xF7, 0x66, 0xFC, 0x93, 0xFE, 0x96, 0xCB,
    0xDF, 0x4A, 0xDF, 0xCD, 0xA5, 0xA1, 0x8F, 0xB2, 0xFA, 0xC7, 0x7B, 0xCA, 0x7D, 0xE9, 0x29, 0xF7, 0x5C, 0xBE, 0x88, 0xEC,
    0x7D, 0xBF, 0x00, 0xAD, 0x13, 0x3A, 0x8D, 0x09, 0x6A, 0x99, 0xA5, 0xF3, 0xFD, 0x7A, 0x8F, 0x1F, 0xAD, 0xD3, 0xCB, 0xB4,
    0x94, 0x9A, 0xA0, 0x1E, 0xAF, 0x69, 0x34, 0x5B, 0xA5, 0x57, 0xE9, 0xF4, 0x2A, 0x9A, 0xA5, 0xA5, 0x50, 0x31, 0x54, 0xE8,
    0x7F, 0x4E, 0x1A, 0x3A, 0x4F, 0x48, 0xED, 0x1B, 0xE9, 0x73, 0x84, 0xAD, 0xBB, 0x07, 0xBF, 0x4B, 0x4B, 0x8C, 0xEE, 0x50,
    0x3A, 0xCB, 0x5C, 0x75, 0xEF, 0xD0, 0x6D, 0x70, 0xE9, 0x3C, 0x17, 0xEC, 0xA4, 0x4E, 0x73, 0x6B, 0x99, 0xAD, 0x65, 0xFA,
    0xBB, 0x76, 0x9E, 0x6A, 0x09, 0xE9, 0xF3, 0x0C, 0xF7, 0xAB, 0x4E, 0xB7, 0x3F, 0xA8, 0xD2, 0xEB, 0xB4, 0xDF, 0xD6, 0x0D,
    0xB6, 0xD4, 0x2E, 0x3F, 0x43, 0xCB, 0x99, 0xBA, 0x9C, 0xD0, 0x67, 0x30, 0x96, 0xB9, 0xFA, 0xF9, 0xAC, 0xE7, 0x0F, 0xE6,
    0xE7, 0xAB, 0xF6, 0x49, 0x6D, 0x91, 0xEE, 0x5F, 0xC9, 0x60, 0x3B, 0xEC, 0xBA, 0x7D, 0xFA, 0x79, 0xC1, 0x41, 0x4B, 0xBB,
    0x5F, 0x41, 0x6D, 0x2D, 0xC8, 0x7E, 0xBF, 0x17, 0x15, 0x84, 0xF7, 0x37, 0xD7, 0xBC, 0x88, 0x15, 0x49, 0x2D, 0x20, 0xB9,
    0xA0, 0x9E, 0x8A, 0x97, 0xC6, 0x7A, 0xE2, 0x31, 0xCB, 0xB4, 0x52, 0xEB, 0x4D, 0x33, 0xB1, 0x29, 0x62, 0xF6, 0x4F, 0xDF,
    0x1A, 0xEE, 0x0B, 0x93, 0x58, 0x41, 0x72, 0x45, 0x03, 0x89, 0x06, 0x92, 0x0D, 0x53, 0x00, 0xD4, 0x55, 0x24, 0x57, 0x35,
    0x52, 0x60, 0x55, 0x6F, 0xBB, 0xB9, 0xB8, 0xBD, 0xDD, 0x4C, 0x26, 0x23, 0x6D, 0x91, 0x68, 0x24, 0xB5, 0x63, 0x6D, 0xAC,
    0xC3, 0x5C, 0x9F, 0x88, 0xF5, 0x45, 0x3A, 0xCC, 0x04, 0x95, 0xAC, 0x36, 0x77, 0xB4, 0xC5, 0xC2, 0x89, 0x8E, 0x65, 0x91,
    0x64, 0x4F, 0x24, 0x99, 0x6C, 0x8C, 0x24, 0x53, 0xA6, 0x85, 0x0C, 0xD1, 0x48, 0xB2, 0x11, 0xB5, 0x35, 0xA2, 0x9A, 0xC6,
    0x46, 0x32, 0x1A, 0x71, 0x83, 0xCB, 0x2A, 0xBE, 0x34, 0x52, 0x71, 0x63, 0xD8, 0xEA, 0x48, 0xC4, 0x22, 0x1D, 0xD5, 0xE1,
    0x78, 0xBC, 0x7A, 0x71, 0x7B, 0x2A, 0xD2, 0x87, 0x9A, 0xEB, 0x69, 0xC6, 0xF0, 0xF4, 0x78, 0x3C, 0x1A, 0x69, 0x0F, 0xA7,
    0x22, 0x31, 0x6B, 0x42, 0xDA, 0xA6, 0x31, 0xD2, 0x69, 0xB6, 0xEF, 0x68, 0x8F, 0x9A, 0x4B, 0xC3, 0xD1, 0x68, 0x5B, 0xB8,
    0x7D, 0x5B, 0xB2, 0x9E, 0x46, 0x9D, 0xAD, 0x54, 0x66, 0x56, 0x7B, 0xCC, 0x42, 0xCB, 0x52, 0xD5, 0x4B, 0x59, 0x0E, 0xA4,
    0x32, 0xB3, 0xBA, 0x12, 0xE1, 0x78, 0x77, 0xA4, 0x3D, 0x59, 0xBD, 0x34, 0x6C, 0xF5, 0x85, 0x51, 0xE1, 0xD8, 0x33, 0x64,
    0xC5, 0xA2, 0xB1, 0xC4, 0x8A, 0x48, 0x34, 0x65, 0x26, 0xCE, 0x9E, 0xBF, 0x26, 0x9C, 0x4A, 0x44, 0x06, 0xEA, 0x69, 0xCA,
    0xDF, 0xCD, 0x1F, 0x56, 0xD5, 0xC8, 0xD3, 0x4D, 0xD7, 0x87, 0x23, 0x16, 0xDA, 0x57, 0x72, 0x7A, 0xCE, 0x06, 0xB3, 0x1D,
    0x19, 0x85, 0x83, 0x19, 0xB1, 0x64, 0xF5, 0x92, 0x5E, 0xAB, 0x23, 0x6A, 0xD6, 0x53, 0x51, 0x66, 0x62, 0xC3, 0x92, 0x88,
    0xD5, 0xC1, 0xB5, 0x0F, 0xD5, 0xD1, 0x87, 0xA9, 0xAE, 0xC6, 0x64, 0x2D, 0xEF, 0x33, 0xB9, 0xF2, 0xD1, 0xC3, 0x33, 0xD6,
    0xC4, 0x78, 0xB8, 0x74, 0xDE, 0x94, 0xE1, 0x79, 0xEC, 0x24, 0x13, 0xD6, 0x59, 0x2B, 0x62, 0xED, 0xBD, 0xC9, 0xA5, 0xDD,
    0x61, 0xAB, 0xCB, 0x4C, 0x4F, 0x72, 0x66, 0x53, 0x06, 0x4D, 0x33, 0xBB, 0x34, 0x98, 0x78, 0x5E, 0x22, 0xD6, 0x1B, 0xAF,
    0xA7, 0x59, 0xA7, 0xE7, 0x34, 0x27, 0x4C, 0x73, 0x5D, 0x5B, 0xD2, 0x4C, 0xF4, 0x99, 0x09, 0x3C, 0xE5, 0xBC, 0x68, 0xAC,
    0x2D, 0x1C, 0x6D, 0x0C, 0xEF, 0x88, 0xF5, 0xA6, 0x86, 0x1E, 0x53, 0xF6, 0xF7, 0xCB, 0xD5, 0x53, 0xCD, 0x70, 0x83, 0x70,
    0xA6, 0xBF, 0x56, 0x0F, 0xF3, 0xDE, 0x35, 0x61, 0x2B, 0xDC, 0xC5, 0x45, 0x6A, 0xFF, 0xE1, 0x22, 0xEC, 0xF0, 0x0D, 0x56,
    0x67, 0xEC, 0xB4, 0xF6, 0x9F, 0xA3, 0x4C, 0x7A, 0x91, 0xD4, 0xD3, 0xF4, 0xE1, 0xE5, 0x22, 0x56, 0xBC, 0x37, 0xD5, 0x63,
    0xA6, 0xBA, 0x63, 0x1D, 0xD5, 0x4B, 0xC2, 0x49, 0x54, 0x8E, 0x7B, 0xF8, 0xA5, 0x85, 0xE9, 0x55, 0x5E, 0x3B, 0xF1, 0xEC,
    0xF6, 0xCB, 0x3B, 0x22, 0xA9, 0x58, 0xC2, 0x6E, 0xCE, 0xD4, 0xB3, 0x9B, 0x9D, 0x56, 0x65, 0xD5, 0x39, 0x6C, 0xD7, 0x28,
    0x7D, 0x70, 0x74, 0x16, 0x36, 0xB6, 0xC7, 0x7A, 0xAA, 0x13, 0x3D, 0xC9, 0x68, 0xF5, 0x56, 0x04, 0x80, 0xEA, 0xD3, 0xC2,
    0xC6, 0x84, 0xBF, 0x1B, 0x17, 0xEA, 0x69, 0xC5, 0x39, 0x2B, 0x38, 0x4B, 0xE4, 0x98, 0x30, 0x7C, 0x66, 0xE7, 0xFE, 0xAB,
    0xF5, 0xD4, 0x53, 0xF9, 0xB9, 0x8A, 0xD6, 0xD3, 0xB8, 0xC6, 0x8E, 0x70, 0xB4, 0x2F, 0xB2, 0xAD, 0x3A, 0x6C, 0x59, 0xB1,
    0x94, 0x8A, 0x19, 0xD5, 0xCB, 0xAD, 0xF6, 0x68, 0x2C, 0x19, 0xB1, 0xBA, 0x96, 0x46, 0xC3, 0x49, 0x15, 0x0C, 0x4E, 0xB7,
    0x69, 0xC0, 0xC0, 0x26, 0x74, 0x7E, 0xF9, 0x19, 0xF2, 0xD7, 0x98, 0x3D, 0x6D, 0xDA, 0xC0, 0x84, 0x49, 0xE0, 0x0C, 0x26,
    0x4D, 0x91, 0x2E, 0x2B, 0x9C, 0xEA, 0x4D, 0x98, 0xBC, 0x60, 0x38, 0x06, 0x57, 0x47, 0xB1, 0xB6, 0xAA, 0xB1, 0xC2, 0x12,
    0x4D, 0xE6, 0xF6, 0x5E, 0xD3, 0x6A, 0x47, 0x4E, 0x41, 0x66, 0x8E, 0xFD, 0xB8, 0x71, 0x19, 0x49, 0x0D, 0xD1, 0xA8, 0xD9,
    0x15, 0x8E, 0xDA, 0xD3, 0xB0, 0x7C, 0xA0, 0xDD, 0x8C, 0xDB, 0x93, 0x3D, 0xE1, 0x0C, 0x36, 0x89, 0xAE, 0xDE, 0x1E, 0xF4,
    0x3D, 0xC3, 0xAA, 0x30, 0xD3, 0x0A, 0x41, 0xB1, 0xCB, 0x1E, 0xB4, 0xA1, 0xC4, 0xB5, 0xB1, 0xA6, 0xDE, 0xF6, 0x6E, 0xDB,
    0x33, 0x32, 0xCA, 0xF9, 0x33, 0x4C, 0xD6, 0xB5, 0x6D, 0x55, 0x31, 0x29, 0x90, 0x91, 0xD6, 0x64, 0xB6, 0xF7, 0x26, 0xE0,
    0x10, 0x67, 0x29, 0xD2, 0x84, 0x18, 0x68, 0x75, 0xB1, 0x47, 0x0E, 0xA5, 0x25, 0xCC, 0xCE, 0x28, 0xEA, 0x41, 0x33, 0xFA,
    0x62, 0x76, 0xE8, 0x6E, 0x0E, 0x27, 0xBA, 0xCC, 0xCC, 0xD6, 0x8E, 0x3E, 0x83, 0xB9, 0xDD, 0xB4, 0x7A, 0x1A, 0x61, 0xE7,
    0xF5, 0xA6, 0x22, 0xD1, 0xEA, 0xC5, 0x89, 0x44, 0x78, 0x07, 0x3B, 0x41, 0x3D, 0xE5, 0x67, 0x24, 0x73, 0x0A, 0xF9, 0x4E,
    0x49, 0xC0, 0x3B, 0x6E, 0xF3, 0xE6, 0xF5, 0xCB, 0xC9, 0x9B, 0xE9, 0x73, 0x24, 0x36, 0x91, 0xDC, 0xD4, 0x40, 0xCE, 0x4D,
    0x0D, 0xF8, 0x81, 0xBA, 0x8A, 0x5C, 0x9B, 0x56, 0x35, 0xAC, 0x58, 0xB1, 0x8A, 0x1C, 0x90, 0x0D, 0x7C, 0xE5, 0x1D, 0x6D,
    0xD3, 0xAA, 0x16, 0x64, 0xB2, 0xC2, 0xBB, 0xDA, 0x26, 0x95, 0xD4, 0xD8, 0x82, 0xDC, 0xC6, 0x16, 0xEC, 0x79, 0x9B, 0x5A,
    0x50, 0xAA, 0x45, 0xD5, 0x20, 0x5A, 0xC8, 0x68, 0xE1, 0x72, 0xB8, 0x34, 0xB2, 0xDA, 0x48, 0xCE, 0x96, 0x55, 0xAC, 0x3B,
    0x20, 0xB0, 0x4F, 0xB6, 0x70, 0x2A, 0xF6, 0x47, 0x57, 0x4B, 0xA3, 0x4A, 0x76, 0xB2, 0x44, 0x7A, 0x2B, 0x36, 0xE5, 0xD6,
    0x06, 0xF2, 0xB7, 0x9E, 0xEE, 0x05, 0x85, 0xAD, 0x67, 0x98, 0x04, 0x8F, 0x1D, 0x90, 0x26, 0x84, 0x42, 0xA1, 0x41, 0xBD,
    0x26, 0x43, 0xAF, 0xCD, 0xD0, 0xEB, 0x32, 0xF4, 0x19, 0x19, 0xFA, 0xCC, 0x0C, 0x7D, 0x56, 0x86, 0x3E, 0x3B, 0x43, 0x9F,
    0x03, 0x3D, 0xC7, 0xD6, 0x57, 0x44, 0xC3, 0x5D, 0x49, 0xCA, 0x1D, 0x16, 0x09, 0xA9, 0x28, 0x7C, 0x86, 0x88, 0x4B, 0xAE,
    0xB0, 0x0A, 0x45, 0x5C, 0x92, 0x65, 0x63, 0xB8, 0xCD, 0x8C, 0x52, 0x56, 0x58, 0xEF, 0xEB, 0x34, 0x2A, 0xDC, 0xD1, 0x71,
    0xE6, 0xF8, 0x4F, 0xD9, 0x61, 0xED, 0xBC, 0x49, 0x12, 0x6D, 0x54, 0xC0, 0xBB, 0xFE, 0x92, 0xDE, 0x54, 0x2A, 0x66, 0xAD,
    0x4F, 0xE0, 0x31, 0x66, 0x07, 0xB9, 0xDA, 0x62, 0xB8, 0xED, 0x81, 0x54, 0xBB, 0x21, 0xB9, 0xDA, 0xD5, 0x46, 0x4E, 0xEE,
    0x76, 0xB5, 0x5F, 0x75, 0x90, 0x13, 0x07, 0x86, 0x70, 0x82, 0x72, 0xDA, 0x39, 0x46, 0xC5, 0xB0, 0xBD, 0x2E, 0x4E, 0xF1,
    0xCD, 0xE0, 0x96, 0x4C, 0x79, 0xEA, 0xA6, 0x39, 0x11, 0xB6, 0x92, 0x9D, 0xB1, 0x44, 0x0F, 0xE5, 0xF2, 0x71, 0x01, 0xFB,
    0x70, 0x52, 0x59, 0xA3, 0x22, 0xFB, 0xD4, 0x80, 0x8A, 0x62, 0xBD, 0xB8, 0x1F, 0xD3, 0x9E, 0x30, 0xC3, 0xA9, 0xD3, 0xE3,
    0x1F, 0xC7, 0x65, 0x72, 0x74, 0x44, 0x3A, 0x3B, 0x49, 0x98, 0xE4, 0x34, 0x79, 0x43, 0xA5, 0x60, 0x27, 0x76, 0xE3, 0x33,
    0x9A, 0x26, 0x97, 0xEC, 0x68, 0xE6, 0x5A, 0xB3, 0xD9, 0x42, 0x6D, 0xB0, 0xE4, 0xEC, 0x54, 0xC2, 0xDB, 0x39, 0xB4, 0xDD,
    0x76, 0x50, 0x8E, 0xBA, 0xE3, 0x90, 0xD5, 0xD0, 0x41, 0x63, 0xB0, 0x2E, 0x86, 0xD5, 0xB6, 0x22, 0x23, 0xB3, 0xF4, 0xD4,
    0xCC, 0x61, 0xA7, 0xB5, 0x6C, 0x95, 0xAB, 0x66, 0x61, 0x04, 0xAB, 0x43, 0x27, 0x25, 0x7D, 0x2A, 0xA2, 0x5C, 0x24, 0x73,
    0x08, 0xC2, 0xB4, 0x98, 0x09, 0xBC, 0x20, 0xF1, 0x2D, 0x7B, 0x1C, 0x79, 0x58, 0xD3, 0x46, 0x5E, 0x5E, 0x99, 0xDC, 0xB5,
    0xE6, 0x48, 0x8F, 0xA9, 0x2A, 0x5D, 0x69, 0x46, 0xBA, 0xBA, 0x53, 0x54, 0x08, 0x55, 0xED, 0x26, 0x99, 0x4D, 0xE2, 0xC4,
    0x46, 0xBD, 0xAA, 0xD7, 0x59, 0x4D, 0x18, 0x39, 0xD3, 0x52, 0x85, 0xEC, 0xD5, 0x4B, 0xF9, 0x50, 0xD5, 0x28, 0x23, 0x60,
    0xAA, 0xC1, 0xF5, 0x0E, 0x25, 0xA0, 0xB8, 0x1B, 0x77, 0x1B, 0xC2, 0xFD, 0x17, 0xA4, 0x95, 0xCD, 0x94, 0xC3, 0x4A, 0x2C,
    0x96, 0xE2, 0xFA, 0xC9, 0x87, 0x9B, 0xA6, 0x1D, 0x70, 0x94, 0x9E, 0x26, 0xAC, 0xDE, 0x48, 0xBB, 0x49, 0x79, 0x48, 0xD9,
    0x68, 0x45, 0x78, 0xAA, 0xB9, 0x27, 0xEA, 0xF9, 0xA7, 0x9E, 0x18, 0x54, 0x3F, 0x37, 0x45, 0x06, 0x3D, 0x96, 0xCB, 0x7C,
    0x1C, 0x73, 0x10, 0xEB, 0x6F, 0x8E, 0x6D, 0x43, 0xF3, 0x4A, 0x07, 0xEF, 0x95, 0x51, 0xD4, 0xC4, 0xE6, 0x12, 0x8F, 0x86,
    0x77, 0xAC, 0x48, 0x84, 0xD1, 0x63, 0x07, 0x72, 0x2F, 0x50, 0xD7, 0xCD, 0x24, 0xBA, 0x29, 0x1F, 0xB3, 0x04, 0xAF, 0xC3,
    0x68, 0xAE, 0x0F, 0xF7, 0xB2, 0x3B, 0xFA, 0x06, 0x13, 0x36, 0x98, 0x49, 0x38, 0xEE, 0x60, 0xCA, 0x92, 0x41, 0xCF, 0xA5,
    0x5C, 0x3B, 0x05, 0x9B, 0xD7, 0xB2, 0x58, 0x3F, 0x16, 0xC5, 0xE0, 0xED, 0xC6, 0x38, 0x15, 0x0D, 0xDE, 0xA8, 0x8D, 0x6D,
    0x65, 0xA4, 0xA3, 0x03, 0x6D, 0xD2, 0x8F, 0x59, 0x13, 0xC3, 0x33, 0x54, 0x99, 0x61, 0x09, 0x89, 0x70, 0x57, 0xBA, 0x4E,
    0x95, 0x80, 0x6A, 0x74, 0x9D, 0xEA, 0x38, 0x49, 0x85, 0xFA, 0xC6, 0x4C, 0xB0, 0x7F, 0x6B, 0x27, 0xC8, 0xEA, 0x0E, 0x27,
    0x6D, 0xB7, 0x2B, 0xE9, 0x86, 0x83, 0x34, 0xC5, 0x3A, 0xF5, 0xF4, 0x25, 0x62, 0x3D, 0x76, 0xF7, 0x61, 0x82, 0xD2, 0xCA,
    0x49, 0x1D, 0xDD, 0x31, 0x84, 0x50, 0x11, 0x21, 0x0F, 0x66, 0x7D, 0x9D, 0x8A, 0xCA, 0x49, 0x32, 0x22, 0x3D, 0x3D, 0x94,
    0xCF, 0xEF, 0x17, 0x91, 0x70, 0x74, 0x69, 0x38, 0x9E, 0x5C, 0x83, 0x61, 0xA7, 0x5C, 0x9D, 0xD0, 0x64, 0x46, 0x97, 0x5B,
    0x1D, 0x83, 0xF9, 0xB8, 0x6D, 0x4A, 0x85, 0x13, 0xF0, 0x77, 0x75, 0xFC, 0x68, 0xDE, 0x11, 0x37, 0xC9, 0xAB, 0xD4, 0x0B,
    0xED, 0xA3, 0x08, 0x65, 0xE1, 0x61, 0x9B, 0xC2, 0xD1, 0x5E, 0x2C, 0xE1, 0x08, 0xB6, 0x82, 0x6D, 0x26, 0x1E, 0x96, 0x6C,
    0xB0, 0x92, 0xA9, 0x30, 0xB6, 0x43, 0xE4, 0x26, 0xD7, 0xC5, 0xC3, 0xD8, 0x1B, 0x69, 0x54, 0x24, 0xD9, 0x1C, 0xC3, 0xDE,
    0xB4, 0x7C, 0x20, 0x8E, 0x65, 0xAB, 0x5C, 0x6B, 0xB9, 0x15, 0xC6, 0x3C, 0x75, 0xA0, 0xEE, 0xA4, 0x9E, 0x33, 0x72, 0x6F,
    0x33, 0x77, 0x2C, 0xE5, 0xF6, 0x94, 0x6C, 0x3B, 0xCB, 0x5B, 0x4A, 0x6E, 0x3A, 0xA3, 0xA9, 0x9B, 0x47, 0xD4, 0x19, 0x55,
    0x41, 0x29, 0x17, 0x33, 0x6D, 0x26, 0xB8, 0x79, 0x6B, 0x71, 0x5E, 0x20, 0x47, 0xD4, 0xEC, 0x4C, 0x91, 0x2B, 0x6A, 0x5A,
    0x5D, 0xA9, 0x6E, 0x72, 0xE9, 0xA6, 0x0A, 0x8B, 0x1C, 0x16, 0x7B, 0x83, 0xDB, 0x32, 0xFB, 0xD7, 0xB2, 0x92, 0x65, 0xA5,
    0x23, 0x80, 0xD7, 0xCA, 0x5C, 0x75, 0xAE, 0x58, 0x1B, 0x87, 0x12, 0x72, 0xC4, 0xA2, 0x1D, 0xDD, 0xEA, 0xDA, 0x4F, 0x05,
    0x31, 0x2B, 0xFD, 0x46, 0xB3, 0x54, 0x85, 0x12, 0xAC, 0x93, 0xA1, 0xA4, 0x65, 0x66, 0x32, 0x95, 0x88, 0xED, 0x60, 0xC7,
    0x19, 0x4A, 0xD4, 0xCE, 0x95, 0x51, 0x32, 0xED, 0x5D, 0x63, 0x86, 0x92, 0x9A, 0xC2, 0x7D, 0x66, 0x7A, 0xBC, 0x30, 0xD6,
    0x29, 0x33, 0xD3, 0x5E, 0x0D, 0xFE, 0xF0, 0x2A, 0x9A, 0x52, 0xB1, 0x78, 0x1C, 0x49, 0x25, 0x08, 0x01, 0xAA, 0x1D, 0xA7,
    0x1C, 0x1C, 0xD1, 0x78, 0x0B, 0xBE, 0xD5, 0x4F, 0xB9, 0xB1, 0xCC, 0x37, 0x00, 0xCA, 0x8B, 0x0D, 0x0B, 0xD5, 0xE4, 0x8D,
    0x59, 0x2B, 0x63, 0x58, 0x58, 0x2A, 0x2C, 0x50, 0x76, 0xCC, 0x4A, 0x3B, 0x76, 0xAE, 0x52, 0xD7, 0xF4, 0x46, 0x53, 0x91,
    0x38, 0x4F, 0x89, 0xBA, 0x85, 0x73, 0x66, 0xF1, 0x0E, 0xA0, 0x8A, 0xC2, 0xA2, 0x29, 0x72, 0xB1, 0x99, 0x8E, 0x75, 0xA8,
    0xC9, 0x9E, 0x5A, 0x55, 0x93, 0x2B, 0x66, 0x4F, 0xB8, 0xDB, 0x96, 0x17, 0xA2, 0x5C, 0x2F, 0x82, 0x77, 0x0A, 0xB1, 0xC9,
    0x19, 0x57, 0x8E, 0xED, 0x89, 0x87, 0x13, 0xB0, 0x54, 0xC1, 0x20, 0x37, 0x3E, 0xCC, 0xBD, 0x9D, 0x71, 0x15, 0xBC, 0x03,
    0xF1, 0x58, 0xBC, 0x37, 0x7A, 0xD6, 0x70, 0x2D, 0x12, 0xE4, 0x4E, 0xD8, 0xEF, 0x94, 0x34, 0x2E, 0x61, 0x76, 0xB1, 0x6F,
    0x24, 0xCE, 0xFE, 0xBA, 0x49, 0xA5, 0x09, 0xB3, 0x07, 0x5D, 0xB5, 0xBB, 0xBF, 0xCE, 0x3A, 0x65, 0xAF, 0x72, 0x26, 0x54,
    0x24, 0x34, 0x92, 0x66, 0x8A, 0xF2, 0x92, 0x1C, 0x33, 0x07, 0x5F, 0xF6, 0xC8, 0x8B, 0x7B, 0x35, 0x88, 0xEC, 0xA9, 0x54,
    0x92, 0x79, 0xD7, 0x60, 0x77, 0x5A, 0xAD, 0x1E, 0x2E, 0x96, 0x71, 0x26, 0x57, 0xC5, 0x1A, 0xD3, 0x1E, 0x49, 0x23, 0x71,
    0x77, 0xC6, 0xB7, 0x31, 0x1A, 0x91, 0x4C, 0x87, 0xC2, 0x8D, 0x91, 0x8C, 0xD8, 0x36, 0xE6, 0x8C, 0xC9, 0x7C, 0x18, 0x0E,
    0x63, 0x13, 0x4C, 0xDA, 0xC1, 0x51, 0x39, 0x70, 0x6E, 0x72, 0x58, 0x50, 0xF4, 0xA4, 0x6F, 0xA3, 0x76, 0x9B, 0x3E, 0x1E,
    0x89, 0x46, 0xD7, 0xC6, 0x52, 0xCA, 0x1D, 0xBC, 0x49, 0x2C, 0x98, 0x74, 0x80, 0x42, 0x41, 0xDC, 0x0D, 0x46, 0x0F, 0x18,
    0xB3, 0xA3, 0xD9, 0xED, 0xC2, 0x51, 0x0F, 0xD9, 0xF0, 0xB2, 0xA1, 0xDB, 0x91, 0x49, 0xBB, 0x35, 0x0D, 0x43, 0xCF, 0xD2,
    0x3D, 0x75, 0xA8, 0xED, 0xC5, 0x91, 0xEA, 0x8E, 0x24, 0xC9, 0xC5, 0xD7, 0x09, 0x21, 0x2D, 0x6B, 0x90, 0xCA, 0x9B, 0x8D,
    0x81, 0x9A, 0xA0, 0xF2, 0x40, 0x64, 0xF5, 0xA6, 0x3A, 0xE7, 0xA8, 0x08, 0x2F, 0xFA, 0xC8, 0xD9, 0xA7, 0xA2, 0x86, 0x5B,
    0x89, 0x75, 0x9D, 0xE4, 0xE0, 0xB7, 0x1C, 0xCA, 0xE7, 0x6B, 0xA6, 0x73, 0x65, 0x73, 0x42, 0x73, 0x6C, 0x63, 0xD2, 0x24,
    0x5F, 0xDF, 0x69, 0x7B, 0x42, 0x5F, 0x24, 0x91, 0xEA, 0x0D, 0x47, 0xF5, 0xBE, 0xE5, 0xE9, 0x1B, 0x1A, 0x0A, 0xD1, 0x4F,
    0x62, 0x80, 0xE4, 0x40, 0x08, 0xD4, 0x80, 0x5A, 0x50, 0x07, 0x66, 0x90, 0xD8, 0x41, 0xDF, 0x72, 0x48, 0xBA, 0x56, 0xBA,
    0xF3, 0x5A, 0xAA, 0xE8, 0x7E, 0x87, 0xD8, 0x27, 0xDD, 0x01, 0x99, 0xF3, 0x8C, 0x1C, 0x08, 0x6C, 0x35, 0xE8, 0x69, 0x31,
    0xF2, 0x95, 0xD5, 0xF4, 0x63, 0x87, 0xFC, 0xB4, 0x44, 0x7A, 0x1E, 0xFD, 0xCC, 0x21, 0xAE, 0x12, 0xEE, 0xC0, 0x4F, 0xE5,
    0xC5, 0x81, 0x13, 0x06, 0x7D, 0x4E, 0x4C, 0xAD, 0xBA, 0xD6, 0x49, 0x74, 0xD8, 0x61, 0xEC, 0x93, 0x89, 0x3E, 0x77, 0xDE,
    0x8F, 0xCA, 0xE8, 0x4D, 0x29, 0x08, 0x55, 0xCD, 0xA3, 0x93, 0x92, 0xDC, 0x95, 0xAD, 0x86, 0x3C, 0x26, 0x72, 0xAF, 0x34,
    0xC4, 0xEB, 0xA2, 0x70, 0xFA, 0xC0, 0x3B, 0x06, 0x7D, 0x5A, 0xC8, 0xAD, 0xF3, 0x44, 0x41, 0x41, 0x64, 0x9E, 0x4C, 0x06,
    0x9C, 0x34, 0x4F, 0xE4, 0xB8, 0x50, 0x5E, 0xDA, 0x0D, 0x90, 0xB3, 0x36, 0xCB, 0xD5, 0xFD, 0x55, 0xF4, 0x2B, 0x29, 0x0E,
    0xF0, 0xD3, 0x4E, 0x95, 0xAF, 0xA0, 0xCA, 0xBC, 0x7B, 0xE9, 0x35, 0x5B, 0xCC, 0x33, 0x2E, 0x13, 0xAF, 0x89, 0xFB, 0x84,
    0xBB, 0x52, 0x3E, 0x43, 0xF5, 0x72, 0x8F, 0xEC, 0x97, 0x87, 0x44, 0xFF, 0x80, 0x7C, 0xE1, 0x92, 0x97, 0xF6, 0x08, 0xE9,
    0xF4, 0x2C, 0xAE, 0x9A, 0x37, 0x7D, 0xDE, 0xBC, 0x05, 0xAD, 0x06, 0xED, 0xF4, 0x5C, 0x6A, 0x88, 0x5D, 0x62, 0xE6, 0xBC,
    0x3B, 0xCB, 0x0D, 0xE3, 0xA7, 0x22, 0x24, 0x4A, 0x46, 0x84, 0xC6, 0x1A, 0xF2, 0x71, 0x21, 0x45, 0x41, 0x89, 0x53, 0xCA,
    0xF3, 0xD1, 0x12, 0xA7, 0x70, 0x1A, 0x2E, 0x8F, 0x9C, 0x76, 0x87, 0xD3, 0xE3, 0x22, 0x97, 0x70, 0x49, 0x97, 0x31, 0x75,
    0xAA, 0xEC, 0xAB, 0x74, 0xCA, 0xA9, 0x32, 0x59, 0x49, 0xB3, 0xED, 0x16, 0xCC, 0x96, 0x07, 0xE4, 0x8D, 0x4A, 0x71, 0xB0,
    0x72, 0x93, 0xBC, 0x79, 0x78, 0xEA, 0xA0, 0xE2, 0x4C, 0x67, 0x1F, 0xE4, 0xDB, 0x83, 0xDC, 0xE2, 0xAB, 0x4A, 0xA9, 0x0F,
    0x62, 0x35, 0x1D, 0x33, 0xE4, 0x7E, 0x79, 0x0B, 0xA7, 0xBF, 0xE1, 0x40, 0x02, 0xED, 0xE1, 0x11, 0xA3, 0x57, 0x0D, 0xBE,
    0xEE, 0x73, 0xC8, 0xD4, 0xC5, 0x90, 0x9F, 0x77, 0x88, 0x14, 0xC4, 0xBB, 0x06, 0x0B, 0x94, 0xBC, 0x55, 0xDD, 0x7F, 0xB6,
    0x94, 0xF6, 0x68, 0x83, 0x9B, 0x6C, 0x83, 0xCB, 0x6C, 0x71, 0xB3, 0x21, 0x8E, 0x60, 0x5E, 0x56, 0xAF, 0xAE, 0x6A, 0x59,
    0xDD, 0xD2, 0x4A, 0x3B, 0xC5, 0x25, 0xAA, 0xD4, 0x83, 0x86, 0xBC, 0x5A, 0xDE, 0x2D, 0x50, 0x70, 0x4C, 0x15, 0xFD, 0x41,
    0x88, 0xDD, 0x3C, 0x58, 0x23, 0x3F, 0x94, 0xDB, 0x02, 0xAB, 0x8D, 0xAC, 0x84, 0x6C, 0x34, 0x5C, 0x57, 0x4A, 0x43, 0xE6,
    0x74, 0x8B, 0xC2, 0x7C, 0xD9, 0x1F, 0xC0, 0x35, 0xC8, 0xDA, 0x40, 0x80, 0xFE, 0x43, 0xCA, 0x47, 0xD8, 0x3A, 0xB0, 0x5B,
    0xFA, 0x03, 0x32, 0x1E, 0x90, 0xF9, 0xF5, 0xB2, 0xF7, 0x8E, 0x2D, 0x72, 0xC7, 0x2A, 0x7A, 0x5C, 0x1A, 0x8F, 0x88, 0xCB,
    0x55, 0xA6, 0xCC, 0xFD, 0x8C, 0xEC, 0x0B, 0xDC, 0xD0, 0xBA, 0x75, 0x37, 0x7C, 0x41, 0xCA, 0x16, 0xFA, 0x81, 0x2E, 0x96,
    0xB7, 0x3B, 0x58, 0x7A, 0x03, 0xDD, 0x63, 0x38, 0x2F, 0x7D, 0x42, 0x5C, 0x25, 0x4F, 0x88, 0x1D, 0x68, 0xE2, 0xD7, 0x0C,
    0xC7, 0x0D, 0xF2, 0x4E, 0xF1, 0x73, 0xF1, 0x2C, 0xF2, 0xE7, 0xEF, 0x6E, 0xA1, 0xFD, 0xC2, 0x36, 0x95, 0x8F, 0x53, 0x40,
    0x3E, 0xB8, 0x13, 0x4D, 0xCA, 0xE6, 0x26, 0xB9, 0xB9, 0x49, 0x3F, 0xA2, 0xCD, 0x72, 0x51, 0x25, 0x1A, 0x13, 0xB2, 0xF1,
    0x35, 0x1A, 0x39, 0x4F, 0x0A, 0x39, 0x7F, 0x9E, 0xE1, 0x3D, 0x2A, 0x66, 0xCD, 0x17, 0xC2, 0xF0, 0xDC, 0x2F, 0x64, 0x95,
    0x28, 0xCD, 0x5D, 0xE8, 0xF4, 0x38, 0xBD, 0x35, 0xCE, 0x9C, 0xAD, 0x2E, 0xCF, 0x74, 0x51, 0x58, 0x2C, 0x2F, 0xA9, 0x9F,
    0xE7, 0xF2, 0xCE, 0x17, 0x81, 0x11, 0x9C, 0x3E, 0x3C, 0x51, 0xAE, 0x10, 0x81, 0x3C, 0x7A, 0xC2, 0x10, 0xD7, 0x63, 0xEC,
    0x83, 0x86, 0xB8, 0x42, 0x86, 0x84, 0xBF, 0x58, 0x7A, 0x2B, 0x65, 0x4F, 0xA0, 0xCC, 0xA0, 0xCF, 0x88, 0xAA, 0xB1, 0x4E,
    0x52, 0xCA, 0xB4, 0xF1, 0x4E, 0x7A, 0x39, 0x34, 0x95, 0x1E, 0x35, 0xC4, 0x53, 0x68, 0x22, 0xFD, 0xD1, 0x10, 0xFD, 0xEE,
    0xBC, 0x48, 0x29, 0x5D, 0x29, 0xC5, 0x67, 0x51, 0xF8, 0x11, 0x83, 0x1E, 0x10, 0x81, 0xE9, 0x5B, 0x57, 0x0F, 0x5C, 0x34,
    0x6A, 0x37, 0xC9, 0x72, 0x71, 0xB5, 0x1C, 0x19, 0x94, 0xE3, 0xA4, 0xE5, 0xF0, 0x3F, 0x29, 0x4A, 0x72, 0xE5, 0x04, 0x24,
    0x94, 0xBA, 0x4B, 0x44, 0xC9, 0xA2, 0x92, 0xEC, 0x92, 0x65, 0x25, 0xB2, 0x64, 0x6A, 0x89, 0xC3, 0xB6, 0x2A, 0x53, 0x56,
    0x12, 0x56, 0xE7, 0x0D, 0xDA, 0xE7, 0xC9, 0xF1, 0x6C, 0x2F, 0x46, 0x8E, 0xB5, 0x15, 0x39, 0x32, 0x30, 0xB2, 0x8C, 0xA4,
    0x70, 0x78, 0xF6, 0x06, 0x85, 0x7F, 0xC2, 0xA7, 0x76, 0x39, 0xEE, 0x28, 0x9D, 0x28, 0x1E, 0x29, 0x15, 0xE2, 0x8E, 0x80,
    0x10, 0x0F, 0x81, 0xEF, 0x8D, 0x45, 0xB6, 0xF0, 0x4A, 0xB1, 0x37, 0x38, 0x65, 0xD7, 0x2E, 0xC7, 0x9E, 0xB2, 0xA9, 0xE2,
    0x1B, 0x65, 0x64, 0xB8, 0x28, 0x8F, 0x4B, 0x08, 0xFF, 0x34, 0x94, 0x39, 0x1E, 0x14, 0x7B, 0x82, 0xB7, 0x95, 0xE3, 0xF2,
    0x00, 0x5F, 0x0E, 0x95, 0x0B, 0x79, 0x04, 0xEC, 0x1D, 0x47, 0xAE, 0x92, 0x31, 0x05, 0x7E, 0xF8, 0xBE, 0xDF, 0xFE, 0x57,
    0x03, 0xE3, 0x07, 0xC6, 0xC1, 0xE4, 0x8A, 0x49, 0xB8, 0x1C, 0xE4, 0xCB, 0xBD, 0x7C, 0x39, 0xC4, 0x97, 0xA3, 0x7C, 0xD9,
    0x33, 0xD9, 0x71, 0x99, 0x24, 0x01, 0x58, 0xBA, 0xB5, 0xFE, 0x8F, 0x50, 0x04, 0x3C, 0x60, 0x8E, 0xB8, 0x63, 0xB2, 0x10,
    0xCF, 0x81, 0xE3, 0x93, 0x31, 0xF0, 0x15, 0x23, 0xC4, 0xC1, 0x0A, 0x21, 0xEE, 0x05, 0x2F, 0x80, 0xA3, 0x60, 0xD7, 0x14,
    0x21, 0xBE, 0x0D, 0x5E, 0x02, 0x27, 0xC1, 0x9E, 0xA9, 0x42, 0x1C, 0x04, 0x27, 0xC1, 0x5D, 0xD3, 0x84, 0x38, 0x0C, 0x1E,
    0xAA, 0x82, 0xCD, 0x74, 0xA4, 0x57, 0x0B, 0xC7, 0x0B, 0xE0, 0x68, 0xB5, 0x10, 0xB7, 0x85, 0x9C, 0xE2, 0xC8, 0x0C, 0xD8,
    0xCD, 0x94, 0x62, 0xCF, 0x2C, 0x29, 0xBE, 0x31, 0x4B, 0x7F, 0x5F, 0xCE, 0xFC, 0x5D, 0x01, 0xCB, 0xF4, 0xDF, 0xEA, 0xF0,
    0x77, 0xE8, 0xF4, 0xDF, 0xEB, 0xF0, 0xF7, 0xE9, 0xF4, 0xDF, 0xEC, 0xA4, 0x7F, 0xD7, 0xC9, 0x7F, 0xB7, 0xC3, 0xDF, 0xA6,
    0xD3, 0x7F, 0xBB, 0xE3, 0xA2, 0xA1, 0xBF, 0xDF, 0x31, 0x7C, 0x76, 0x1E, 0xFF, 0x2E, 0x42, 0x04, 0xED, 0xDF, 0xF1, 0x4C,
    0xC8, 0x83, 0x4D, 0xD0, 0xB6, 0xE1, 0xFF, 0xC7, 0x26, 0x7C, 0xF6, 0xEF, 0x76, 0xF8, 0xFF, 0xAE, 0xC9, 0xA0, 0xFD, 0x5C,
    0xFE, 0x7B, 0x1F, 0x43, 0xDB, 0xF3, 0xFF, 0x1F, 0x73, 0x04, 0xED, 0xDF, 0x31, 0xF0, 0xFF, 0x33, 0x23, 0x5D, 0x56, 0xFD,
    0xFF, 0x37, 0x9F, 0xDD, 0x56, 0xFE, 0xDB, 0xA2, 0xFF, 0x03, 0xD1, 0x8B, 0xDD, 0x9F, 0x94, 0x34, 0x00, 0x00 };

//==============================================================================
#if JUCE_PUSH_NOTIFICATIONS && JUCE_MODULE_AVAILABLE_juce_gui_extra
 extern bool juce_handleNotificationIntent (void*);
 extern void juce_firebaseDeviceNotificationsTokenRefreshed (void*);
 extern void juce_firebaseRemoteNotificationReceived (void*);
 extern void juce_firebaseRemoteMessagesDeleted();
 extern void juce_firebaseRemoteMessageSent(void*);
 extern void juce_firebaseRemoteMessageSendError (void*, void*);
#endif

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create, "<init>", "(II)V")

DECLARE_JNI_CLASS (AndroidLayoutParams, "android/view/ViewGroup$LayoutParams")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (addView,          "addView",             "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V") \
 METHOD (removeView,       "removeView",          "(Landroid/view/View;)V") \
 METHOD (updateViewLayout, "updateViewLayout",    "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V")

DECLARE_JNI_CLASS (AndroidViewManager, "android/view/ViewManager")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,           "<init>",             "(IIIIIII)V") \
 FIELD  (gravity,          "gravity",            "I") \
 FIELD  (windowAnimations, "windowAnimations",   "I")

DECLARE_JNI_CLASS (AndroidWindowManagerLayoutParams, "android/view/WindowManager$LayoutParams")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getDisplayCutout,     "getDisplayCutout", "()Landroid/view/DisplayCutout;")

 DECLARE_JNI_CLASS_WITH_MIN_SDK (AndroidWindowInsets, "android/view/WindowInsets", 28)
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getSafeInsetBottom, "getSafeInsetBottom", "()I") \
 METHOD (getSafeInsetLeft,   "getSafeInsetLeft",   "()I") \
 METHOD (getSafeInsetRight,  "getSafeInsetRight",  "()I") \
 METHOD (getSafeInsetTop,    "getSafeInsetTop",    "()I")

 DECLARE_JNI_CLASS_WITH_MIN_SDK (AndroidDisplayCutout, "android/view/DisplayCutout", 28)
#undef JNI_CLASS_MEMBERS

//==============================================================================
namespace
{
    enum
    {
        SYSTEM_UI_FLAG_VISIBLE = 0,
        SYSTEM_UI_FLAG_LOW_PROFILE = 1,
        SYSTEM_UI_FLAG_HIDE_NAVIGATION = 2,
        SYSTEM_UI_FLAG_FULLSCREEN = 4,
        SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION = 512,
        SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN = 1024,
        SYSTEM_UI_FLAG_IMMERSIVE = 2048,
        SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 4096
    };

    constexpr int fullScreenFlags = SYSTEM_UI_FLAG_HIDE_NAVIGATION | SYSTEM_UI_FLAG_FULLSCREEN | SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
    constexpr int FLAG_NOT_FOCUSABLE = 0x8;
}

//==============================================================================
static bool supportsDisplayCutout()
{
    return getAndroidSDKVersion() >= 28;
}

static BorderSize<int> androidDisplayCutoutToBorderSize (LocalRef<jobject> displayCutout, double displayScale)
{
    if (displayCutout.get() == nullptr)
        return {};

    auto* env = getEnv();

    auto getInset = [&] (jmethodID methodID)
    {
        return roundToInt (env->CallIntMethod (displayCutout.get(), methodID) / displayScale);
    };

    return { getInset (AndroidDisplayCutout.getSafeInsetTop),
             getInset (AndroidDisplayCutout.getSafeInsetLeft),
             getInset (AndroidDisplayCutout.getSafeInsetBottom),
             getInset (AndroidDisplayCutout.getSafeInsetRight) };
}

//==============================================================================
class AndroidComponentPeer  : public ComponentPeer,
                              private Timer
{
public:
    AndroidComponentPeer (Component& comp, int windowStyleFlags, void* nativeViewHandle)
        : ComponentPeer (comp, windowStyleFlags)
    {
        auto* env = getEnv();

        // NB: must not put this in the initialiser list, as it invokes a callback,
        // which will fail if the peer is only half-constructed.
        view = GlobalRef (LocalRef<jobject> (env->NewObject (ComponentPeerView, ComponentPeerView.create,
                                                             getAppContext().get(), (jboolean) component.isOpaque(),
                                                             (jlong) this)));

        if (nativeViewHandle != nullptr)
        {
            viewGroupIsWindow = false;

            // we don't know if the user is holding on to a local ref to this, so
            // explicitly create a new one
            auto nativeView = LocalRef<jobject> (env->NewLocalRef (static_cast<jobject> (nativeViewHandle)));

            if (env->IsInstanceOf (nativeView.get(), AndroidActivity))
            {
                viewGroup = GlobalRef (nativeView);
                env->CallVoidMethod (viewGroup.get(), AndroidActivity.setContentView, view.get());
            }
            else if (env->IsInstanceOf (nativeView.get(), AndroidViewGroup))
            {
                viewGroup = GlobalRef (nativeView);
                LocalRef<jobject> layoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));

                env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, layoutParams.get());
                env->CallVoidMethod ((jobject) viewGroup.get(), AndroidViewGroup.addView, view.get());
            }
            else
            {
                // the native handle you passed as a second argument to Component::addToDesktop must
                // either be an Activity or a ViewGroup
                jassertfalse;
            }
        }
        else
        {
            viewGroupIsWindow = true;

            LocalRef<jobject> viewLayoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));
            env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, viewLayoutParams.get());

            auto physicalBounds = (comp.getBoundsInParent().toFloat() * scale).toNearestInt();

            view.callVoidMethod (AndroidView.layout,
                                 physicalBounds.getX(), physicalBounds.getY(), physicalBounds.getRight(), physicalBounds.getBottom());

            LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                  physicalBounds.getWidth(), physicalBounds.getHeight(),
                                                                  physicalBounds.getX(), physicalBounds.getY(),
                                                                  TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN | FLAG_NOT_FOCUSABLE,
                                                                  component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));

            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, GRAVITY_LEFT | GRAVITY_TOP);
            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.windowAnimations, 0x01030000 /* android.R.style.Animation */);

            if (supportsDisplayCutout())
            {
                jfieldID layoutInDisplayCutoutModeFieldId = env->GetFieldID (AndroidWindowManagerLayoutParams,
                                                                             "layoutInDisplayCutoutMode",
                                                                             "I");

                if (layoutInDisplayCutoutModeFieldId != nullptr)
                    env->SetIntField (windowLayoutParams.get(),
                                      layoutInDisplayCutoutModeFieldId,
                                      LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS);
            }

            if (Desktop::getInstance().getKioskModeComponent() != nullptr)
                setNavBarsHidden (true);

            LocalRef<jobject> activity (getCurrentActivity());

            if (activity == nullptr)
                activity = getMainActivity();

            viewGroup = GlobalRef (LocalRef<jobject> (env->CallObjectMethod (activity.get(), AndroidContext.getSystemService, javaString ("window").get())));
            env->CallVoidMethod (viewGroup.get(), AndroidViewManager.addView, view.get(), windowLayoutParams.get());
        }

        if (supportsDisplayCutout())
        {
            jmethodID setOnApplyWindowInsetsListenerMethodId = env->GetMethodID (AndroidView,
                                                                                 "setOnApplyWindowInsetsListener",
                                                                                 "(Landroid/view/View$OnApplyWindowInsetsListener;)V");

            if (setOnApplyWindowInsetsListenerMethodId != nullptr)
                env->CallVoidMethod (view.get(), setOnApplyWindowInsetsListenerMethodId,
                                     CreateJavaInterface (new ViewWindowInsetsListener,
                                                          "android/view/View$OnApplyWindowInsetsListener").get());
        }

        if (isFocused())
            handleFocusGain();
    }

    ~AndroidComponentPeer() override
    {
        stopTimer();

        auto* env = getEnv();

        env->CallVoidMethod (view, ComponentPeerView.clear);
        frontWindow = nullptr;

        GlobalRef localView (view);
        GlobalRef localViewGroup (viewGroup);

        callOnMessageThread ([env, localView, localViewGroup]
        {
            if (env->IsInstanceOf (localViewGroup.get(), AndroidActivity))
                env->CallVoidMethod (localViewGroup.get(), AndroidActivity.setContentView, nullptr);
            else
                env->CallVoidMethod (localViewGroup.get(), AndroidViewManager.removeView, localView.get());
        });
    }

    void* getNativeHandle() const override
    {
        return (void*) view.get();
    }

    void setVisible (bool shouldBeVisible) override
    {
        GlobalRef localView (view);

        callOnMessageThread ([localView, shouldBeVisible]
        {
            localView.callVoidMethod (ComponentPeerView.setVisible, shouldBeVisible);
        });
    }

    void setTitle (const String& title) override
    {
        view.callVoidMethod (ComponentPeerView.setViewName, javaString (title).get());
    }

    void setBounds (const Rectangle<int>& userRect, bool isNowFullScreen) override
    {
        auto bounds = (userRect.toFloat() * scale).toNearestInt();

        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            fullScreen = isNowFullScreen;

            view.callVoidMethod (AndroidView.layout,
                                 bounds.getX(), bounds.getY(), bounds.getRight(), bounds.getBottom());

            if (viewGroup != nullptr && viewGroupIsWindow)
            {
                auto* env = getEnv();

                LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                      bounds.getWidth(), bounds.getHeight(), bounds.getX(), bounds.getY(),
                                                                      TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN,
                                                                      component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));

                env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, GRAVITY_LEFT | GRAVITY_TOP);
                env->CallVoidMethod (viewGroup.get(), AndroidViewManager.updateViewLayout, view.get(), windowLayoutParams.get());
            }
        }
        else
        {
            GlobalRef localView (view);

            MessageManager::callAsync ([localView, bounds]
            {
                localView.callVoidMethod (AndroidView.layout,
                                          bounds.getX(), bounds.getY(), bounds.getRight(), bounds.getBottom());
            });
        }
    }

    Rectangle<int> getBounds() const override
    {
        Rectangle<int> bounds (view.callIntMethod (AndroidView.getLeft),
                               view.callIntMethod (AndroidView.getTop),
                               view.callIntMethod (AndroidView.getWidth),
                               view.callIntMethod (AndroidView.getHeight));

        return (bounds.toFloat() / scale).toNearestInt();
    }

    void handleScreenSizeChange() override
    {
        ComponentPeer::handleScreenSizeChange();

        if (isFullScreen())
            setFullScreen (true);
    }

    Point<int> getScreenPosition() const
    {
        auto* env = getEnv();

        LocalRef<jintArray> position (env->NewIntArray (2));
        env->CallVoidMethod (view.get(), AndroidView.getLocationOnScreen, position.get());

        jint* const screenPosition = env->GetIntArrayElements (position.get(), nullptr);
        Point<int> pos (screenPosition[0], screenPosition[1]);
        env->ReleaseIntArrayElements (position.get(), screenPosition, 0);

        return pos;
    }

    Point<float> localToGlobal (Point<float> relativePosition) override
    {
        return relativePosition + (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::localToGlobal;

    Point<float> globalToLocal (Point<float> screenPosition) override
    {
        return screenPosition - (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::globalToLocal;

    void setMinimised (bool /*shouldBeMinimised*/) override
    {
        // n/a
    }

    bool isMinimised() const override
    {
        return false;
    }

    void setFullScreen (bool shouldBeFullScreen) override
    {
        if (shouldNavBarsBeHidden (shouldBeFullScreen))
        {
            if (isTimerRunning())
                return;

            startTimer (500);
        }
        else
        {
            setNavBarsHidden (false);
        }

        auto newBounds = [&]
        {
            if (navBarsHidden || shouldBeFullScreen)
                if (auto* display = Desktop::getInstance().getDisplays().getPrimaryDisplay())
                    return navBarsHidden ? display->totalArea
                                         : display->userArea;

            return lastNonFullscreenBounds.isEmpty() ? getBounds() : lastNonFullscreenBounds;
        }();

        if (! newBounds.isEmpty())
            setBounds (newBounds, shouldBeFullScreen);

        component.repaint();
    }

    bool isFullScreen() const override
    {
        return fullScreen;
    }

    void setIcon (const Image& /*newIcon*/) override
    {
        // n/a
    }

    bool contains (Point<int> localPos, bool trueIfInAChildWindow) const override
    {
        return isPositiveAndBelow (localPos.x, component.getWidth())
            && isPositiveAndBelow (localPos.y, component.getHeight())
            && ((! trueIfInAChildWindow) || view.callBooleanMethod (ComponentPeerView.containsPoint,
                                                                    (float) localPos.x * scale,
                                                                    (float) localPos.y * scale));
    }

    BorderSize<int> getFrameSize() const override
    {
        // TODO
        return {};
    }

    bool setAlwaysOnTop (bool /*alwaysOnTop*/) override
    {
        // TODO
        return false;
    }

    void toFront (bool makeActive) override
    {
        // Avoid calling bringToFront excessively: it's very slow
        if (frontWindow != this)
        {
            view.callVoidMethod (AndroidView.bringToFront);
            frontWindow = this;
        }

        if (makeActive)
            grabFocus();

        handleBroughtToFront();
    }

    void toBehind (ComponentPeer*) override
    {
        // TODO
    }

    //==============================================================================
    void handleMouseDownCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        // this forces a mouse-enter/up event, in case for some reason we didn't get a mouse-up before.
        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons(),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);

        if (isValidPeer (this))
            handleMouseDragCallback (index, sysPos, time);
    }

    void handleMouseDragCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown | (1 << (index & 63)));

        ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier);

        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);
    }

    void handleMouseUpCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown & ~(1 << (index & 63)));

        if (touchesDown == 0)
            ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons();

        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons(),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);
    }

    void handleKeyDownCallback (int k, int kc)
    {
        handleKeyPress (k, static_cast<juce_wchar> (kc));
    }

    void handleKeyUpCallback (int /*k*/, int /*kc*/)
    {
    }

    void handleBackButtonCallback()
    {
        bool handled = false;

        if (auto* app = JUCEApplicationBase::getInstance())
            handled = app->backButtonPressed();

        if (isKioskModeComponent())
            setNavBarsHidden (navBarsHidden);

        if (! handled)
        {
            auto* env = getEnv();
            LocalRef<jobject> activity (getCurrentActivity());

            if (activity != nullptr)
            {
                jmethodID finishMethod = env->GetMethodID (AndroidActivity, "finish", "()V");

                if (finishMethod != nullptr)
                    env->CallVoidMethod (activity.get(), finishMethod);
            }
        }
    }

    void handleKeyboardHiddenCallback()
    {
        Component::unfocusAllComponents();
    }

    void handleAppPausedCallback() {}

    void handleAppResumedCallback()
    {
        if (isKioskModeComponent())
            setNavBarsHidden (navBarsHidden);
    }

    //==============================================================================
    AccessibilityNativeHandle* getNativeHandleForViewId (jint virtualViewId) const
    {
        if (auto* handler = (virtualViewId == HOST_VIEW_ID
                                 ? component.getAccessibilityHandler()
                                 : AccessibilityNativeHandle::getAccessibilityHandlerForVirtualViewId (virtualViewId)))
        {
            return handler->getNativeImplementation();
        }

        return nullptr;
    }

    jboolean populateAccessibilityNodeInfoCallback (jint virtualViewId, jobject info) const
    {
        if (auto* handle = getNativeHandleForViewId (virtualViewId))
        {
            handle->populateNodeInfo (info);
            return true;
        }

        return false;
    }

    jboolean handlePerformActionCallback (jint virtualViewId, jint action, jobject arguments) const
    {
        if (auto* handle = getNativeHandleForViewId (virtualViewId))
            return handle->performAction (action, arguments);

        return false;
    }

    static jobject getFocusViewIdForHandler (const AccessibilityHandler* handler)
    {
        if (handler != nullptr)
            return getEnv()->NewObject (JavaInteger,
                                        JavaInteger.constructor,
                                        handler->getNativeImplementation()->getVirtualViewId());

        return nullptr;
    }

    jobject getInputFocusViewIdCallback()
    {
        if (auto* comp = dynamic_cast<Component*> (findCurrentTextInputTarget()))
            return getFocusViewIdForHandler (comp->getAccessibilityHandler());

        return nullptr;
    }

    jobject getAccessibilityFocusViewIdCallback() const
    {
        if (auto* handler = component.getAccessibilityHandler())
        {
            if (auto* modal = Component::getCurrentlyModalComponent())
            {
                if (! component.isParentOf (modal)
                     && component.isCurrentlyBlockedByAnotherModalComponent())
                {
                    if (auto* modalHandler = modal->getAccessibilityHandler())
                    {
                        if (auto* focusChild = modalHandler->getChildFocus())
                            return getFocusViewIdForHandler (focusChild);

                        return getFocusViewIdForHandler (modalHandler);
                    }
                }
            }

            if (auto* focusChild = handler->getChildFocus())
                return getFocusViewIdForHandler (focusChild);
        }

        return nullptr;
    }

    //==============================================================================
    bool isFocused() const override
    {
        if (view != nullptr)
            return view.callBooleanMethod (AndroidView.hasFocus);

        return false;
    }

    void grabFocus() override
    {
        if (view != nullptr)
            view.callBooleanMethod (AndroidView.requestFocus);
    }

    void handleFocusChangeCallback (bool hasFocus)
    {
        if (isFullScreen())
            setFullScreen (true);

        if (hasFocus)
            handleFocusGain();
        else
            handleFocusLoss();
    }

    static const char* getVirtualKeyboardType (TextInputTarget::VirtualKeyboardType type) noexcept
    {
        switch (type)
        {
            case TextInputTarget::textKeyboard:          return "text";
            case TextInputTarget::numericKeyboard:       return "number";
            case TextInputTarget::decimalKeyboard:       return "numberDecimal";
            case TextInputTarget::urlKeyboard:           return "textUri";
            case TextInputTarget::emailAddressKeyboard:  return "textEmailAddress";
            case TextInputTarget::phoneNumberKeyboard:   return "phone";
            default:                                     jassertfalse; break;
        }

        return "text";
    }

    void textInputRequired (Point<int>, TextInputTarget& target) override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard,
                             javaString (getVirtualKeyboardType (target.getKeyboardType())).get());
    }

    void dismissPendingTextInput() override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard, javaString ("").get());

        if (! isTimerRunning())
            startTimer (500);
     }

    //==============================================================================
    void handlePaintCallback (jobject canvas, jobject paint)
    {
        auto* env = getEnv();

        jobject rect = env->CallObjectMethod (canvas, AndroidCanvas.getClipBounds);
        auto left   = env->GetIntField (rect, AndroidRect.left);
        auto top    = env->GetIntField (rect, AndroidRect.top);
        auto right  = env->GetIntField (rect, AndroidRect.right);
        auto bottom = env->GetIntField (rect, AndroidRect.bottom);
        env->DeleteLocalRef (rect);

        auto clip = Rectangle<int>::leftTopRightBottom (left, top, right, bottom);

        if (clip.isEmpty())
            return;

        auto sizeNeeded = clip.getWidth() * clip.getHeight();

        if (sizeAllocated < sizeNeeded)
        {
            buffer.clear();
            sizeAllocated = sizeNeeded;
            buffer = GlobalRef (LocalRef<jobject> ((jobject) env->NewIntArray (sizeNeeded)));
        }

        if (jint* dest = env->GetIntArrayElements ((jintArray) buffer.get(), nullptr))
        {
            {
                Image temp (new PreallocatedImage (clip.getWidth(), clip.getHeight(),
                                                   dest, ! component.isOpaque()));

                {
                    LowLevelGraphicsSoftwareRenderer g (temp);
                    g.setOrigin (-clip.getPosition());
                    g.addTransform (AffineTransform::scale (scale));
                    handlePaint (g);
                }
            }

            env->ReleaseIntArrayElements ((jintArray) buffer.get(), dest, 0);

            env->CallVoidMethod (canvas, AndroidCanvas.drawBitmap, (jintArray) buffer.get(), 0, clip.getWidth(),
                                 (jfloat) clip.getX(), (jfloat) clip.getY(),
                                 clip.getWidth(), clip.getHeight(), true, paint);
        }
    }

    void repaint (const Rectangle<int>& userArea) override
    {
        auto area = (userArea.toFloat() * scale).toNearestInt();

        GlobalRef localView (view);

        callOnMessageThread ([area, localView]
        {
            localView.callVoidMethod (AndroidView.invalidate,
                                      area.getX(), area.getY(), area.getRight(), area.getBottom());
        });
    }

    void performAnyPendingRepaintsNow() override
    {
        // TODO
    }

    void setAlpha (float /*newAlpha*/) override
    {
        // TODO
    }

    StringArray getAvailableRenderingEngines() override
    {
        return StringArray ("Software Renderer");
    }

    //==============================================================================
    static Point<float> lastMousePos;
    static int64 touchesDown;

    //==============================================================================
    struct StartupActivityCallbackListener  : public ActivityLifecycleCallbacks
    {
        void onActivityStarted (jobject /*activity*/) override
        {
            auto* env = getEnv();
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {
                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.unregisterActivityLifecycleCallbacks,
                                     activityCallbackListener.get());
                clear();
                activityCallbackListener.clear();

                forceDisplayUpdate();
            }
        }
    };

private:
    //==============================================================================
    #define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
     METHOD   (create,                           "<init>",                        "(Landroid/content/Context;ZJ)V") \
     METHOD   (clear,                            "clear",                         "()V") \
     METHOD   (setViewName,                      "setViewName",                   "(Ljava/lang/String;)V") \
     METHOD   (setVisible,                       "setVisible",                    "(Z)V") \
     METHOD   (isVisible,                        "isVisible",                     "()Z") \
     METHOD   (containsPoint,                    "containsPoint",                 "(II)Z") \
     METHOD   (showKeyboard,                     "showKeyboard",                  "(Ljava/lang/String;)V") \
     METHOD   (setSystemUiVisibilityCompat,      "setSystemUiVisibilityCompat",   "(I)V") \
     CALLBACK (handlePaintJni,                   "handlePaint",                   "(JLandroid/graphics/Canvas;Landroid/graphics/Paint;)V") \
     CALLBACK (handleMouseDownJni,               "handleMouseDown",               "(JIFFJ)V") \
     CALLBACK (handleMouseDragJni,               "handleMouseDrag",               "(JIFFJ)V") \
     CALLBACK (handleMouseUpJni,                 "handleMouseUp",                 "(JIFFJ)V") \
     CALLBACK (handleKeyDownJni,                 "handleKeyDown",                 "(JII)V") \
     CALLBACK (handleKeyUpJni,                   "handleKeyUp",                   "(JII)V") \
     CALLBACK (handleBackButtonJni,              "handleBackButton",              "(J)V") \
     CALLBACK (handleKeyboardHiddenJni,          "handleKeyboardHidden",          "(J)V") \
     CALLBACK (viewSizeChangedJni,               "viewSizeChanged",               "(J)V") \
     CALLBACK (focusChangedJni,                  "focusChanged",                  "(JZ)V") \
     CALLBACK (handleAppPausedJni,               "handleAppPaused",               "(J)V") \
     CALLBACK (handleAppResumedJni,              "handleAppResumed",              "(J)V") \
     CALLBACK (populateAccessibilityNodeInfoJni, "populateAccessibilityNodeInfo", "(JILandroid/view/accessibility/AccessibilityNodeInfo;)Z") \
     CALLBACK (handlePerformActionJni,           "handlePerformAction",           "(JIILandroid/os/Bundle;)Z") \
     CALLBACK (getInputFocusViewIdJni,           "getInputFocusViewId",           "(J)Ljava/lang/Integer;") \
     CALLBACK (getAccessibilityFocusViewIdJni,   "getAccessibilityFocusViewId",   "(J)Ljava/lang/Integer;") \

    DECLARE_JNI_CLASS_WITH_BYTECODE (ComponentPeerView, "com/rmsl/juce/ComponentPeerView", 23, javaComponentPeerView, sizeof (javaComponentPeerView))
//    DECLARE_JNI_CLASS_WITH_MIN_SDK (ComponentPeerView, "com/rmsl/juce/ComponentPeerView", 16)    
    #undef JNI_CLASS_MEMBERS

    static void JNICALL handlePaintJni          (JNIEnv*, jobject /*view*/, jlong host, jobject canvas, jobject paint)           { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handlePaintCallback (canvas, paint); }
    static void JNICALL handleMouseDownJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDownCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseDragJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDragCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseUpJni        (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseUpCallback   (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL viewSizeChangedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMovedOrResized(); }
    static void JNICALL focusChangedJni         (JNIEnv*, jobject /*view*/, jlong host, jboolean hasFocus)                       { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleFocusChangeCallback (hasFocus); }
    static void JNICALL handleKeyDownJni        (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyDownCallback ((int) k, (int) kc); }
    static void JNICALL handleKeyUpJni          (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyUpCallback ((int) k, (int) kc); }
    static void JNICALL handleBackButtonJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleBackButtonCallback(); }
    static void JNICALL handleKeyboardHiddenJni (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyboardHiddenCallback(); }
    static void JNICALL handleAppPausedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppPausedCallback(); }
    static void JNICALL handleAppResumedJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppResumedCallback(); }

    static jboolean JNICALL populateAccessibilityNodeInfoJni (JNIEnv*, jobject /*view*/, jlong host, jint virtualViewId, jobject info)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->populateAccessibilityNodeInfoCallback (virtualViewId, info);

        return false;
    }

    static jboolean JNICALL handlePerformActionJni (JNIEnv*, jobject /*view*/, jlong host, jint virtualViewId, jint action, jobject arguments)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->handlePerformActionCallback (virtualViewId, action, arguments);

        return false;
    }

    static jobject JNICALL getInputFocusViewIdJni (JNIEnv*, jobject /*view*/, jlong host)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->getInputFocusViewIdCallback();

        return nullptr;
    }

    static jobject JNICALL getAccessibilityFocusViewIdJni (JNIEnv*, jobject /*view*/, jlong host)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->getAccessibilityFocusViewIdCallback();

        return nullptr;
    }

    //==============================================================================
    struct ViewWindowInsetsListener  : public juce::AndroidInterfaceImplementer
    {
        jobject onApplyWindowInsets (LocalRef<jobject> v, LocalRef<jobject> insets)
        {
            auto* env = getEnv();

            LocalRef<jobject> displayCutout (env->CallObjectMethod (insets.get(), AndroidWindowInsets.getDisplayCutout));

            if (displayCutout != nullptr)
            {
                const auto& mainDisplay = *Desktop::getInstance().getDisplays().getPrimaryDisplay();
                auto newSafeAreaInsets = androidDisplayCutoutToBorderSize (displayCutout, mainDisplay.scale);

                if (newSafeAreaInsets != mainDisplay.safeAreaInsets)
                    forceDisplayUpdate();

                auto* fieldId = env->GetStaticFieldID (AndroidWindowInsets, "CONSUMED", "Landroid/view/WindowInsets");
                jassert (fieldId != nullptr);

                return env->GetStaticObjectField (AndroidWindowInsets, fieldId);
            }

            jmethodID onApplyWindowInsetsMethodId = env->GetMethodID (AndroidView,
                                                                      "onApplyWindowInsets",
                                                                      "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;");

            jassert (onApplyWindowInsetsMethodId != nullptr);

            return env->CallObjectMethod (v.get(), onApplyWindowInsetsMethodId, insets.get());
        }

    private:
        jobject invoke (jobject proxy, jobject method, jobjectArray args) override
        {
            auto* env = getEnv();
            auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

            if (methodName == "onApplyWindowInsets")
            {
                jassert (env->GetArrayLength (args) == 2);

                LocalRef<jobject> windowView (env->GetObjectArrayElement (args, 0));
                LocalRef<jobject> insets     (env->GetObjectArrayElement (args, 1));

                return onApplyWindowInsets (std::move (windowView), std::move (insets));
            }

            // invoke base class
            return AndroidInterfaceImplementer::invoke (proxy, method, args);
        }
    };

    //==============================================================================
    struct PreallocatedImage  : public ImagePixelData
    {
        PreallocatedImage (int width_, int height_, jint* data_, bool hasAlpha_)
            : ImagePixelData (Image::ARGB, width_, height_), data (data_), hasAlpha (hasAlpha_)
        {
            if (hasAlpha_)
                zeromem (data_, static_cast<size_t> (width * height) * sizeof (jint));
        }

        ~PreallocatedImage() override
        {
            if (hasAlpha)
            {
                auto pix = (PixelARGB*) data;

                for (int i = width * height; --i >= 0;)
                {
                    pix->unpremultiply();
                    ++pix;
                }
            }
        }

        std::unique_ptr<ImageType> createType() const override
        {
            return std::make_unique<SoftwareImageType>();
        }

        std::unique_ptr<LowLevelGraphicsContext> createLowLevelContext() override
        {
            return std::make_unique<LowLevelGraphicsSoftwareRenderer> (Image (this));
        }

        void initialiseBitmapData (Image::BitmapData& bm, int x, int y, Image::BitmapData::ReadWriteMode /*mode*/) override
        {
            bm.lineStride = width * static_cast<int> (sizeof (jint));
            bm.pixelStride = static_cast<int> (sizeof (jint));
            bm.pixelFormat = Image::ARGB;
            bm.data = (uint8*) (data + x + y * width);
        }

        ImagePixelData::Ptr clone() override
        {
            auto s = new PreallocatedImage (width, height, nullptr, hasAlpha);
            s->allocatedData.malloc (sizeof (jint) * static_cast<size_t> (width * height));
            s->data = s->allocatedData;
            memcpy (s->data, data, sizeof (jint) * static_cast<size_t> (width * height));
            return s;
        }

    private:
        jint* data;
        HeapBlock<jint> allocatedData;
        bool hasAlpha;

        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PreallocatedImage)
    };

    //==============================================================================
    void timerCallback() override
    {
        setNavBarsHidden (shouldNavBarsBeHidden (fullScreen));
        setFullScreen (fullScreen);
        stopTimer();
    }

    bool isKioskModeComponent() const
    {
        if (auto* kiosk = Desktop::getInstance().getKioskModeComponent())
            return kiosk->getPeer() == this;

        return false;
    }

    bool shouldNavBarsBeHidden (bool shouldBeFullScreen) const
    {
        return (shouldBeFullScreen && isKioskModeComponent());
    }

    void setNavBarsHidden (bool hidden)
    {
        if (navBarsHidden != hidden)
        {
            navBarsHidden = hidden;

            view.callVoidMethod (ComponentPeerView.setSystemUiVisibilityCompat,
                                 (navBarsHidden ? (jint) (fullScreenFlags) : (jint) (SYSTEM_UI_FLAG_VISIBLE)));
        }
    }

    template <typename Callback>
    static void callOnMessageThread (Callback&& callback)
    {
        if (MessageManager::getInstance()->isThisTheMessageThread())
            callback();
        else
            MessageManager::callAsync (std::forward<Callback> (callback));
    }

    //==============================================================================
    friend class Displays;
    static AndroidComponentPeer* frontWindow;
    static GlobalRef activityCallbackListener;

    static constexpr int GRAVITY_LEFT = 0x3, GRAVITY_TOP = 0x30;
    static constexpr int TYPE_APPLICATION = 0x2;
    static constexpr int FLAG_NOT_TOUCH_MODAL = 0x20, FLAG_LAYOUT_IN_SCREEN = 0x100, FLAG_LAYOUT_NO_LIMITS = 0x200;
    static constexpr int PIXEL_FORMAT_OPAQUE = -1, PIXEL_FORMAT_TRANSPARENT = -2;
    static constexpr int LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS = 0x3;

    GlobalRef view, viewGroup, buffer;
    bool viewGroupIsWindow = false, fullScreen = false, navBarsHidden = false;
    int sizeAllocated = 0;
    float scale = (float) Desktop::getInstance().getDisplays().getPrimaryDisplay()->scale;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidComponentPeer)
};

Point<float> AndroidComponentPeer::lastMousePos;
int64 AndroidComponentPeer::touchesDown = 0;
AndroidComponentPeer* AndroidComponentPeer::frontWindow = nullptr;
GlobalRef AndroidComponentPeer::activityCallbackListener;
AndroidComponentPeer::ComponentPeerView_Class AndroidComponentPeer::ComponentPeerView;

//==============================================================================
ComponentPeer* Component::createNewPeer (int styleFlags, void* nativeWindow)
{
    return new AndroidComponentPeer (*this, styleFlags, nativeWindow);
}

//==============================================================================
bool Desktop::canUseSemiTransparentWindows() noexcept
{
    return true;
}

double Desktop::getDefaultMasterScale()
{
    return 1.0;
}

Desktop::DisplayOrientation Desktop::getCurrentOrientation() const
{
    enum
    {
        ROTATION_0   = 0,
        ROTATION_90  = 1,
        ROTATION_180 = 2,
        ROTATION_270 = 3
    };

    JNIEnv* env = getEnv();
    LocalRef<jstring> windowServiceString (javaString ("window"));


    LocalRef<jobject> windowManager = LocalRef<jobject> (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));

    if (windowManager.get() != nullptr)
    {
        LocalRef<jobject> display = LocalRef<jobject> (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

        if (display.get() != nullptr)
        {
            int rotation = env->CallIntMethod (display, AndroidDisplay.getRotation);

            switch (rotation)
            {
                case ROTATION_0:   return upright;
                case ROTATION_90:  return rotatedAntiClockwise;
                case ROTATION_180: return upsideDown;
                case ROTATION_270: return rotatedClockwise;
            }
        }
    }

    jassertfalse;
    return upright;
}

bool MouseInputSource::SourceList::addSource()
{
    addSource (sources.size(), MouseInputSource::InputSourceType::touch);
    return true;
}

bool MouseInputSource::SourceList::canUseTouch()
{
    return true;
}

Point<float> MouseInputSource::getCurrentRawMousePosition()
{
    return AndroidComponentPeer::lastMousePos;
}

void MouseInputSource::setRawMousePosition (Point<float>)
{
    // not needed
}

//==============================================================================
bool KeyPress::isKeyCurrentlyDown (int /*keyCode*/)
{
    // TODO
    return false;
}

JUCE_API void JUCE_CALLTYPE Process::hide()
{
    auto* env = getEnv();
    LocalRef<jobject> currentActivity (getCurrentActivity().get());

    if (env->CallBooleanMethod (currentActivity.get(), AndroidActivity.moveTaskToBack, true) == 0)
    {
        GlobalRef intent (LocalRef<jobject> (env->NewObject (AndroidIntent, AndroidIntent.constructor)));
        env->CallObjectMethod (intent, AndroidIntent.setAction,   javaString ("android.intent.action.MAIN")  .get());
        env->CallObjectMethod (intent, AndroidIntent.addCategory, javaString ("android.intent.category.HOME").get());

        env->CallVoidMethod (currentActivity.get(), AndroidContext.startActivity, intent.get());
    }
}

//==============================================================================
// TODO
JUCE_API bool JUCE_CALLTYPE Process::isForegroundProcess() { return true; }
JUCE_API void JUCE_CALLTYPE Process::makeForegroundProcess() {}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (show,                   "show",                 "()V") \
 METHOD (getWindow,              "getWindow",            "()Landroid/view/Window;")

DECLARE_JNI_CLASS (AndroidDialog, "android/app/Dialog")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (construct,                   "<init>",                 "(Landroid/content/Context;)V") \
 METHOD (create,                      "create",                 "()Landroid/app/AlertDialog;") \
 METHOD (setTitle,                    "setTitle",               "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setMessage,                  "setMessage",             "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setCancelable,               "setCancelable",          "(Z)Landroid/app/AlertDialog$Builder;") \
 METHOD (setOnCancelListener,         "setOnCancelListener",    "(Landroid/content/DialogInterface$OnCancelListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setPositiveButton,           "setPositiveButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNegativeButton,           "setNegativeButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNeutralButton,            "setNeutralButton",       "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;")

DECLARE_JNI_CLASS (AndroidAlertDialogBuilder, "android/app/AlertDialog$Builder")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (dismiss,    "dismiss",  "()V")

DECLARE_JNI_CLASS (AndroidDialogInterface, "android/content/DialogInterface")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \

DECLARE_JNI_CLASS (AndroidDialogOnClickListener, "android/content/DialogInterface$OnClickListener")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class DialogListener  : public juce::AndroidInterfaceImplementer
{
public:
    DialogListener (std::shared_ptr<ModalComponentManager::Callback> callbackToUse, int resultToUse)
        : callback (std::move (callbackToUse)), result (resultToUse)
    {}

    void onResult (jobject dialog)
    {
        auto* env = getEnv();
        env->CallVoidMethod (dialog, AndroidDialogInterface.dismiss);

        if (callback != nullptr)
            callback->modalStateFinished (result);

        callback = nullptr;
    }

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onCancel" || methodName == "onClick")
        {
            onResult (env->GetObjectArrayElement (args, 0));
            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::shared_ptr<ModalComponentManager::Callback> callback;
    int result;
};

//==============================================================================
static void createAndroidDialog (const MessageBoxOptions& opts,
                                 ModalComponentManager::Callback* callbackIn,
                                 AlertWindowMappings::MapFn mapFn)
{
    auto* env = getEnv();

    LocalRef<jobject> builder (env->NewObject (AndroidAlertDialogBuilder, AndroidAlertDialogBuilder.construct, getMainActivity().get()));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setTitle,   javaString (opts.getTitle()).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setMessage, javaString (opts.getMessage()).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setCancelable, true));

    std::shared_ptr<ModalComponentManager::Callback> sharedCallback (AlertWindowMappings::getWrappedCallback (callbackIn, mapFn));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setOnCancelListener,
                                                        CreateJavaInterface (new DialogListener (sharedCallback, 0),
                                                                             "android/content/DialogInterface$OnCancelListener").get()));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setPositiveButton,
                                                        javaString (opts.getButtonText (0)).get(),
                                                        CreateJavaInterface (new DialogListener (sharedCallback, 0),
                                                                             "android/content/DialogInterface$OnClickListener").get()));

    if (opts.getButtonText (1).isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNegativeButton,
                                                            javaString (opts.getButtonText (1)).get(),
                                                            CreateJavaInterface (new DialogListener (sharedCallback, 1),
                                                                                 "android/content/DialogInterface$OnClickListener").get()));

    if (opts.getButtonText (2).isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNeutralButton,
                                                            javaString (opts.getButtonText (2)).get(),
                                                            CreateJavaInterface (new DialogListener (sharedCallback, 2),
                                                                                 "android/content/DialogInterface$OnClickListener").get()));

    LocalRef<jobject> dialog (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.create));

    LocalRef<jobject> window (env->CallObjectMethod (dialog.get(), AndroidDialog.getWindow));

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
    {
        env->CallVoidMethod (window.get(), AndroidWindow.setFlags, FLAG_NOT_FOCUSABLE, FLAG_NOT_FOCUSABLE);
        LocalRef<jobject> decorView (env->CallObjectMethod (window.get(), AndroidWindow.getDecorView));
        env->CallVoidMethod (decorView.get(), AndroidView.setSystemUiVisibility, fullScreenFlags);
    }

    env->CallVoidMethod (dialog.get(), AndroidDialog.show);

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
        env->CallVoidMethod (window.get(), AndroidWindow.clearFlags, FLAG_NOT_FOCUSABLE);
}

void JUCE_CALLTYPE NativeMessageBox::showMessageBoxAsync (MessageBoxIconType /*iconType*/,
                                                          const String& title, const String& message,
                                                          Component* /*associatedComponent*/,
                                                          ModalComponentManager::Callback* callback)
{
    createAndroidDialog (MessageBoxOptions()
                           .withTitle (title)
                           .withMessage (message)
                           .withButton (TRANS("OK")),
                         callback, AlertWindowMappings::messageBox);
}

bool JUCE_CALLTYPE NativeMessageBox::showOkCancelBox (MessageBoxIconType /*iconType*/,
                                                      const String& title, const String& message,
                                                      Component* /*associatedComponent*/,
                                                      ModalComponentManager::Callback* callback)
{
    createAndroidDialog (MessageBoxOptions()
                           .withTitle (title)
                           .withMessage (message)
                           .withButton (TRANS("OK"))
                           .withButton (TRANS("Cancel")),
                         callback, AlertWindowMappings::okCancel);

    return false;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoCancelBox (MessageBoxIconType /*iconType*/,
                                                        const String& title, const String& message,
                                                        Component* /*associatedComponent*/,
                                                        ModalComponentManager::Callback* callback)
{
    createAndroidDialog (MessageBoxOptions()
                           .withTitle (title)
                           .withMessage (message)
                           .withButton (TRANS("Yes"))
                           .withButton (TRANS("No"))
                           .withButton (TRANS("Cancel")),
                         callback, AlertWindowMappings::yesNoCancel);

    return 0;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoBox (MessageBoxIconType /*iconType*/,
                                                  const String& title, const String& message,
                                                  Component* /*associatedComponent*/,
                                                  ModalComponentManager::Callback* callback)
{
    createAndroidDialog (MessageBoxOptions()
                           .withTitle (title)
                           .withMessage (message)
                           .withButton (TRANS("Yes"))
                           .withButton (TRANS("No")),
                         callback, AlertWindowMappings::okCancel);

    return 0;
}

void JUCE_CALLTYPE NativeMessageBox::showAsync (const MessageBoxOptions& options,
                                                ModalComponentManager::Callback* callback)
{
    createAndroidDialog (options, callback, AlertWindowMappings::noMapping);
}

void JUCE_CALLTYPE NativeMessageBox::showAsync (const MessageBoxOptions& options,
                                                std::function<void (int)> callback)
{
    showAsync (options, ModalCallbackFunction::create (callback));
}

//==============================================================================
static bool androidScreenSaverEnabled = true;

void Desktop::setScreenSaverEnabled (bool shouldEnable)
{
    constexpr auto FLAG_KEEP_SCREEN_ON = 0x80;

    if (shouldEnable != androidScreenSaverEnabled)
    {
        LocalRef<jobject> activity (getMainActivity());

        if (activity != nullptr)
        {
            auto* env = getEnv();

            LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
            env->CallVoidMethod (mainWindow.get(), AndroidWindow.setFlags, shouldEnable ? 0 : FLAG_KEEP_SCREEN_ON, FLAG_KEEP_SCREEN_ON);
        }

        androidScreenSaverEnabled = shouldEnable;
    }
}

bool Desktop::isScreenSaverEnabled()
{
    return androidScreenSaverEnabled;
}

//==============================================================================
void Desktop::setKioskComponent (Component* kioskComp, bool enableOrDisable, bool allowMenusAndBars)
{
    ignoreUnused (allowMenusAndBars);

    if (AndroidComponentPeer* peer = dynamic_cast<AndroidComponentPeer*> (kioskComp->getPeer()))
        peer->setFullScreen (enableOrDisable);
    else
        jassertfalse; // (this should have been checked by the caller)
}

//==============================================================================
static jint getAndroidOrientationFlag (int orientations) noexcept
{
    enum
    {
        SCREEN_ORIENTATION_LANDSCAPE          = 0,
        SCREEN_ORIENTATION_PORTRAIT           = 1,
        SCREEN_ORIENTATION_USER               = 2,
        SCREEN_ORIENTATION_REVERSE_LANDSCAPE  = 8,
        SCREEN_ORIENTATION_REVERSE_PORTRAIT   = 9,
        SCREEN_ORIENTATION_USER_LANDSCAPE     = 11,
        SCREEN_ORIENTATION_USER_PORTRAIT      = 12,
    };

    switch (orientations)
    {
        case Desktop::upright:                                          return (jint) SCREEN_ORIENTATION_PORTRAIT;
        case Desktop::upsideDown:                                       return (jint) SCREEN_ORIENTATION_REVERSE_PORTRAIT;
        case Desktop::upright + Desktop::upsideDown:                    return (jint) SCREEN_ORIENTATION_USER_PORTRAIT;
        case Desktop::rotatedAntiClockwise:                             return (jint) SCREEN_ORIENTATION_LANDSCAPE;
        case Desktop::rotatedClockwise:                                 return (jint) SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
        case Desktop::rotatedClockwise + Desktop::rotatedAntiClockwise: return (jint) SCREEN_ORIENTATION_USER_LANDSCAPE;
        default:                                                        return (jint) SCREEN_ORIENTATION_USER;
    }
}

void Desktop::allowedOrientationsChanged()
{
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
        getEnv()->CallVoidMethod (activity.get(), AndroidActivity.setRequestedOrientation, getAndroidOrientationFlag (allowedOrientations));
}

//==============================================================================
bool juce_areThereAnyAlwaysOnTopWindows()
{
    return false;
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,          "<init>",         "()V") \
 FIELD  (density,         "density",        "F") \
 FIELD  (widthPixels,     "widthPixels",    "I") \
 FIELD  (heightPixels,    "heightPixels",   "I")

DECLARE_JNI_CLASS (AndroidDisplayMetrics, "android/util/DisplayMetrics")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class LayoutChangeListener  : public juce::AndroidInterfaceImplementer
{
public:
    virtual void onLayoutChange (LocalRef<jobject> view, int left, int top, int right, int bottom,
                                 int oldLeft, int oldTop, int oldRight, int oldBottom) = 0;

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onLayoutChange")
        {
            jassert (env->GetArrayLength (args) == 9);

            LocalRef<jobject> view (env->GetObjectArrayElement (args, 0));
            int dims[8];

            for (int i = 1; i < 9; ++i)
            {
                LocalRef<jobject> integer (env->GetObjectArrayElement (args, i));
                dims[i - 1] = env->CallIntMethod (integer.get(), JavaInteger.intValue);
            }

            onLayoutChange (std::move (view), dims[0], dims[1], dims[2], dims[3],
                            dims[4], dims[5], dims[6], dims[7]);

            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::unique_ptr<ModalComponentManager::Callback> callback;
};

//==============================================================================
struct MainActivityWindowLayoutListener   : public LayoutChangeListener
{
    MainActivityWindowLayoutListener (std::function<void()>&& updateDisplaysCb)
        : forceDisplayUpdate (std::move (updateDisplaysCb))
    {
    }

    void onLayoutChange (LocalRef<jobject> /*view*/, int left, int top, int right, int bottom,
                         int oldLeft, int oldTop, int oldRight, int oldBottom) override
    {
        auto newBounds = Rectangle<int>::leftTopRightBottom (left, top, right, bottom);
        auto oldBounds = Rectangle<int>::leftTopRightBottom (oldLeft, oldTop, oldRight, oldBottom);

        if (newBounds != oldBounds)
        {
            const auto& mainDisplay = *Desktop::getInstance().getDisplays().getPrimaryDisplay();
            auto userArea = (newBounds.toFloat() / mainDisplay.scale).toNearestInt();

            if (userArea != mainDisplay.userArea)
                forceDisplayUpdate();
        }
    }

    std::function<void()> forceDisplayUpdate;
};

//==============================================================================
void Displays::findDisplays (float masterScale)
{
    auto* env = getEnv();

    LocalRef<jobject> usableSize (env->NewObject (AndroidPoint, AndroidPoint.create, 0, 0));
    LocalRef<jstring> windowServiceString (javaString ("window"));
    LocalRef<jobject> displayMetrics (env->NewObject (AndroidDisplayMetrics, AndroidDisplayMetrics.create));
    LocalRef<jobject> windowManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));
    LocalRef <jobject> display (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

    jmethodID getRealMetricsMethod = env->GetMethodID (AndroidDisplay, "getRealMetrics", "(Landroid/util/DisplayMetrics;)V");

    if (getRealMetricsMethod != nullptr)
        env->CallVoidMethod (display.get(), getRealMetricsMethod, displayMetrics.get());
    else
        env->CallVoidMethod (display.get(), AndroidDisplay.getMetrics, displayMetrics.get());

    env->CallVoidMethod (display.get(), AndroidDisplay.getSize, usableSize.get());

    Display d;

    d.isMain = true;
    d.scale = env->GetFloatField (displayMetrics.get(), AndroidDisplayMetrics.density);
    d.dpi = (d.scale * 160.f);
    d.scale *= masterScale;

    d.totalArea = Rectangle<int> (env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.widthPixels),
                                  env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.heightPixels)) / d.scale;

    d.userArea = Rectangle<int> (env->GetIntField (usableSize.get(), AndroidPoint.x),
                                 env->GetIntField (usableSize.get(), AndroidPoint.y)) / d.scale;

    // unfortunately usableSize still contains the nav bar
    // the best workaround is to try to get the size of the top-level view of
    // the main activity
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
    {
        LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
        LocalRef<jobject> decorView (env->CallObjectMethod (mainWindow.get(), AndroidWindow.getDecorView));
        LocalRef<jobject> contentView (env->CallObjectMethod (decorView.get(), AndroidView.findViewById, 0x01020002 /* android.R.id.content */));

        if (contentView != nullptr)
        {
            Rectangle<int> activityArea (env->CallIntMethod (contentView.get(), AndroidView.getLeft),
                                         env->CallIntMethod (contentView.get(), AndroidView.getTop),
                                         env->CallIntMethod (contentView.get(), AndroidView.getWidth),
                                         env->CallIntMethod (contentView.get(), AndroidView.getHeight));

            if (! activityArea.isEmpty())
                d.userArea = activityArea / d.scale;

            if (supportsDisplayCutout())
            {
                jmethodID getRootWindowInsetsMethodId = env->GetMethodID (AndroidView,
                                                                          "getRootWindowInsets",
                                                                          "()Landroid/view/WindowInsets;");

                if (getRootWindowInsetsMethodId != nullptr)
                {
                    LocalRef<jobject> insets (env->CallObjectMethod (contentView.get(), getRootWindowInsetsMethodId));

                    if (insets != nullptr)
                    {
                        LocalRef<jobject> displayCutout (env->CallObjectMethod (insets.get(), AndroidWindowInsets.getDisplayCutout));

                        if (displayCutout.get() != nullptr)
                            d.safeAreaInsets = androidDisplayCutoutToBorderSize (displayCutout, d.scale);
                    }
                }
            }

            static bool hasAddedMainActivityListener = false;

            if (! hasAddedMainActivityListener)
            {
                hasAddedMainActivityListener = true;

                env->CallVoidMethod (contentView.get(), AndroidView.addOnLayoutChangeListener,
                                     CreateJavaInterface (new MainActivityWindowLayoutListener ([this] { refresh(); }),
                                                          "android/view/View$OnLayoutChangeListener").get());
            }
        }
    }
    else
    {
        // the main activity may have not started yet so add an activity listener
        if (AndroidComponentPeer::activityCallbackListener == nullptr)
        {
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {
                AndroidComponentPeer::activityCallbackListener = GlobalRef (CreateJavaInterface (
                        new AndroidComponentPeer::StartupActivityCallbackListener,
                        "android/app/Application$ActivityLifecycleCallbacks"));

                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.registerActivityLifecycleCallbacks,
                                     AndroidComponentPeer::activityCallbackListener.get());
            }
        }
    }

    displays.add (d);
}

//==============================================================================
Image juce_createIconForFile (const File& /*file*/)
{
    return Image();
}

//==============================================================================
void* CustomMouseCursorInfo::create() const                                         { return nullptr; }
void* MouseCursor::createStandardMouseCursor (MouseCursor::StandardCursorType)      { return nullptr; }
void MouseCursor::deleteMouseCursor (void* /*cursorHandle*/, bool /*isStandard*/)   {}

//==============================================================================
void MouseCursor::showInWindow (ComponentPeer*) const   {}

//==============================================================================
bool DragAndDropContainer::performExternalDragDropOfFiles (const StringArray& /*files*/, bool /*canMove*/,
                                                           Component* /*srcComp*/, std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

bool DragAndDropContainer::performExternalDragDropOfText (const String& /*text*/, Component* /*srcComp*/,
                                                          std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

//==============================================================================
void LookAndFeel::playAlertSound()
{
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getText,      "getText",            "()Ljava/lang/CharSequence;") \
 METHOD (setText,      "setText",            "(Ljava/lang/CharSequence;)V")

DECLARE_JNI_CLASS (AndroidClipboardManager, "android/content/ClipboardManager")
#undef JNI_CLASS_MEMBERS

//==============================================================================
void SystemClipboard::copyTextToClipboard (const String& text)
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    env->CallVoidMethod (clipboardManager.get(), AndroidClipboardManager.setText, javaString(text).get());
}

String SystemClipboard::getTextFromClipboard()
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    LocalRef<jobject> charSequence (env->CallObjectMethod (clipboardManager.get(), AndroidClipboardManager.getText));

    if (charSequence == nullptr)
        return {};

    return juceString(LocalRef<jstring> ((jstring) env->CallObjectMethod(charSequence.get(), JavaCharSequence.toString)));
}

//==============================================================================
const int extendedKeyModifier       = 0x10000;

const int KeyPress::spaceKey        = ' ';
const int KeyPress::returnKey       = 66;
const int KeyPress::escapeKey       = 4;
const int KeyPress::backspaceKey    = 67;
const int KeyPress::leftKey         = extendedKeyModifier + 1;
const int KeyPress::rightKey        = extendedKeyModifier + 2;
const int KeyPress::upKey           = extendedKeyModifier + 3;
const int KeyPress::downKey         = extendedKeyModifier + 4;
const int KeyPress::pageUpKey       = extendedKeyModifier + 5;
const int KeyPress::pageDownKey     = extendedKeyModifier + 6;
const int KeyPress::endKey          = extendedKeyModifier + 7;
const int KeyPress::homeKey         = extendedKeyModifier + 8;
const int KeyPress::deleteKey       = extendedKeyModifier + 9;
const int KeyPress::insertKey       = -1;
const int KeyPress::tabKey          = 61;
const int KeyPress::F1Key           = extendedKeyModifier + 10;
const int KeyPress::F2Key           = extendedKeyModifier + 11;
const int KeyPress::F3Key           = extendedKeyModifier + 12;
const int KeyPress::F4Key           = extendedKeyModifier + 13;
const int KeyPress::F5Key           = extendedKeyModifier + 14;
const int KeyPress::F6Key           = extendedKeyModifier + 16;
const int KeyPress::F7Key           = extendedKeyModifier + 17;
const int KeyPress::F8Key           = extendedKeyModifier + 18;
const int KeyPress::F9Key           = extendedKeyModifier + 19;
const int KeyPress::F10Key          = extendedKeyModifier + 20;
const int KeyPress::F11Key          = extendedKeyModifier + 21;
const int KeyPress::F12Key          = extendedKeyModifier + 22;
const int KeyPress::F13Key          = extendedKeyModifier + 23;
const int KeyPress::F14Key          = extendedKeyModifier + 24;
const int KeyPress::F15Key          = extendedKeyModifier + 25;
const int KeyPress::F16Key          = extendedKeyModifier + 26;
const int KeyPress::F17Key          = extendedKeyModifier + 50;
const int KeyPress::F18Key          = extendedKeyModifier + 51;
const int KeyPress::F19Key          = extendedKeyModifier + 52;
const int KeyPress::F20Key          = extendedKeyModifier + 53;
const int KeyPress::F21Key          = extendedKeyModifier + 54;
const int KeyPress::F22Key          = extendedKeyModifier + 55;
const int KeyPress::F23Key          = extendedKeyModifier + 56;
const int KeyPress::F24Key          = extendedKeyModifier + 57;
const int KeyPress::F25Key          = extendedKeyModifier + 58;
const int KeyPress::F26Key          = extendedKeyModifier + 59;
const int KeyPress::F27Key          = extendedKeyModifier + 60;
const int KeyPress::F28Key          = extendedKeyModifier + 61;
const int KeyPress::F29Key          = extendedKeyModifier + 62;
const int KeyPress::F30Key          = extendedKeyModifier + 63;
const int KeyPress::F31Key          = extendedKeyModifier + 64;
const int KeyPress::F32Key          = extendedKeyModifier + 65;
const int KeyPress::F33Key          = extendedKeyModifier + 66;
const int KeyPress::F34Key          = extendedKeyModifier + 67;
const int KeyPress::F35Key          = extendedKeyModifier + 68;
const int KeyPress::numberPad0      = extendedKeyModifier + 27;
const int KeyPress::numberPad1      = extendedKeyModifier + 28;
const int KeyPress::numberPad2      = extendedKeyModifier + 29;
const int KeyPress::numberPad3      = extendedKeyModifier + 30;
const int KeyPress::numberPad4      = extendedKeyModifier + 31;
const int KeyPress::numberPad5      = extendedKeyModifier + 32;
const int KeyPress::numberPad6      = extendedKeyModifier + 33;
const int KeyPress::numberPad7      = extendedKeyModifier + 34;
const int KeyPress::numberPad8      = extendedKeyModifier + 35;
const int KeyPress::numberPad9      = extendedKeyModifier + 36;
const int KeyPress::numberPadAdd            = extendedKeyModifier + 37;
const int KeyPress::numberPadSubtract       = extendedKeyModifier + 38;
const int KeyPress::numberPadMultiply       = extendedKeyModifier + 39;
const int KeyPress::numberPadDivide         = extendedKeyModifier + 40;
const int KeyPress::numberPadSeparator      = extendedKeyModifier + 41;
const int KeyPress::numberPadDecimalPoint   = extendedKeyModifier + 42;
const int KeyPress::numberPadEquals         = extendedKeyModifier + 43;
const int KeyPress::numberPadDelete         = extendedKeyModifier + 44;
const int KeyPress::playKey         = extendedKeyModifier + 45;
const int KeyPress::stopKey         = extendedKeyModifier + 46;
const int KeyPress::fastForwardKey  = extendedKeyModifier + 47;
const int KeyPress::rewindKey       = extendedKeyModifier + 48;

//==============================================================================
#ifdef JUCE_PUSH_NOTIFICATIONS_ACTIVITY
 struct JuceActivityNewIntentListener
 {
     #define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
      CALLBACK (appNewIntent, "appNewIntent", "(Landroid/content/Intent;)V")

      DECLARE_JNI_CLASS (JavaActivity, JUCE_PUSH_NOTIFICATIONS_ACTIVITY)
     #undef JNI_CLASS_MEMBERS

     static void JNICALL appNewIntent (JNIEnv*, jobject /*activity*/, jobject intentData)
     {
         juce_handleNotificationIntent (static_cast<void*> (intentData));
     }
 };

 JuceActivityNewIntentListener::JavaActivity_Class JuceActivityNewIntentListener::JavaActivity;
#endif

} // namespace juce
