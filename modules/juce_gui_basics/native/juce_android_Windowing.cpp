/*
  ==============================================================================

   This file is part of the JUCE library.
   Copyright (c) 2020 - Raw Material Software Limited

   JUCE is an open source library subject to commercial or open-source
   licensing.

   By using JUCE, you agree to the terms of both the JUCE 6 End-User License
   Agreement and JUCE Privacy Policy (both effective as of the 16th June 2020).

   End User License Agreement: www.juce.com/juce-6-licence
   Privacy Policy: www.juce.com/juce-privacy-policy

   Or: You may also use this code under the terms of the GPL v3 (see
   www.gnu.org/licenses).

   JUCE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY, AND ALL WARRANTIES, WHETHER
   EXPRESSED OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR PURPOSE, ARE
   DISCLAIMED.

  ==============================================================================
*/

namespace juce
{
// This byte-code is generated from native/java/com/rmsl/juce/ComponentPeerView.java with min sdk version 16
// See juce_core/native/java/README.txt on how to generate this byte-code.
static const uint8 javaComponentPeerView[] =
{ 31,139,8,8,125,210,48,97,0,11,74,97,118,97,68,101,120,66,121,116,101,67,111,100,101,46,100,101,120,0,165,155,11,124,92,69,189,199,255,115,206,217,221,100,179,73,54,155,103,155,164,217,164,175,180,77,147,77,211,167,73,33,125,133,166,77,218,210,164,181,
77,240,194,38,57,73,182,221,156,221,238,110,146,6,240,82,16,108,121,121,41,20,40,80,158,86,188,162,32,23,17,17,17,184,90,193,71,229,33,15,81,171,2,226,21,17,16,43,40,42,151,222,223,127,206,236,102,211,135,85,111,250,249,238,255,63,51,255,153,51,143,255,
252,103,206,166,233,51,119,186,3,13,11,232,178,170,231,247,94,245,135,63,54,103,173,94,115,223,58,239,222,231,127,182,239,107,111,229,45,252,230,163,205,243,137,162,68,180,115,243,124,31,169,159,11,27,136,202,133,157,191,24,188,110,16,45,135,60,228,32,
42,129,60,146,65,116,62,228,129,76,34,20,81,56,155,168,115,6,209,91,144,45,229,68,171,193,90,176,14,108,6,93,32,6,134,193,24,184,16,236,2,151,130,221,224,74,112,15,248,54,120,18,124,31,60,13,126,4,126,12,142,128,87,193,95,64,221,20,162,53,192,4,187,192,
29,224,9,240,59,224,168,32,154,2,26,64,43,232,1,255,14,190,0,30,3,47,3,175,159,168,30,244,129,253,224,89,64,149,68,51,65,7,184,4,124,27,100,85,97,44,32,4,174,6,247,130,103,193,239,65,230,84,162,50,208,12,250,193,5,224,54,240,0,120,14,252,26,20,76,35,
10,128,179,192,22,176,13,68,193,191,131,139,193,101,224,42,112,13,216,15,110,3,7,193,23,192,189,224,1,240,53,240,40,248,22,120,18,60,13,158,3,47,129,35,224,85,240,6,120,7,28,5,127,6,199,128,115,58,145,27,228,128,42,176,8,172,0,235,65,55,24,0,113,112,
17,184,18,220,8,62,11,238,7,143,131,23,193,207,193,155,224,61,144,139,181,157,12,202,65,0,44,6,205,96,53,56,27,108,1,38,136,129,75,192,94,112,51,184,19,60,6,14,129,167,192,211,224,93,240,55,160,205,196,90,128,114,240,49,176,5,244,130,243,193,229,224,
58,112,59,184,23,60,12,126,8,94,3,111,131,143,128,167,154,168,16,76,1,115,192,82,208,14,122,192,14,112,49,184,29,124,14,124,17,220,7,30,7,207,129,95,129,163,224,24,183,49,139,104,6,88,4,90,64,7,24,4,49,112,37,184,30,220,2,110,3,247,128,47,131,39,192,
51,224,21,240,59,240,23,160,207,134,207,128,98,80,9,154,192,89,96,3,8,129,157,224,34,240,25,176,15,28,0,7,193,231,193,189,224,33,240,4,120,26,188,4,142,128,215,192,251,192,61,7,254,6,234,64,27,56,23,196,192,149,224,58,112,23,120,0,60,1,126,0,126,10,126,
5,222,6,31,2,119,13,145,15,148,130,233,160,6,44,6,103,129,117,96,8,68,193,24,184,21,124,3,124,11,60,5,126,12,126,13,62,2,57,115,209,15,176,16,180,131,109,96,20,124,26,92,11,238,2,247,131,199,193,51,224,23,224,3,240,17,48,106,177,102,160,0,76,6,21,96,
58,168,3,243,192,18,176,28,172,6,91,65,31,24,1,151,129,189,96,31,184,17,220,2,110,7,159,5,159,7,95,4,78,108,97,132,36,202,2,69,160,152,236,56,53,9,76,6,165,160,12,32,124,16,194,4,33,12,144,218,246,132,237,76,216,174,132,109,67,112,117,130,107,18,220,
139,224,26,132,101,37,76,63,97,10,9,195,39,12,131,240,56,170,3,1,80,15,230,1,132,75,66,24,165,5,96,33,88,164,226,230,18,240,49,208,8,154,192,82,112,6,56,19,52,131,101,100,199,213,21,96,21,88,13,62,14,130,160,7,244,130,62,178,199,151,252,113,41,249,165,
82,123,204,66,165,221,74,231,124,158,7,77,229,123,148,254,32,242,115,211,218,242,169,57,123,84,229,231,168,252,92,85,150,212,11,149,238,85,243,202,237,231,43,253,144,170,91,146,214,38,207,245,225,82,91,231,57,126,65,217,204,72,107,103,150,106,39,79,233,
71,160,23,40,253,245,82,251,153,60,231,111,169,118,88,127,79,181,51,87,181,83,168,214,225,67,213,31,94,11,163,204,158,195,121,202,166,85,233,252,172,53,74,247,192,102,173,210,249,185,109,74,47,65,126,187,210,171,161,175,83,250,124,232,235,149,222,12,
125,131,210,87,67,223,168,244,13,105,249,91,210,244,243,160,119,42,125,48,45,63,145,166,95,152,166,95,154,214,230,85,105,249,251,160,119,40,253,64,90,254,129,210,113,157,231,249,108,165,243,28,38,219,57,152,102,207,115,184,41,57,39,200,223,172,244,7,
211,108,14,165,233,135,203,108,127,108,80,243,185,69,233,47,32,127,171,210,143,164,233,111,64,239,82,250,123,208,187,149,254,33,244,115,148,158,129,77,248,111,74,47,128,254,9,165,151,165,229,179,95,157,171,244,105,200,63,79,233,243,211,236,155,203,217,
183,5,237,36,91,102,10,222,235,211,41,70,182,252,138,148,130,30,82,242,97,37,191,174,228,35,74,126,67,217,63,73,28,31,252,228,20,182,204,21,28,43,26,232,59,196,178,130,92,130,227,134,93,94,161,202,43,80,226,19,236,231,69,242,174,228,199,78,123,80,202,
10,58,36,101,57,61,35,101,3,253,90,202,44,122,67,250,249,12,106,129,116,32,242,252,158,120,79,58,233,63,164,44,164,91,33,51,17,185,116,41,27,232,40,241,222,158,41,211,89,42,63,11,81,224,143,114,220,118,58,23,207,253,140,148,69,116,141,74,223,70,188,215,
236,124,47,110,105,215,169,244,126,41,117,186,137,236,189,120,179,146,183,72,41,232,179,74,30,36,222,123,26,237,147,178,154,238,34,222,103,211,228,243,242,17,217,126,41,229,98,122,69,202,82,250,21,241,158,172,161,132,146,239,18,199,226,5,244,223,196,
177,194,67,207,74,57,137,222,225,189,166,250,61,9,59,155,101,25,162,227,3,82,206,162,63,73,121,134,12,102,229,216,225,186,92,151,44,250,148,148,37,180,91,165,247,72,185,136,222,148,235,51,87,218,77,65,139,63,39,94,23,187,94,5,242,77,37,251,165,204,165,
1,41,39,145,16,182,212,228,250,77,151,246,126,172,200,160,148,181,20,146,178,153,182,73,153,79,219,149,12,75,121,38,13,73,57,137,70,149,188,80,202,133,180,75,74,63,93,33,165,143,174,146,50,155,174,150,210,73,215,42,63,217,167,202,175,151,114,62,221,32,
101,38,29,144,210,77,183,43,187,59,164,204,160,59,165,180,215,193,143,25,186,91,201,207,43,249,159,82,78,161,47,40,121,143,202,255,162,242,195,47,41,121,175,146,247,41,63,253,178,148,31,163,251,165,92,64,79,40,249,45,41,171,232,121,41,43,233,5,37,95,
84,242,37,85,254,99,149,126,89,201,159,72,153,67,63,149,114,6,253,76,202,57,116,68,202,165,244,11,41,109,255,241,43,255,225,244,171,82,206,163,215,164,180,253,137,237,95,151,178,145,222,146,178,158,222,83,242,125,41,103,211,7,82,78,166,191,74,25,160,
191,169,244,135,202,238,127,149,252,72,149,31,83,243,226,21,124,38,21,211,141,196,114,25,61,46,247,165,70,223,148,50,143,114,4,159,59,182,159,206,193,142,216,75,36,189,236,147,82,106,244,61,226,243,167,128,30,35,190,11,76,82,126,106,239,165,228,121,136,
215,37,234,68,44,107,86,7,210,20,149,207,231,25,199,110,46,15,115,172,83,229,21,170,254,156,180,250,23,162,60,166,202,253,100,159,153,124,222,29,84,245,175,130,188,89,149,243,57,255,59,28,132,71,235,237,187,192,135,245,118,94,30,202,75,128,174,202,171,
160,215,204,179,109,22,200,124,93,234,247,213,218,119,130,110,225,166,168,151,123,211,173,101,97,45,157,104,133,159,245,245,90,251,78,213,185,44,139,118,248,203,113,222,120,160,187,169,115,185,155,118,120,231,193,42,75,219,177,97,62,85,118,184,197,18,
225,36,203,203,35,246,201,62,27,234,25,135,213,125,173,10,179,22,245,142,201,17,113,251,220,183,151,106,237,59,128,47,175,161,112,210,137,45,7,22,80,165,238,129,207,148,160,101,142,243,110,97,249,167,99,13,60,34,79,156,104,189,80,90,87,255,214,39,170,
255,192,49,211,144,207,125,167,214,158,227,206,29,176,143,218,246,40,213,196,165,226,122,215,221,163,206,69,232,165,27,113,66,71,43,220,223,15,106,57,14,99,38,124,217,232,111,2,121,62,58,199,235,145,247,165,12,164,184,223,162,206,62,247,242,157,5,84,
165,121,96,151,129,218,157,241,108,234,108,200,65,95,151,195,202,131,25,105,26,207,243,183,32,246,143,91,156,9,11,183,190,17,151,208,141,211,5,253,87,231,94,210,141,5,231,77,166,77,113,140,87,47,34,159,126,14,180,164,125,103,34,27,253,174,197,136,60,
6,247,223,160,44,99,71,160,129,86,56,216,126,137,238,162,69,231,57,200,151,207,117,248,89,133,216,151,150,183,128,71,118,220,51,170,159,54,228,72,225,15,117,246,253,170,219,151,163,198,89,5,127,141,250,103,97,182,186,189,32,63,87,142,89,200,127,184,207,
214,217,239,254,81,47,223,194,114,82,249,43,83,249,1,153,175,169,27,106,91,157,237,127,157,222,92,233,15,236,13,252,220,206,58,251,142,218,233,207,69,31,249,38,140,113,86,122,209,235,201,120,114,78,202,174,251,148,118,165,210,46,7,30,202,35,233,129,221,
97,246,33,151,175,40,234,47,66,60,172,50,178,208,27,39,122,213,189,175,8,169,10,138,6,230,208,190,204,238,125,249,72,149,35,53,77,166,10,208,238,25,88,107,143,49,217,17,65,187,88,65,232,21,70,17,234,229,81,153,225,64,222,14,156,139,110,99,177,241,9,170,
112,115,154,207,207,174,3,62,104,67,52,70,231,220,82,8,173,31,103,135,229,31,144,159,131,56,103,171,208,102,212,43,207,77,163,128,166,46,155,79,51,4,223,206,44,191,129,158,119,114,159,28,216,111,126,7,113,139,46,60,213,167,91,222,97,213,147,63,147,111,
198,212,254,133,24,79,79,70,49,181,103,56,93,190,226,178,140,44,169,89,129,40,117,58,61,250,98,189,128,124,154,111,218,212,149,139,200,231,216,225,141,99,30,60,206,118,167,225,240,21,250,164,180,2,59,233,58,131,61,141,189,155,71,101,247,126,31,85,223,
153,109,84,191,7,142,130,119,193,79,1,7,115,221,144,119,242,241,159,93,103,210,63,149,62,254,199,46,231,123,93,17,118,35,127,127,196,247,12,77,175,190,73,204,188,81,212,94,47,180,154,91,197,236,91,4,169,72,129,119,72,229,51,29,126,159,220,179,134,140,
84,136,19,73,31,11,180,97,143,115,124,114,200,248,244,203,58,59,38,70,55,153,84,185,194,45,253,57,89,231,173,100,89,160,89,198,133,188,180,178,247,83,101,77,169,50,151,188,149,225,221,85,149,141,56,207,86,145,129,211,246,190,207,14,216,123,166,163,217,
71,69,154,124,7,209,150,160,36,71,230,68,3,173,100,136,234,191,142,143,167,48,96,183,197,239,168,93,24,83,142,234,3,255,148,6,236,88,237,243,230,166,246,204,244,64,114,207,20,200,62,37,243,231,168,252,77,222,66,249,124,77,237,189,250,128,253,30,104,121,
87,202,190,46,65,235,220,30,238,111,31,233,234,57,139,2,118,220,207,145,245,236,183,196,51,211,242,146,177,184,229,52,99,59,75,141,45,105,191,254,52,246,171,83,115,97,247,99,203,73,250,113,222,73,242,6,210,242,12,245,44,43,96,191,175,251,4,191,221,119,
7,52,178,165,78,91,235,17,247,222,221,26,112,209,214,128,83,229,102,194,143,177,146,222,173,1,246,232,107,16,181,183,6,50,176,43,39,161,87,184,169,137,188,212,249,246,201,128,125,190,158,124,12,157,203,113,203,223,184,129,140,179,171,63,96,255,208,165,
15,94,118,202,58,13,171,142,29,147,99,111,110,36,35,200,117,60,120,14,159,175,215,162,14,223,43,125,147,124,212,113,23,234,161,161,122,161,25,139,113,238,118,222,153,135,245,43,227,245,195,137,161,19,71,59,15,246,139,59,195,242,102,67,102,57,95,188,248,
24,205,17,252,221,65,245,209,142,59,57,246,228,114,57,98,134,151,165,97,121,243,88,58,92,119,140,100,240,91,172,184,166,250,23,167,179,107,183,237,190,127,58,187,245,182,29,191,84,9,67,126,23,193,115,192,107,194,119,30,254,142,36,19,41,158,203,199,2,
246,119,36,62,111,71,207,248,8,151,160,150,15,99,170,113,241,247,7,92,98,121,179,48,39,110,17,61,123,13,205,136,87,255,49,18,40,166,145,12,55,85,191,99,121,23,99,101,170,249,130,175,217,115,157,252,78,135,191,19,200,86,184,81,194,207,251,73,192,254,110,
192,39,82,207,211,240,60,212,204,21,75,92,153,120,78,38,250,230,214,124,83,231,205,115,81,164,185,132,70,246,187,69,245,81,203,235,230,72,171,45,214,222,62,150,212,45,255,8,158,225,150,253,139,110,64,191,116,95,94,245,207,237,53,231,103,189,31,176,191,
127,152,184,230,246,200,56,143,199,228,196,179,162,27,215,194,91,124,222,234,247,73,69,19,204,85,253,184,63,103,170,184,149,87,111,251,80,100,11,110,61,35,233,173,46,198,51,237,253,19,193,254,225,58,185,202,135,170,80,92,134,134,58,158,131,181,206,179,
43,116,57,187,34,87,88,242,126,226,206,100,143,201,161,44,215,139,123,217,99,254,36,103,167,250,15,29,63,242,65,242,42,79,145,171,203,167,167,219,193,171,12,233,116,61,199,222,128,91,78,94,245,145,211,91,174,183,45,159,58,189,229,58,88,90,94,62,167,221,
89,190,188,69,165,179,201,87,57,181,108,1,188,109,25,253,144,124,147,23,60,82,73,220,10,183,113,31,183,129,248,8,41,124,142,149,14,143,227,146,77,79,22,90,254,124,59,167,104,165,211,227,188,164,255,201,162,100,187,47,187,177,146,175,160,31,159,42,16,
124,193,255,234,222,87,221,34,99,137,187,132,254,209,17,204,162,254,99,233,253,249,87,122,194,45,85,255,236,159,239,65,187,234,193,244,255,119,15,218,101,15,120,111,218,223,18,178,111,113,12,172,83,146,247,41,127,63,17,151,190,167,201,251,210,77,245,
246,119,154,232,35,238,28,46,120,255,100,253,47,228,43,152,186,18,119,14,71,143,19,119,14,121,127,136,210,60,131,239,176,46,244,59,27,231,9,248,208,231,155,90,133,27,135,206,55,142,12,220,42,218,13,77,231,155,198,14,173,250,157,108,173,250,45,240,38,
120,131,253,61,15,125,227,239,6,61,28,109,181,154,162,217,37,122,117,245,204,154,218,217,105,177,254,59,105,123,67,87,185,63,172,183,239,223,139,53,23,241,140,108,135,69,14,249,154,171,255,198,227,83,239,13,245,246,119,66,124,127,227,155,246,100,237,
81,121,127,171,196,211,42,240,174,103,191,49,140,98,135,186,197,82,145,143,217,182,2,83,41,128,17,175,146,246,86,160,138,188,70,103,125,62,110,213,53,178,253,100,137,79,179,2,149,228,213,236,178,185,60,191,71,237,223,115,241,79,242,187,87,254,110,243,
131,108,26,255,18,85,253,120,142,75,151,29,151,230,250,5,164,222,209,208,59,161,242,24,191,146,25,170,220,167,206,248,201,42,191,66,73,77,225,87,243,53,135,22,201,252,185,42,127,46,45,84,82,200,24,42,212,63,7,141,223,39,52,229,27,201,123,132,173,187,
82,223,35,107,152,221,241,124,150,217,50,109,168,62,56,85,153,19,118,154,202,115,41,153,169,100,242,123,232,28,217,19,82,247,25,30,87,131,234,191,95,230,55,40,191,109,72,245,212,174,63,95,201,5,170,158,72,190,123,225,95,182,122,62,235,185,169,242,92,
217,63,77,89,36,199,87,156,234,135,221,182,87,61,207,159,178,180,199,229,87,214,130,236,247,113,81,77,120,127,115,54,133,172,80,226,12,210,206,104,164,162,21,145,161,104,196,50,173,196,6,211,140,109,14,153,163,181,219,130,35,65,18,45,164,181,180,146,
104,37,173,117,22,128,186,134,180,53,109,84,190,102,184,215,92,214,219,107,198,227,161,158,80,56,148,24,91,23,233,51,55,196,34,35,161,62,51,70,197,107,205,177,158,72,48,214,183,50,20,31,10,197,227,109,161,120,194,180,80,32,218,72,107,67,107,109,104,166,
173,141,244,54,36,240,177,134,63,218,168,168,45,104,245,197,34,161,190,186,96,52,90,183,172,55,17,26,65,203,141,52,127,98,126,52,26,14,245,6,19,161,136,53,45,105,211,22,234,55,123,199,122,195,230,138,96,56,220,19,236,221,30,111,164,73,167,170,149,94,
212,27,177,208,179,68,221,10,150,59,19,233,69,3,177,96,116,48,212,27,175,91,17,180,70,130,104,112,202,73,138,34,225,72,172,37,20,78,152,177,83,151,183,7,19,177,208,206,70,154,245,119,203,39,52,85,114,162,233,134,96,200,66,255,138,79,44,217,104,246,162,
32,63,85,16,137,215,45,31,182,250,194,102,35,21,164,103,182,46,15,89,125,220,250,120,27,35,88,234,58,44,214,170,17,147,27,159,60,177,160,61,194,211,165,202,102,77,44,99,39,153,182,222,106,137,244,14,199,87,12,6,173,1,51,185,200,233,93,73,153,166,15,41,
149,121,86,44,50,28,109,164,133,39,150,116,198,76,115,125,79,220,140,141,152,49,60,229,172,112,164,39,24,110,11,142,69,134,19,227,143,169,248,251,245,26,169,126,162,65,48,221,95,235,38,120,111,123,208,10,14,112,149,121,255,112,21,118,248,86,171,63,114,
66,255,79,83,39,185,73,26,169,118,98,189,144,21,29,78,12,153,137,193,72,95,221,242,96,28,141,35,13,191,180,176,188,210,107,167,159,218,126,85,95,40,17,137,217,221,153,125,106,179,19,154,156,123,26,219,118,169,167,102,231,204,182,222,200,80,93,108,40,
30,174,219,134,0,80,119,66,216,152,246,119,227,66,35,181,156,182,129,83,68,142,105,19,87,118,201,191,218,78,35,85,158,174,106,35,85,181,245,5,195,35,161,237,117,65,203,138,36,100,204,168,91,101,245,134,35,241,144,53,176,34,28,140,203,96,112,162,77,43,
38,54,166,202,43,79,82,222,110,14,245,40,3,19,38,229,39,49,233,8,13,88,193,196,112,204,228,13,195,49,184,46,140,189,85,135,29,22,235,48,119,12,155,86,47,74,242,210,75,236,199,85,165,101,181,134,195,230,64,48,108,47,195,170,157,189,102,212,94,236,105,
39,177,137,13,12,15,97,236,105,86,249,233,86,8,138,3,246,164,141,103,174,139,116,12,247,14,218,158,145,86,207,151,102,178,190,103,155,140,73,229,105,121,29,102,239,112,12,14,113,138,42,29,136,129,214,0,123,228,120,94,204,236,15,163,29,116,99,36,98,135,
238,206,96,108,192,76,239,237,228,147,152,219,93,107,164,66,187,108,56,17,10,215,45,139,197,130,99,236,4,141,148,155,150,205,57,228,61,46,3,239,184,157,91,55,172,34,79,186,207,145,216,76,218,230,86,114,108,110,197,15,212,53,228,220,188,166,181,165,101,
13,25,144,173,252,201,39,218,230,53,93,40,100,133,79,181,205,50,171,173,11,165,109,93,56,243,54,119,161,86,151,108,65,116,145,222,197,245,240,209,198,106,27,57,186,214,176,110,64,224,156,236,226,92,156,143,206,174,54,153,237,96,137,252,110,28,202,221,
173,228,235,62,209,11,242,187,79,178,8,110,59,32,77,11,4,2,41,189,62,77,159,151,166,55,164,233,243,211,244,5,105,250,194,52,125,81,154,190,24,122,150,173,183,132,131,3,113,202,158,16,9,169,32,120,146,136,75,206,160,12,69,92,147,101,91,176,199,12,83,70,
80,157,235,52,41,216,215,119,242,248,79,153,65,229,188,113,18,61,148,199,167,254,242,225,68,34,98,109,136,225,49,102,31,57,123,34,72,14,65,202,211,144,156,189,242,32,39,87,175,60,175,250,200,129,11,67,48,70,89,189,28,163,34,56,94,151,37,56,145,58,146,
41,71,38,58,99,65,43,222,31,137,13,81,54,95,23,112,14,199,165,53,26,178,111,13,104,40,50,140,116,105,111,204,12,38,78,140,127,28,151,201,232,11,245,247,147,48,201,97,242,129,74,254,126,156,198,39,53,141,47,31,235,228,86,51,217,66,30,176,228,232,151,194,
211,63,126,220,246,81,150,76,113,200,106,237,163,82,236,139,9,173,181,164,21,150,29,95,56,225,182,150,41,75,229,42,20,178,58,126,83,82,183,34,202,70,54,135,32,44,139,25,195,11,18,39,217,227,200,205,154,50,242,240,206,228,161,117,134,134,76,217,232,106,
51,52,48,152,160,124,168,242,52,73,239,18,103,182,169,93,189,222,234,192,204,153,150,172,100,239,94,202,133,42,103,25,1,83,78,174,103,60,3,213,93,72,109,12,142,110,73,42,91,41,139,149,72,36,193,237,147,23,137,142,49,56,202,80,7,118,111,168,215,164,28,
228,108,178,66,188,212,60,18,249,252,227,111,12,114,156,155,67,41,143,229,58,31,199,26,68,70,59,35,219,209,189,178,84,90,26,133,77,28,46,209,112,112,172,37,22,196,136,13,148,110,145,159,91,73,12,82,46,86,9,94,135,217,220,16,28,102,119,244,166,50,54,154,
113,56,110,42,103,121,202,115,41,219,206,193,225,181,50,50,138,77,145,74,110,138,82,65,42,33,15,182,213,161,190,62,244,73,61,166,61,130,103,200,58,19,50,98,193,129,100,155,50,3,205,168,54,229,117,146,242,85,194,140,177,127,43,39,200,24,12,198,109,183,
43,30,132,131,116,68,250,213,242,197,34,67,246,240,97,130,218,210,73,141,193,8,66,168,8,145,27,171,190,94,70,229,56,233,161,161,33,202,229,247,139,80,48,188,34,24,141,183,99,218,41,91,101,116,152,225,85,86,95,170,28,201,142,68,48,6,127,151,215,143,206,
177,168,73,30,169,158,107,95,69,40,3,15,219,28,12,15,99,11,135,112,20,108,55,241,176,120,171,21,79,4,113,28,162,52,190,62,26,196,217,72,147,66,241,206,8,206,166,85,59,163,216,182,210,181,86,89,65,172,83,31,218,142,171,53,35,215,118,115,108,5,247,167,
120,251,41,222,82,178,147,5,29,131,60,163,142,176,12,74,217,88,105,51,198,221,91,135,251,2,25,97,179,63,65,206,176,105,13,36,6,201,169,186,42,44,50,44,246,6,151,101,142,174,99,37,195,74,70,0,143,149,190,235,156,145,30,14,37,100,68,194,125,131,242,115,
148,242,34,86,242,141,102,133,12,37,216,39,227,89,43,205,120,34,22,25,99,199,25,207,84,206,149,86,51,233,93,165,227,89,29,193,17,51,57,95,152,235,132,153,110,47,39,127,98,19,29,137,72,52,138,172,98,132,0,217,143,227,46,142,232,188,5,223,26,165,236,72,
250,27,0,229,68,38,132,106,242,68,172,213,17,108,44,25,22,40,51,98,37,29,59,91,170,237,195,225,68,40,202,75,34,147,112,206,12,62,1,100,85,88,116,132,206,55,147,177,14,45,217,75,43,91,114,70,236,5,119,217,242,92,212,27,70,240,78,32,54,57,162,210,177,221,
209,96,12,150,50,24,100,71,39,184,183,35,42,131,119,121,52,18,29,14,159,50,92,139,24,185,98,246,59,37,85,197,204,1,246,141,216,169,95,55,169,44,102,14,97,168,246,240,215,91,199,157,85,142,152,140,132,122,220,76,80,78,156,99,102,234,101,143,60,72,203,
73,100,79,165,226,244,84,171,61,104,185,123,184,90,218,157,92,86,107,75,122,36,149,32,117,210,183,49,42,140,39,67,225,166,80,90,108,43,61,105,54,95,134,131,56,4,227,118,112,148,14,156,29,159,16,20,221,201,100,216,238,211,199,67,225,240,186,72,66,186,
131,39,142,13,147,12,80,168,136,84,42,122,192,152,29,205,238,23,174,122,40,134,151,141,39,75,226,118,111,90,199,159,165,70,106,200,227,197,72,12,134,226,228,228,207,105,1,37,235,145,203,135,141,142,150,160,242,68,100,12,39,250,23,203,8,47,70,200,49,34,
163,134,75,138,245,253,100,240,91,14,229,242,103,186,115,101,114,70,103,100,83,220,36,239,200,9,103,194,72,40,150,24,14,134,213,185,229,30,25,159,10,49,74,98,39,105,59,3,160,30,204,3,13,96,62,137,49,250,178,161,209,181,154,43,167,107,46,61,100,136,125,
208,182,233,244,140,40,121,173,201,239,32,58,100,104,151,105,156,73,223,55,196,21,194,149,115,84,167,171,196,236,185,123,180,11,202,29,244,146,147,232,37,67,223,167,197,70,96,241,182,38,8,237,52,209,123,26,185,106,186,117,237,29,145,125,185,46,222,20,
249,181,59,255,172,211,101,66,219,214,36,242,242,66,77,90,28,117,155,68,22,106,31,209,236,167,107,11,183,106,107,71,231,210,79,52,177,159,159,118,188,124,13,77,230,60,72,191,177,69,147,126,137,248,141,248,170,112,213,104,207,81,163,182,71,27,213,158,
18,163,59,181,87,47,120,101,143,208,28,238,101,115,155,106,155,154,206,232,214,233,34,247,133,186,216,37,22,52,221,93,169,235,63,16,1,81,92,24,152,162,107,223,21,154,200,43,118,104,218,217,232,137,67,56,116,167,91,155,115,208,225,118,146,83,56,53,167,
62,123,182,54,82,227,208,102,107,241,26,90,100,247,96,145,182,95,187,73,42,6,43,55,107,183,76,204,77,41,142,100,241,1,78,30,224,30,95,81,70,35,16,107,233,29,93,187,81,187,85,14,200,64,6,237,225,25,163,215,117,254,220,103,104,137,243,33,63,99,136,4,196,
7,58,11,212,188,93,166,175,44,163,61,202,224,102,219,224,18,91,220,162,139,55,132,171,124,237,218,185,93,107,187,186,233,34,113,129,172,245,136,174,93,173,61,128,5,187,178,116,46,253,143,16,187,121,178,74,62,210,182,151,175,213,51,98,90,155,238,188,92,
211,181,172,65,145,159,171,141,150,227,211,207,218,206,114,250,156,166,29,98,235,242,221,154,175,92,139,150,107,185,141,218,240,193,115,180,177,53,244,93,77,63,36,62,37,11,181,236,79,107,35,229,55,116,111,219,13,127,208,180,46,122,76,85,203,217,237,47,
187,129,190,162,59,46,252,158,184,66,59,42,198,208,197,123,116,227,6,237,110,241,188,248,17,202,151,238,238,162,27,133,109,170,125,151,202,181,71,46,66,151,50,185,75,46,238,210,183,105,171,214,92,131,206,4,108,188,109,122,214,97,161,45,109,210,61,111,
137,133,75,133,208,221,15,9,109,174,40,203,62,211,225,118,120,234,29,89,219,156,238,90,145,95,164,93,208,216,228,244,44,21,229,133,156,63,49,83,107,17,229,57,244,61,93,92,143,185,247,235,226,82,45,32,124,69,154,167,70,27,42,175,208,233,211,98,238,20,
7,73,101,206,84,7,189,26,152,77,223,209,197,211,232,34,253,86,23,163,174,156,80,25,93,174,137,43,81,249,144,78,15,139,242,218,109,107,119,158,55,105,55,105,149,226,106,173,196,175,85,105,150,225,59,44,138,179,181,105,200,40,115,21,139,226,230,226,204,
226,149,197,90,241,236,98,195,182,170,144,86,26,172,206,74,217,231,104,83,217,94,148,76,177,21,173,164,188,164,130,52,97,184,175,241,11,223,180,139,119,25,7,203,166,139,67,101,66,236,41,23,226,32,216,51,5,197,194,163,137,107,252,179,118,237,50,30,158,
50,91,28,153,66,186,147,114,184,134,240,205,65,157,59,252,98,143,255,89,254,120,131,63,118,85,10,109,63,120,162,146,156,197,165,121,62,248,190,207,254,87,15,227,55,42,97,242,224,116,124,28,230,143,215,249,99,215,12,124,28,224,143,135,103,24,151,104,36,
0,75,151,210,255,17,10,128,27,44,22,47,204,16,226,210,153,66,220,49,83,23,15,206,44,20,135,161,191,14,246,84,11,113,0,220,15,94,1,215,204,194,16,193,195,224,48,235,179,133,120,25,92,53,71,136,119,107,96,51,23,249,181,194,216,83,39,140,3,117,66,60,91,
231,16,251,231,195,110,129,38,30,6,71,22,216,223,45,167,255,158,128,101,242,239,106,248,59,232,228,223,214,240,119,211,201,191,175,73,254,158,147,255,198,134,191,151,78,254,157,141,147,198,255,214,70,247,218,101,252,123,8,225,183,127,191,51,45,7,54,126,
219,134,255,207,153,240,218,191,215,225,255,103,166,249,237,231,242,223,230,232,202,158,255,175,151,225,183,127,191,192,255,39,140,84,93,249,127,213,188,118,95,249,239,128,254,15,99,173,117,218,64,52,0,0,0,0 };

//==============================================================================
#if JUCE_PUSH_NOTIFICATIONS && JUCE_MODULE_AVAILABLE_juce_gui_extra
 extern bool juce_handleNotificationIntent (void*);
 extern void juce_firebaseDeviceNotificationsTokenRefreshed (void*);
 extern void juce_firebaseRemoteNotificationReceived (void*);
 extern void juce_firebaseRemoteMessagesDeleted();
 extern void juce_firebaseRemoteMessageSent(void*);
 extern void juce_firebaseRemoteMessageSendError (void*, void*);
#endif

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create, "<init>", "(II)V")

DECLARE_JNI_CLASS (AndroidLayoutParams, "android/view/ViewGroup$LayoutParams")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (addView,          "addView",             "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V") \
 METHOD (removeView,       "removeView",          "(Landroid/view/View;)V") \
 METHOD (updateViewLayout, "updateViewLayout",    "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V")

DECLARE_JNI_CLASS (AndroidViewManager, "android/view/ViewManager")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,           "<init>",             "(IIIIIII)V") \
 FIELD  (gravity,          "gravity",            "I") \
 FIELD  (windowAnimations, "windowAnimations",   "I")

DECLARE_JNI_CLASS (AndroidWindowManagerLayoutParams, "android/view/WindowManager$LayoutParams")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getDisplayCutout,     "getDisplayCutout", "()Landroid/view/DisplayCutout;")

 DECLARE_JNI_CLASS_WITH_MIN_SDK (AndroidWindowInsets, "android/view/WindowInsets", 28)
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getSafeInsetBottom, "getSafeInsetBottom", "()I") \
 METHOD (getSafeInsetLeft,   "getSafeInsetLeft",   "()I") \
 METHOD (getSafeInsetRight,  "getSafeInsetRight",  "()I") \
 METHOD (getSafeInsetTop,    "getSafeInsetTop",    "()I")

 DECLARE_JNI_CLASS_WITH_MIN_SDK (AndroidDisplayCutout, "android/view/DisplayCutout", 28)
#undef JNI_CLASS_MEMBERS

//==============================================================================
namespace
{
    enum
    {
        SYSTEM_UI_FLAG_VISIBLE = 0,
        SYSTEM_UI_FLAG_LOW_PROFILE = 1,
        SYSTEM_UI_FLAG_HIDE_NAVIGATION = 2,
        SYSTEM_UI_FLAG_FULLSCREEN = 4,
        SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION = 512,
        SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN = 1024,
        SYSTEM_UI_FLAG_IMMERSIVE = 2048,
        SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 4096
    };

    constexpr int fullScreenFlags = SYSTEM_UI_FLAG_HIDE_NAVIGATION | SYSTEM_UI_FLAG_FULLSCREEN | SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
    constexpr int FLAG_NOT_FOCUSABLE = 0x8;
}

//==============================================================================
static bool supportsDisplayCutout()
{
    return getAndroidSDKVersion() >= 28;
}

static BorderSize<int> androidDisplayCutoutToBorderSize (LocalRef<jobject> displayCutout, double displayScale)
{
    if (displayCutout.get() == nullptr)
        return {};

    auto* env = getEnv();

    auto getInset = [&] (jmethodID methodID)
    {
        return roundToInt (env->CallIntMethod (displayCutout.get(), methodID) / displayScale);
    };

    return { getInset (AndroidDisplayCutout.getSafeInsetTop),
             getInset (AndroidDisplayCutout.getSafeInsetLeft),
             getInset (AndroidDisplayCutout.getSafeInsetBottom),
             getInset (AndroidDisplayCutout.getSafeInsetRight) };
}

//==============================================================================
class AndroidComponentPeer  : public ComponentPeer,
                              private Timer
{
public:
    AndroidComponentPeer (Component& comp, int windowStyleFlags, void* nativeViewHandle)
        : ComponentPeer (comp, windowStyleFlags)
    {
        auto* env = getEnv();

        // NB: must not put this in the initialiser list, as it invokes a callback,
        // which will fail if the peer is only half-constructed.
        view = GlobalRef (LocalRef<jobject> (env->NewObject (ComponentPeerView, ComponentPeerView.create,
                                                             getAppContext().get(), (jboolean) component.isOpaque(),
                                                             (jlong) this)));

        if (nativeViewHandle != nullptr)
        {
            viewGroupIsWindow = false;

            // we don't know if the user is holding on to a local ref to this, so
            // explicitly create a new one
            auto nativeView = LocalRef<jobject> (env->NewLocalRef (static_cast<jobject> (nativeViewHandle)));

            if (env->IsInstanceOf (nativeView.get(), AndroidActivity))
            {
                viewGroup = GlobalRef (nativeView);
                env->CallVoidMethod (viewGroup.get(), AndroidActivity.setContentView, view.get());
            }
            else if (env->IsInstanceOf (nativeView.get(), AndroidViewGroup))
            {
                viewGroup = GlobalRef (nativeView);
                LocalRef<jobject> layoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));

                env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, layoutParams.get());
                env->CallVoidMethod ((jobject) viewGroup.get(), AndroidViewGroup.addView, view.get());
            }
            else
            {
                // the native handle you passed as a second argument to Component::addToDesktop must
                // either be an Activity or a ViewGroup
                jassertfalse;
            }
        }
        else
        {
            viewGroupIsWindow = true;

            LocalRef<jobject> viewLayoutParams (env->NewObject (AndroidLayoutParams, AndroidLayoutParams.create, -2, -2));
            env->CallVoidMethod (view.get(), AndroidView.setLayoutParams, viewLayoutParams.get());

            auto physicalBounds = (comp.getBoundsInParent().toFloat() * scale).toNearestInt();

            view.callVoidMethod (AndroidView.layout,
                                 physicalBounds.getX(), physicalBounds.getY(), physicalBounds.getRight(), physicalBounds.getBottom());

            LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                  physicalBounds.getWidth(), physicalBounds.getHeight(),
                                                                  physicalBounds.getX(), physicalBounds.getY(),
                                                                  TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN | FLAG_NOT_FOCUSABLE,
                                                                  component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));

            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, GRAVITY_LEFT | GRAVITY_TOP);
            env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.windowAnimations, 0x01030000 /* android.R.style.Animation */);

            if (supportsDisplayCutout())
            {
                jfieldID layoutInDisplayCutoutModeFieldId = env->GetFieldID (AndroidWindowManagerLayoutParams,
                                                                             "layoutInDisplayCutoutMode",
                                                                             "I");

                if (layoutInDisplayCutoutModeFieldId != nullptr)
                    env->SetIntField (windowLayoutParams.get(),
                                      layoutInDisplayCutoutModeFieldId,
                                      LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS);
            }

            if (Desktop::getInstance().getKioskModeComponent() != nullptr)
                setNavBarsHidden (true);

            LocalRef<jobject> activity (getCurrentActivity());

            if (activity == nullptr)
                activity = getMainActivity();

            viewGroup = GlobalRef (LocalRef<jobject> (env->CallObjectMethod (activity.get(), AndroidContext.getSystemService, javaString ("window").get())));
            env->CallVoidMethod (viewGroup.get(), AndroidViewManager.addView, view.get(), windowLayoutParams.get());
        }

        if (supportsDisplayCutout())
        {
            jmethodID setOnApplyWindowInsetsListenerMethodId = env->GetMethodID (AndroidView,
                                                                                 "setOnApplyWindowInsetsListener",
                                                                                 "(Landroid/view/View$OnApplyWindowInsetsListener;)V");

            if (setOnApplyWindowInsetsListenerMethodId != nullptr)
                env->CallVoidMethod (view.get(), setOnApplyWindowInsetsListenerMethodId,
                                     CreateJavaInterface (new ViewWindowInsetsListener,
                                                          "android/view/View$OnApplyWindowInsetsListener").get());
        }

        if (isFocused())
            handleFocusGain();
    }

    ~AndroidComponentPeer() override
    {
        stopTimer();

        auto* env = getEnv();

        env->CallVoidMethod (view, ComponentPeerView.clear);
        frontWindow = nullptr;

        GlobalRef localView (view);
        GlobalRef localViewGroup (viewGroup);

        callOnMessageThread ([env, localView, localViewGroup]
        {
            if (env->IsInstanceOf (localViewGroup.get(), AndroidActivity))
                env->CallVoidMethod (localViewGroup.get(), AndroidActivity.setContentView, nullptr);
            else
                env->CallVoidMethod (localViewGroup.get(), AndroidViewManager.removeView, localView.get());
        });
    }

    void* getNativeHandle() const override
    {
        return (void*) view.get();
    }

    void setVisible (bool shouldBeVisible) override
    {
        GlobalRef localView (view);

        callOnMessageThread ([localView, shouldBeVisible]
        {
            localView.callVoidMethod (ComponentPeerView.setVisible, shouldBeVisible);
        });
    }

    void setTitle (const String& title) override
    {
        view.callVoidMethod (ComponentPeerView.setViewName, javaString (title).get());
    }

    void setBounds (const Rectangle<int>& userRect, bool isNowFullScreen) override
    {
        auto bounds = (userRect.toFloat() * scale).toNearestInt();

        if (MessageManager::getInstance()->isThisTheMessageThread())
        {
            fullScreen = isNowFullScreen;

            view.callVoidMethod (AndroidView.layout,
                                 bounds.getX(), bounds.getY(), bounds.getRight(), bounds.getBottom());

            if (viewGroup != nullptr && viewGroupIsWindow)
            {
                auto* env = getEnv();

                LocalRef<jobject> windowLayoutParams (env->NewObject (AndroidWindowManagerLayoutParams, AndroidWindowManagerLayoutParams.create,
                                                                      bounds.getWidth(), bounds.getHeight(), bounds.getX(), bounds.getY(),
                                                                      TYPE_APPLICATION, FLAG_NOT_TOUCH_MODAL | FLAG_LAYOUT_IN_SCREEN,
                                                                      component.isOpaque() ? PIXEL_FORMAT_OPAQUE : PIXEL_FORMAT_TRANSPARENT));

                env->SetIntField (windowLayoutParams.get(), AndroidWindowManagerLayoutParams.gravity, GRAVITY_LEFT | GRAVITY_TOP);
                env->CallVoidMethod (viewGroup.get(), AndroidViewManager.updateViewLayout, view.get(), windowLayoutParams.get());
            }
        }
        else
        {
            GlobalRef localView (view);

            MessageManager::callAsync ([localView, bounds]
            {
                localView.callVoidMethod (AndroidView.layout,
                                          bounds.getX(), bounds.getY(), bounds.getRight(), bounds.getBottom());
            });
        }
    }

    Rectangle<int> getBounds() const override
    {
        Rectangle<int> bounds (view.callIntMethod (AndroidView.getLeft),
                               view.callIntMethod (AndroidView.getTop),
                               view.callIntMethod (AndroidView.getWidth),
                               view.callIntMethod (AndroidView.getHeight));

        return (bounds.toFloat() / scale).toNearestInt();
    }

    void handleScreenSizeChange() override
    {
        ComponentPeer::handleScreenSizeChange();

        if (isFullScreen())
            setFullScreen (true);
    }

    Point<int> getScreenPosition() const
    {
        auto* env = getEnv();

        LocalRef<jintArray> position (env->NewIntArray (2));
        env->CallVoidMethod (view.get(), AndroidView.getLocationOnScreen, position.get());

        jint* const screenPosition = env->GetIntArrayElements (position.get(), nullptr);
        Point<int> pos (screenPosition[0], screenPosition[1]);
        env->ReleaseIntArrayElements (position.get(), screenPosition, 0);

        return pos;
    }

    Point<float> localToGlobal (Point<float> relativePosition) override
    {
        return relativePosition + (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::localToGlobal;

    Point<float> globalToLocal (Point<float> screenPosition) override
    {
        return screenPosition - (getScreenPosition().toFloat() / scale);
    }

    using ComponentPeer::globalToLocal;

    void setMinimised (bool /*shouldBeMinimised*/) override
    {
        // n/a
    }

    bool isMinimised() const override
    {
        return false;
    }

    void setFullScreen (bool shouldBeFullScreen) override
    {
        if (shouldNavBarsBeHidden (shouldBeFullScreen))
        {
            if (isTimerRunning())
                return;

            startTimer (500);
        }
        else
        {
            setNavBarsHidden (false);
        }

        auto newBounds = [&]
        {
            if (navBarsHidden || shouldBeFullScreen)
                if (auto* display = Desktop::getInstance().getDisplays().getPrimaryDisplay())
                    return navBarsHidden ? display->totalArea
                                         : display->userArea;

            return lastNonFullscreenBounds.isEmpty() ? getBounds() : lastNonFullscreenBounds;
        }();

        if (! newBounds.isEmpty())
            setBounds (newBounds, shouldBeFullScreen);

        component.repaint();
    }

    bool isFullScreen() const override
    {
        return fullScreen;
    }

    void setIcon (const Image& /*newIcon*/) override
    {
        // n/a
    }

    bool contains (Point<int> localPos, bool trueIfInAChildWindow) const override
    {
        return isPositiveAndBelow (localPos.x, component.getWidth())
            && isPositiveAndBelow (localPos.y, component.getHeight())
            && ((! trueIfInAChildWindow) || view.callBooleanMethod (ComponentPeerView.containsPoint,
                                                                    (float) localPos.x * scale,
                                                                    (float) localPos.y * scale));
    }

    BorderSize<int> getFrameSize() const override
    {
        // TODO
        return {};
    }

    bool setAlwaysOnTop (bool /*alwaysOnTop*/) override
    {
        // TODO
        return false;
    }

    void toFront (bool makeActive) override
    {
        // Avoid calling bringToFront excessively: it's very slow
        if (frontWindow != this)
        {
            view.callVoidMethod (AndroidView.bringToFront);
            frontWindow = this;
        }

        if (makeActive)
            grabFocus();

        handleBroughtToFront();
    }

    void toBehind (ComponentPeer*) override
    {
        // TODO
    }

    //==============================================================================
    void handleMouseDownCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        // this forces a mouse-enter/up event, in case for some reason we didn't get a mouse-up before.
        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons(),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);

        if (isValidPeer (this))
            handleMouseDragCallback (index, sysPos, time);
    }

    void handleMouseDragCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown | (1 << (index & 63)));

        ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier);

        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons().withFlags (ModifierKeys::leftButtonModifier),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);
    }

    void handleMouseUpCallback (int index, Point<float> sysPos, int64 time)
    {
        lastMousePos = sysPos / scale;
        auto pos = globalToLocal (lastMousePos);

        jassert (index < 64);
        touchesDown = (touchesDown & ~(1 << (index & 63)));

        if (touchesDown == 0)
            ModifierKeys::currentModifiers = ModifierKeys::currentModifiers.withoutMouseButtons();

        handleMouseEvent (MouseInputSource::InputSourceType::touch,
                          pos,
                          ModifierKeys::currentModifiers.withoutMouseButtons(),
                          MouseInputSource::invalidPressure,
                          MouseInputSource::invalidOrientation,
                          time,
                          {},
                          index);
    }

    void handleKeyDownCallback (int k, int kc)
    {
        handleKeyPress (k, static_cast<juce_wchar> (kc));
    }

    void handleKeyUpCallback (int /*k*/, int /*kc*/)
    {
    }

    void handleBackButtonCallback()
    {
        bool handled = false;

        if (auto* app = JUCEApplicationBase::getInstance())
            handled = app->backButtonPressed();

        if (isKioskModeComponent())
            setNavBarsHidden (navBarsHidden);

        if (! handled)
        {
            auto* env = getEnv();
            LocalRef<jobject> activity (getCurrentActivity());

            if (activity != nullptr)
            {
                jmethodID finishMethod = env->GetMethodID (AndroidActivity, "finish", "()V");

                if (finishMethod != nullptr)
                    env->CallVoidMethod (activity.get(), finishMethod);
            }
        }
    }

    void handleKeyboardHiddenCallback()
    {
        Component::unfocusAllComponents();
    }

    void handleAppPausedCallback() {}

    void handleAppResumedCallback()
    {
        if (isKioskModeComponent())
            setNavBarsHidden (navBarsHidden);
    }

    //==============================================================================
    AccessibilityNativeHandle* getNativeHandleForViewId (jint virtualViewId) const
    {
        if (auto* handler = (virtualViewId == HOST_VIEW_ID
                                 ? component.getAccessibilityHandler()
                                 : AccessibilityNativeHandle::getAccessibilityHandlerForVirtualViewId (virtualViewId)))
        {
            return handler->getNativeImplementation();
        }

        return nullptr;
    }

    jboolean populateAccessibilityNodeInfoCallback (jint virtualViewId, jobject info) const
    {
        if (auto* handle = getNativeHandleForViewId (virtualViewId))
        {
            handle->populateNodeInfo (info);
            return true;
        }

        return false;
    }

    jboolean handlePerformActionCallback (jint virtualViewId, jint action, jobject arguments) const
    {
        if (auto* handle = getNativeHandleForViewId (virtualViewId))
            return handle->performAction (action, arguments);

        return false;
    }

    static jobject getFocusViewIdForHandler (const AccessibilityHandler* handler)
    {
        if (handler != nullptr)
            return getEnv()->NewObject (JavaInteger,
                                        JavaInteger.constructor,
                                        handler->getNativeImplementation()->getVirtualViewId());

        return nullptr;
    }

    jobject getInputFocusViewIdCallback()
    {
        if (auto* comp = dynamic_cast<Component*> (findCurrentTextInputTarget()))
            return getFocusViewIdForHandler (comp->getAccessibilityHandler());

        return nullptr;
    }

    jobject getAccessibilityFocusViewIdCallback() const
    {
        if (auto* handler = component.getAccessibilityHandler())
        {
            if (auto* modal = Component::getCurrentlyModalComponent())
            {
                if (! component.isParentOf (modal)
                     && component.isCurrentlyBlockedByAnotherModalComponent())
                {
                    if (auto* modalHandler = modal->getAccessibilityHandler())
                    {
                        if (auto* focusChild = modalHandler->getChildFocus())
                            return getFocusViewIdForHandler (focusChild);

                        return getFocusViewIdForHandler (modalHandler);
                    }
                }
            }

            if (auto* focusChild = handler->getChildFocus())
                return getFocusViewIdForHandler (focusChild);
        }

        return nullptr;
    }

    //==============================================================================
    bool isFocused() const override
    {
        if (view != nullptr)
            return view.callBooleanMethod (AndroidView.hasFocus);

        return false;
    }

    void grabFocus() override
    {
        if (view != nullptr)
            view.callBooleanMethod (AndroidView.requestFocus);
    }

    void handleFocusChangeCallback (bool hasFocus)
    {
        if (isFullScreen())
            setFullScreen (true);

        if (hasFocus)
            handleFocusGain();
        else
            handleFocusLoss();
    }

    static const char* getVirtualKeyboardType (TextInputTarget::VirtualKeyboardType type) noexcept
    {
        switch (type)
        {
            case TextInputTarget::textKeyboard:          return "text";
            case TextInputTarget::numericKeyboard:       return "number";
            case TextInputTarget::decimalKeyboard:       return "numberDecimal";
            case TextInputTarget::urlKeyboard:           return "textUri";
            case TextInputTarget::emailAddressKeyboard:  return "textEmailAddress";
            case TextInputTarget::phoneNumberKeyboard:   return "phone";
            default:                                     jassertfalse; break;
        }

        return "text";
    }

    void textInputRequired (Point<int>, TextInputTarget& target) override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard,
                             javaString (getVirtualKeyboardType (target.getKeyboardType())).get());
    }

    void dismissPendingTextInput() override
    {
        view.callVoidMethod (ComponentPeerView.showKeyboard, javaString ("").get());

        if (! isTimerRunning())
            startTimer (500);
     }

    //==============================================================================
    void handlePaintCallback (jobject canvas, jobject paint)
    {
        auto* env = getEnv();

        jobject rect = env->CallObjectMethod (canvas, AndroidCanvas.getClipBounds);
        auto left   = env->GetIntField (rect, AndroidRect.left);
        auto top    = env->GetIntField (rect, AndroidRect.top);
        auto right  = env->GetIntField (rect, AndroidRect.right);
        auto bottom = env->GetIntField (rect, AndroidRect.bottom);
        env->DeleteLocalRef (rect);

        auto clip = Rectangle<int>::leftTopRightBottom (left, top, right, bottom);

        if (clip.isEmpty())
            return;

        auto sizeNeeded = clip.getWidth() * clip.getHeight();

        if (sizeAllocated < sizeNeeded)
        {
            buffer.clear();
            sizeAllocated = sizeNeeded;
            buffer = GlobalRef (LocalRef<jobject> ((jobject) env->NewIntArray (sizeNeeded)));
        }

        if (jint* dest = env->GetIntArrayElements ((jintArray) buffer.get(), nullptr))
        {
            {
                Image temp (new PreallocatedImage (clip.getWidth(), clip.getHeight(),
                                                   dest, ! component.isOpaque()));

                {
                    LowLevelGraphicsSoftwareRenderer g (temp);
                    g.setOrigin (-clip.getPosition());
                    g.addTransform (AffineTransform::scale (scale));
                    handlePaint (g);
                }
            }

            env->ReleaseIntArrayElements ((jintArray) buffer.get(), dest, 0);

            env->CallVoidMethod (canvas, AndroidCanvas.drawBitmap, (jintArray) buffer.get(), 0, clip.getWidth(),
                                 (jfloat) clip.getX(), (jfloat) clip.getY(),
                                 clip.getWidth(), clip.getHeight(), true, paint);
        }
    }

    void repaint (const Rectangle<int>& userArea) override
    {
        auto area = (userArea.toFloat() * scale).toNearestInt();

        GlobalRef localView (view);

        callOnMessageThread ([area, localView]
        {
            localView.callVoidMethod (AndroidView.invalidate,
                                      area.getX(), area.getY(), area.getRight(), area.getBottom());
        });
    }

    void performAnyPendingRepaintsNow() override
    {
        // TODO
    }

    void setAlpha (float /*newAlpha*/) override
    {
        // TODO
    }

    StringArray getAvailableRenderingEngines() override
    {
        return StringArray ("Software Renderer");
    }

    //==============================================================================
    static Point<float> lastMousePos;
    static int64 touchesDown;

    //==============================================================================
    struct StartupActivityCallbackListener  : public ActivityLifecycleCallbacks
    {
        void onActivityStarted (jobject /*activity*/) override
        {
            auto* env = getEnv();
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {
                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.unregisterActivityLifecycleCallbacks,
                                     activityCallbackListener.get());
                clear();
                activityCallbackListener.clear();

                forceDisplayUpdate();
            }
        }
    };

private:
    //==============================================================================
    #define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
     METHOD   (create,                           "<init>",                        "(Landroid/content/Context;ZJ)V") \
     METHOD   (clear,                            "clear",                         "()V") \
     METHOD   (setViewName,                      "setViewName",                   "(Ljava/lang/String;)V") \
     METHOD   (setVisible,                       "setVisible",                    "(Z)V") \
     METHOD   (isVisible,                        "isVisible",                     "()Z") \
     METHOD   (containsPoint,                    "containsPoint",                 "(II)Z") \
     METHOD   (showKeyboard,                     "showKeyboard",                  "(Ljava/lang/String;)V") \
     METHOD   (setSystemUiVisibilityCompat,      "setSystemUiVisibilityCompat",   "(I)V") \
     CALLBACK (handlePaintJni,                   "handlePaint",                   "(JLandroid/graphics/Canvas;Landroid/graphics/Paint;)V") \
     CALLBACK (handleMouseDownJni,               "handleMouseDown",               "(JIFFJ)V") \
     CALLBACK (handleMouseDragJni,               "handleMouseDrag",               "(JIFFJ)V") \
     CALLBACK (handleMouseUpJni,                 "handleMouseUp",                 "(JIFFJ)V") \
     CALLBACK (handleKeyDownJni,                 "handleKeyDown",                 "(JII)V") \
     CALLBACK (handleKeyUpJni,                   "handleKeyUp",                   "(JII)V") \
     CALLBACK (handleBackButtonJni,              "handleBackButton",              "(J)V") \
     CALLBACK (handleKeyboardHiddenJni,          "handleKeyboardHidden",          "(J)V") \
     CALLBACK (viewSizeChangedJni,               "viewSizeChanged",               "(J)V") \
     CALLBACK (focusChangedJni,                  "focusChanged",                  "(JZ)V") \
     CALLBACK (handleAppPausedJni,               "handleAppPaused",               "(J)V") \
     CALLBACK (handleAppResumedJni,              "handleAppResumed",              "(J)V") \
     CALLBACK (populateAccessibilityNodeInfoJni, "populateAccessibilityNodeInfo", "(JILandroid/view/accessibility/AccessibilityNodeInfo;)Z") \
     CALLBACK (handlePerformActionJni,           "handlePerformAction",           "(JIILandroid/os/Bundle;)Z") \
     CALLBACK (getInputFocusViewIdJni,           "getInputFocusViewId",           "(J)Ljava/lang/Integer;") \
     CALLBACK (getAccessibilityFocusViewIdJni,   "getAccessibilityFocusViewId",   "(J)Ljava/lang/Integer;") \

    DECLARE_JNI_CLASS_WITH_BYTECODE (ComponentPeerView, "com/rmsl/juce/ComponentPeerView", 23, javaComponentPeerView, sizeof (javaComponentPeerView))
//    DECLARE_JNI_CLASS_WITH_MIN_SDK (ComponentPeerView, "com/rmsl/juce/ComponentPeerView", 16)    
    #undef JNI_CLASS_MEMBERS

    static void JNICALL handlePaintJni          (JNIEnv*, jobject /*view*/, jlong host, jobject canvas, jobject paint)           { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handlePaintCallback (canvas, paint); }
    static void JNICALL handleMouseDownJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDownCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseDragJni      (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseDragCallback (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL handleMouseUpJni        (JNIEnv*, jobject /*view*/, jlong host, jint i, jfloat x, jfloat y, jlong time)  { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMouseUpCallback   (i, Point<float> ((float) x, (float) y), (int64) time); }
    static void JNICALL viewSizeChangedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleMovedOrResized(); }
    static void JNICALL focusChangedJni         (JNIEnv*, jobject /*view*/, jlong host, jboolean hasFocus)                       { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleFocusChangeCallback (hasFocus); }
    static void JNICALL handleKeyDownJni        (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyDownCallback ((int) k, (int) kc); }
    static void JNICALL handleKeyUpJni          (JNIEnv*, jobject /*view*/, jlong host, jint k, jint kc)                         { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyUpCallback ((int) k, (int) kc); }
    static void JNICALL handleBackButtonJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleBackButtonCallback(); }
    static void JNICALL handleKeyboardHiddenJni (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleKeyboardHiddenCallback(); }
    static void JNICALL handleAppPausedJni      (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppPausedCallback(); }
    static void JNICALL handleAppResumedJni     (JNIEnv*, jobject /*view*/, jlong host)                                          { if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host)) myself->handleAppResumedCallback(); }

    static jboolean JNICALL populateAccessibilityNodeInfoJni (JNIEnv*, jobject /*view*/, jlong host, jint virtualViewId, jobject info)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->populateAccessibilityNodeInfoCallback (virtualViewId, info);

        return false;
    }

    static jboolean JNICALL handlePerformActionJni (JNIEnv*, jobject /*view*/, jlong host, jint virtualViewId, jint action, jobject arguments)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->handlePerformActionCallback (virtualViewId, action, arguments);

        return false;
    }

    static jobject JNICALL getInputFocusViewIdJni (JNIEnv*, jobject /*view*/, jlong host)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->getInputFocusViewIdCallback();

        return nullptr;
    }

    static jobject JNICALL getAccessibilityFocusViewIdJni (JNIEnv*, jobject /*view*/, jlong host)
    {
        if (auto* myself = reinterpret_cast<AndroidComponentPeer*> (host))
            return myself->getAccessibilityFocusViewIdCallback();

        return nullptr;
    }

    //==============================================================================
    struct ViewWindowInsetsListener  : public juce::AndroidInterfaceImplementer
    {
        jobject onApplyWindowInsets (LocalRef<jobject> v, LocalRef<jobject> insets)
        {
            auto* env = getEnv();

            LocalRef<jobject> displayCutout (env->CallObjectMethod (insets.get(), AndroidWindowInsets.getDisplayCutout));

            if (displayCutout != nullptr)
            {
                const auto& mainDisplay = *Desktop::getInstance().getDisplays().getPrimaryDisplay();
                auto newSafeAreaInsets = androidDisplayCutoutToBorderSize (displayCutout, mainDisplay.scale);

                if (newSafeAreaInsets != mainDisplay.safeAreaInsets)
                    forceDisplayUpdate();

                auto* fieldId = env->GetStaticFieldID (AndroidWindowInsets, "CONSUMED", "Landroid/view/WindowInsets");
                jassert (fieldId != nullptr);

                return env->GetStaticObjectField (AndroidWindowInsets, fieldId);
            }

            jmethodID onApplyWindowInsetsMethodId = env->GetMethodID (AndroidView,
                                                                      "onApplyWindowInsets",
                                                                      "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;");

            jassert (onApplyWindowInsetsMethodId != nullptr);

            return env->CallObjectMethod (v.get(), onApplyWindowInsetsMethodId, insets.get());
        }

    private:
        jobject invoke (jobject proxy, jobject method, jobjectArray args) override
        {
            auto* env = getEnv();
            auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

            if (methodName == "onApplyWindowInsets")
            {
                jassert (env->GetArrayLength (args) == 2);

                LocalRef<jobject> windowView (env->GetObjectArrayElement (args, 0));
                LocalRef<jobject> insets     (env->GetObjectArrayElement (args, 1));

                return onApplyWindowInsets (std::move (windowView), std::move (insets));
            }

            // invoke base class
            return AndroidInterfaceImplementer::invoke (proxy, method, args);
        }
    };

    //==============================================================================
    struct PreallocatedImage  : public ImagePixelData
    {
        PreallocatedImage (int width_, int height_, jint* data_, bool hasAlpha_)
            : ImagePixelData (Image::ARGB, width_, height_), data (data_), hasAlpha (hasAlpha_)
        {
            if (hasAlpha_)
                zeromem (data_, static_cast<size_t> (width * height) * sizeof (jint));
        }

        ~PreallocatedImage() override
        {
            if (hasAlpha)
            {
                auto pix = (PixelARGB*) data;

                for (int i = width * height; --i >= 0;)
                {
                    pix->unpremultiply();
                    ++pix;
                }
            }
        }

        std::unique_ptr<ImageType> createType() const override
        {
            return std::make_unique<SoftwareImageType>();
        }

        std::unique_ptr<LowLevelGraphicsContext> createLowLevelContext() override
        {
            return std::make_unique<LowLevelGraphicsSoftwareRenderer> (Image (this));
        }

        void initialiseBitmapData (Image::BitmapData& bm, int x, int y, Image::BitmapData::ReadWriteMode /*mode*/) override
        {
            bm.lineStride = width * static_cast<int> (sizeof (jint));
            bm.pixelStride = static_cast<int> (sizeof (jint));
            bm.pixelFormat = Image::ARGB;
            bm.data = (uint8*) (data + x + y * width);
        }

        ImagePixelData::Ptr clone() override
        {
            auto s = new PreallocatedImage (width, height, nullptr, hasAlpha);
            s->allocatedData.malloc (sizeof (jint) * static_cast<size_t> (width * height));
            s->data = s->allocatedData;
            memcpy (s->data, data, sizeof (jint) * static_cast<size_t> (width * height));
            return s;
        }

    private:
        jint* data;
        HeapBlock<jint> allocatedData;
        bool hasAlpha;

        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PreallocatedImage)
    };

    //==============================================================================
    void timerCallback() override
    {
        setNavBarsHidden (shouldNavBarsBeHidden (fullScreen));
        setFullScreen (fullScreen);
        stopTimer();
    }

    bool isKioskModeComponent() const
    {
        if (auto* kiosk = Desktop::getInstance().getKioskModeComponent())
            return kiosk->getPeer() == this;

        return false;
    }

    bool shouldNavBarsBeHidden (bool shouldBeFullScreen) const
    {
        return (shouldBeFullScreen && isKioskModeComponent());
    }

    void setNavBarsHidden (bool hidden)
    {
        if (navBarsHidden != hidden)
        {
            navBarsHidden = hidden;

            view.callVoidMethod (ComponentPeerView.setSystemUiVisibilityCompat,
                                 (navBarsHidden ? (jint) (fullScreenFlags) : (jint) (SYSTEM_UI_FLAG_VISIBLE)));
        }
    }

    template <typename Callback>
    static void callOnMessageThread (Callback&& callback)
    {
        if (MessageManager::getInstance()->isThisTheMessageThread())
            callback();
        else
            MessageManager::callAsync (std::forward<Callback> (callback));
    }

    //==============================================================================
    friend class Displays;
    static AndroidComponentPeer* frontWindow;
    static GlobalRef activityCallbackListener;

    static constexpr int GRAVITY_LEFT = 0x3, GRAVITY_TOP = 0x30;
    static constexpr int TYPE_APPLICATION = 0x2;
    static constexpr int FLAG_NOT_TOUCH_MODAL = 0x20, FLAG_LAYOUT_IN_SCREEN = 0x100, FLAG_LAYOUT_NO_LIMITS = 0x200;
    static constexpr int PIXEL_FORMAT_OPAQUE = -1, PIXEL_FORMAT_TRANSPARENT = -2;
    static constexpr int LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS = 0x3;

    GlobalRef view, viewGroup, buffer;
    bool viewGroupIsWindow = false, fullScreen = false, navBarsHidden = false;
    int sizeAllocated = 0;
    float scale = (float) Desktop::getInstance().getDisplays().getPrimaryDisplay()->scale;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidComponentPeer)
};

Point<float> AndroidComponentPeer::lastMousePos;
int64 AndroidComponentPeer::touchesDown = 0;
AndroidComponentPeer* AndroidComponentPeer::frontWindow = nullptr;
GlobalRef AndroidComponentPeer::activityCallbackListener;
AndroidComponentPeer::ComponentPeerView_Class AndroidComponentPeer::ComponentPeerView;

//==============================================================================
ComponentPeer* Component::createNewPeer (int styleFlags, void* nativeWindow)
{
    return new AndroidComponentPeer (*this, styleFlags, nativeWindow);
}

//==============================================================================
bool Desktop::canUseSemiTransparentWindows() noexcept
{
    return true;
}

double Desktop::getDefaultMasterScale()
{
    return 1.0;
}

Desktop::DisplayOrientation Desktop::getCurrentOrientation() const
{
    enum
    {
        ROTATION_0   = 0,
        ROTATION_90  = 1,
        ROTATION_180 = 2,
        ROTATION_270 = 3
    };

    JNIEnv* env = getEnv();
    LocalRef<jstring> windowServiceString (javaString ("window"));


    LocalRef<jobject> windowManager = LocalRef<jobject> (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));

    if (windowManager.get() != nullptr)
    {
        LocalRef<jobject> display = LocalRef<jobject> (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

        if (display.get() != nullptr)
        {
            int rotation = env->CallIntMethod (display, AndroidDisplay.getRotation);

            switch (rotation)
            {
                case ROTATION_0:   return upright;
                case ROTATION_90:  return rotatedAntiClockwise;
                case ROTATION_180: return upsideDown;
                case ROTATION_270: return rotatedClockwise;
            }
        }
    }

    jassertfalse;
    return upright;
}

bool MouseInputSource::SourceList::addSource()
{
    addSource (sources.size(), MouseInputSource::InputSourceType::touch);
    return true;
}

bool MouseInputSource::SourceList::canUseTouch()
{
    return true;
}

Point<float> MouseInputSource::getCurrentRawMousePosition()
{
    return AndroidComponentPeer::lastMousePos;
}

void MouseInputSource::setRawMousePosition (Point<float>)
{
    // not needed
}

//==============================================================================
bool KeyPress::isKeyCurrentlyDown (int /*keyCode*/)
{
    // TODO
    return false;
}

JUCE_API void JUCE_CALLTYPE Process::hide()
{
    auto* env = getEnv();
    LocalRef<jobject> currentActivity (getCurrentActivity().get());

    if (env->CallBooleanMethod (currentActivity.get(), AndroidActivity.moveTaskToBack, true) == 0)
    {
        GlobalRef intent (LocalRef<jobject> (env->NewObject (AndroidIntent, AndroidIntent.constructor)));
        env->CallObjectMethod (intent, AndroidIntent.setAction,   javaString ("android.intent.action.MAIN")  .get());
        env->CallObjectMethod (intent, AndroidIntent.addCategory, javaString ("android.intent.category.HOME").get());

        env->CallVoidMethod (currentActivity.get(), AndroidContext.startActivity, intent.get());
    }
}

//==============================================================================
// TODO
JUCE_API bool JUCE_CALLTYPE Process::isForegroundProcess() { return true; }
JUCE_API void JUCE_CALLTYPE Process::makeForegroundProcess() {}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (show,                   "show",                 "()V") \
 METHOD (getWindow,              "getWindow",            "()Landroid/view/Window;")

DECLARE_JNI_CLASS (AndroidDialog, "android/app/Dialog")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (construct,                   "<init>",                 "(Landroid/content/Context;)V") \
 METHOD (create,                      "create",                 "()Landroid/app/AlertDialog;") \
 METHOD (setTitle,                    "setTitle",               "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setMessage,                  "setMessage",             "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setCancelable,               "setCancelable",          "(Z)Landroid/app/AlertDialog$Builder;") \
 METHOD (setOnCancelListener,         "setOnCancelListener",    "(Landroid/content/DialogInterface$OnCancelListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setPositiveButton,           "setPositiveButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNegativeButton,           "setNegativeButton",      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;") \
 METHOD (setNeutralButton,            "setNeutralButton",       "(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;")

DECLARE_JNI_CLASS (AndroidAlertDialogBuilder, "android/app/AlertDialog$Builder")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (dismiss,    "dismiss",  "()V")

DECLARE_JNI_CLASS (AndroidDialogInterface, "android/content/DialogInterface")
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \

DECLARE_JNI_CLASS (AndroidDialogOnClickListener, "android/content/DialogInterface$OnClickListener")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class DialogListener  : public juce::AndroidInterfaceImplementer
{
public:
    DialogListener (std::shared_ptr<ModalComponentManager::Callback> callbackToUse, int resultToUse)
        : callback (std::move (callbackToUse)), result (resultToUse)
    {}

    void onResult (jobject dialog)
    {
        auto* env = getEnv();
        env->CallVoidMethod (dialog, AndroidDialogInterface.dismiss);

        if (callback != nullptr)
            callback->modalStateFinished (result);

        callback = nullptr;
    }

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onCancel" || methodName == "onClick")
        {
            onResult (env->GetObjectArrayElement (args, 0));
            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::shared_ptr<ModalComponentManager::Callback> callback;
    int result;
};

//==============================================================================
static void createAndroidDialog (const MessageBoxOptions& opts,
                                 std::unique_ptr<ModalComponentManager::Callback> callback)
{
    auto* env = getEnv();

    LocalRef<jobject> builder (env->NewObject (AndroidAlertDialogBuilder, AndroidAlertDialogBuilder.construct, getMainActivity().get()));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setTitle,   javaString (opts.getTitle()).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setMessage, javaString (opts.getMessage()).get()));
    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setCancelable, true));

    std::shared_ptr<ModalComponentManager::Callback> sharedCallback (std::move (callback));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setOnCancelListener,
                                                        CreateJavaInterface (new DialogListener (sharedCallback, 0),
                                                                             "android/content/DialogInterface$OnCancelListener").get()));

    builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setPositiveButton,
                                                        javaString (opts.getButtonText (0)).get(),
                                                        CreateJavaInterface (new DialogListener (sharedCallback, 0),
                                                                             "android/content/DialogInterface$OnClickListener").get()));

    if (opts.getButtonText (1).isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNegativeButton,
                                                            javaString (opts.getButtonText (1)).get(),
                                                            CreateJavaInterface (new DialogListener (sharedCallback, 1),
                                                                                 "android/content/DialogInterface$OnClickListener").get()));

    if (opts.getButtonText (2).isNotEmpty())
        builder = LocalRef<jobject> (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.setNeutralButton,
                                                            javaString (opts.getButtonText (2)).get(),
                                                            CreateJavaInterface (new DialogListener (sharedCallback, 2),
                                                                                 "android/content/DialogInterface$OnClickListener").get()));

    LocalRef<jobject> dialog (env->CallObjectMethod (builder.get(), AndroidAlertDialogBuilder.create));

    LocalRef<jobject> window (env->CallObjectMethod (dialog.get(), AndroidDialog.getWindow));

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
    {
        env->CallVoidMethod (window.get(), AndroidWindow.setFlags, FLAG_NOT_FOCUSABLE, FLAG_NOT_FOCUSABLE);
        LocalRef<jobject> decorView (env->CallObjectMethod (window.get(), AndroidWindow.getDecorView));
        env->CallVoidMethod (decorView.get(), AndroidView.setSystemUiVisibility, fullScreenFlags);
    }

    env->CallVoidMethod (dialog.get(), AndroidDialog.show);

    if (Desktop::getInstance().getKioskModeComponent() != nullptr)
        env->CallVoidMethod (window.get(), AndroidWindow.clearFlags, FLAG_NOT_FOCUSABLE);
}

void JUCE_CALLTYPE NativeMessageBox::showMessageBoxAsync (MessageBoxIconType /*iconType*/,
                                                          const String& title, const String& message,
                                                          Component* /*associatedComponent*/,
                                                          ModalComponentManager::Callback* callback)
{
    showAsync (MessageBoxOptions()
                 .withTitle (title)
                 .withMessage (message)
                 .withButton (TRANS("OK")),
               AlertWindowMappings::getWrappedCallback (callback, AlertWindowMappings::messageBox));
}

bool JUCE_CALLTYPE NativeMessageBox::showOkCancelBox (MessageBoxIconType /*iconType*/,
                                                      const String& title, const String& message,
                                                      Component* /*associatedComponent*/,
                                                      ModalComponentManager::Callback* callback)
{
    showAsync (MessageBoxOptions()
                 .withTitle (title)
                 .withMessage (message)
                 .withButton (TRANS("OK"))
                 .withButton (TRANS("Cancel")),
               AlertWindowMappings::getWrappedCallback (callback, AlertWindowMappings::okCancel));

    return false;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoCancelBox (MessageBoxIconType /*iconType*/,
                                                        const String& title, const String& message,
                                                        Component* /*associatedComponent*/,
                                                        ModalComponentManager::Callback* callback)
{
    showAsync (MessageBoxOptions()
                 .withTitle (title)
                 .withMessage (message)
                 .withButton (TRANS("Yes"))
                 .withButton (TRANS("No"))
                 .withButton (TRANS("Cancel")),
               AlertWindowMappings::getWrappedCallback (callback, AlertWindowMappings::yesNoCancel));

    return 0;
}

int JUCE_CALLTYPE NativeMessageBox::showYesNoBox (MessageBoxIconType /*iconType*/,
                                                  const String& title, const String& message,
                                                  Component* /*associatedComponent*/,
                                                  ModalComponentManager::Callback* callback)
{
    showAsync (MessageBoxOptions()
                 .withTitle (title)
                 .withMessage (message)
                 .withButton (TRANS("Yes"))
                 .withButton (TRANS("No")),
               AlertWindowMappings::getWrappedCallback (callback, AlertWindowMappings::okCancel));

    return 0;
}

void JUCE_CALLTYPE NativeMessageBox::showAsync (const MessageBoxOptions& options,
                                                ModalComponentManager::Callback* callback)
{
    createAndroidDialog (options, std::unique_ptr<ModalComponentManager::Callback> (callback));
}

void JUCE_CALLTYPE NativeMessageBox::showAsync (const MessageBoxOptions& options,
                                                std::function<void (int)> callback)
{
    showAsync (options, ModalCallbackFunction::create (callback));
}

//==============================================================================
static bool androidScreenSaverEnabled = true;

void Desktop::setScreenSaverEnabled (bool shouldEnable)
{
    constexpr auto FLAG_KEEP_SCREEN_ON = 0x80;

    if (shouldEnable != androidScreenSaverEnabled)
    {
        LocalRef<jobject> activity (getMainActivity());

        if (activity != nullptr)
        {
            auto* env = getEnv();

            LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
            env->CallVoidMethod (mainWindow.get(), AndroidWindow.setFlags, shouldEnable ? 0 : FLAG_KEEP_SCREEN_ON, FLAG_KEEP_SCREEN_ON);
        }

        androidScreenSaverEnabled = shouldEnable;
    }
}

bool Desktop::isScreenSaverEnabled()
{
    return androidScreenSaverEnabled;
}

//==============================================================================
void Desktop::setKioskComponent (Component* kioskComp, bool enableOrDisable, bool allowMenusAndBars)
{
    ignoreUnused (allowMenusAndBars);

    if (AndroidComponentPeer* peer = dynamic_cast<AndroidComponentPeer*> (kioskComp->getPeer()))
        peer->setFullScreen (enableOrDisable);
    else
        jassertfalse; // (this should have been checked by the caller)
}

//==============================================================================
static jint getAndroidOrientationFlag (int orientations) noexcept
{
    enum
    {
        SCREEN_ORIENTATION_LANDSCAPE          = 0,
        SCREEN_ORIENTATION_PORTRAIT           = 1,
        SCREEN_ORIENTATION_USER               = 2,
        SCREEN_ORIENTATION_REVERSE_LANDSCAPE  = 8,
        SCREEN_ORIENTATION_REVERSE_PORTRAIT   = 9,
        SCREEN_ORIENTATION_USER_LANDSCAPE     = 11,
        SCREEN_ORIENTATION_USER_PORTRAIT      = 12,
    };

    switch (orientations)
    {
        case Desktop::upright:                                          return (jint) SCREEN_ORIENTATION_PORTRAIT;
        case Desktop::upsideDown:                                       return (jint) SCREEN_ORIENTATION_REVERSE_PORTRAIT;
        case Desktop::upright + Desktop::upsideDown:                    return (jint) SCREEN_ORIENTATION_USER_PORTRAIT;
        case Desktop::rotatedAntiClockwise:                             return (jint) SCREEN_ORIENTATION_LANDSCAPE;
        case Desktop::rotatedClockwise:                                 return (jint) SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
        case Desktop::rotatedClockwise + Desktop::rotatedAntiClockwise: return (jint) SCREEN_ORIENTATION_USER_LANDSCAPE;
        default:                                                        return (jint) SCREEN_ORIENTATION_USER;
    }
}

void Desktop::allowedOrientationsChanged()
{
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
        getEnv()->CallVoidMethod (activity.get(), AndroidActivity.setRequestedOrientation, getAndroidOrientationFlag (allowedOrientations));
}

//==============================================================================
bool juce_areThereAnyAlwaysOnTopWindows()
{
    return false;
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (create,          "<init>",         "()V") \
 FIELD  (density,         "density",        "F") \
 FIELD  (widthPixels,     "widthPixels",    "I") \
 FIELD  (heightPixels,    "heightPixels",   "I")

DECLARE_JNI_CLASS (AndroidDisplayMetrics, "android/util/DisplayMetrics")
#undef JNI_CLASS_MEMBERS

//==============================================================================
class LayoutChangeListener  : public juce::AndroidInterfaceImplementer
{
public:
    virtual void onLayoutChange (LocalRef<jobject> view, int left, int top, int right, int bottom,
                                 int oldLeft, int oldTop, int oldRight, int oldBottom) = 0;

private:
    jobject invoke (jobject proxy, jobject method, jobjectArray args) override
    {
        auto* env = getEnv();
        auto methodName = juce::juceString ((jstring) env->CallObjectMethod (method, JavaMethod.getName));

        if (methodName == "onLayoutChange")
        {
            jassert (env->GetArrayLength (args) == 9);

            LocalRef<jobject> view (env->GetObjectArrayElement (args, 0));
            int dims[8];

            for (int i = 1; i < 9; ++i)
            {
                LocalRef<jobject> integer (env->GetObjectArrayElement (args, i));
                dims[i - 1] = env->CallIntMethod (integer.get(), JavaInteger.intValue);
            }

            onLayoutChange (std::move (view), dims[0], dims[1], dims[2], dims[3],
                            dims[4], dims[5], dims[6], dims[7]);

            return nullptr;
        }

        // invoke base class
        return AndroidInterfaceImplementer::invoke (proxy, method, args);
    }

    std::unique_ptr<ModalComponentManager::Callback> callback;
};

//==============================================================================
struct MainActivityWindowLayoutListener   : public LayoutChangeListener
{
    MainActivityWindowLayoutListener (std::function<void()>&& updateDisplaysCb)
        : forceDisplayUpdate (std::move (updateDisplaysCb))
    {
    }

    void onLayoutChange (LocalRef<jobject> /*view*/, int left, int top, int right, int bottom,
                         int oldLeft, int oldTop, int oldRight, int oldBottom) override
    {
        auto newBounds = Rectangle<int>::leftTopRightBottom (left, top, right, bottom);
        auto oldBounds = Rectangle<int>::leftTopRightBottom (oldLeft, oldTop, oldRight, oldBottom);

        if (newBounds != oldBounds)
        {
            const auto& mainDisplay = *Desktop::getInstance().getDisplays().getPrimaryDisplay();
            auto userArea = (newBounds.toFloat() / mainDisplay.scale).toNearestInt();

            if (userArea != mainDisplay.userArea)
                forceDisplayUpdate();
        }
    }

    std::function<void()> forceDisplayUpdate;
};

//==============================================================================
void Displays::findDisplays (float masterScale)
{
    auto* env = getEnv();

    LocalRef<jobject> usableSize (env->NewObject (AndroidPoint, AndroidPoint.create, 0, 0));
    LocalRef<jstring> windowServiceString (javaString ("window"));
    LocalRef<jobject> displayMetrics (env->NewObject (AndroidDisplayMetrics, AndroidDisplayMetrics.create));
    LocalRef<jobject> windowManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, windowServiceString.get()));
    LocalRef <jobject> display (env->CallObjectMethod (windowManager, AndroidWindowManager.getDefaultDisplay));

    jmethodID getRealMetricsMethod = env->GetMethodID (AndroidDisplay, "getRealMetrics", "(Landroid/util/DisplayMetrics;)V");

    if (getRealMetricsMethod != nullptr)
        env->CallVoidMethod (display.get(), getRealMetricsMethod, displayMetrics.get());
    else
        env->CallVoidMethod (display.get(), AndroidDisplay.getMetrics, displayMetrics.get());

    env->CallVoidMethod (display.get(), AndroidDisplay.getSize, usableSize.get());

    Display d;

    d.isMain = true;
    d.scale = env->GetFloatField (displayMetrics.get(), AndroidDisplayMetrics.density);
    d.dpi = (d.scale * 160.f);
    d.scale *= masterScale;

    d.totalArea = Rectangle<int> (env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.widthPixels),
                                  env->GetIntField (displayMetrics.get(), AndroidDisplayMetrics.heightPixels)) / d.scale;

    d.userArea = Rectangle<int> (env->GetIntField (usableSize.get(), AndroidPoint.x),
                                 env->GetIntField (usableSize.get(), AndroidPoint.y)) / d.scale;

    // unfortunately usableSize still contains the nav bar
    // the best workaround is to try to get the size of the top-level view of
    // the main activity
    LocalRef<jobject> activity (getMainActivity());

    if (activity != nullptr)
    {
        LocalRef<jobject> mainWindow (env->CallObjectMethod (activity.get(), AndroidActivity.getWindow));
        LocalRef<jobject> decorView (env->CallObjectMethod (mainWindow.get(), AndroidWindow.getDecorView));
        LocalRef<jobject> contentView (env->CallObjectMethod (decorView.get(), AndroidView.findViewById, 0x01020002 /* android.R.id.content */));

        if (contentView != nullptr)
        {
            Rectangle<int> activityArea (env->CallIntMethod (contentView.get(), AndroidView.getLeft),
                                         env->CallIntMethod (contentView.get(), AndroidView.getTop),
                                         env->CallIntMethod (contentView.get(), AndroidView.getWidth),
                                         env->CallIntMethod (contentView.get(), AndroidView.getHeight));

            if (! activityArea.isEmpty())
                d.userArea = activityArea / d.scale;

            if (supportsDisplayCutout())
            {
                jmethodID getRootWindowInsetsMethodId = env->GetMethodID (AndroidView,
                                                                          "getRootWindowInsets",
                                                                          "()Landroid/view/WindowInsets;");

                if (getRootWindowInsetsMethodId != nullptr)
                {
                    LocalRef<jobject> insets (env->CallObjectMethod (contentView.get(), getRootWindowInsetsMethodId));

                    if (insets != nullptr)
                    {
                        LocalRef<jobject> displayCutout (env->CallObjectMethod (insets.get(), AndroidWindowInsets.getDisplayCutout));

                        if (displayCutout.get() != nullptr)
                            d.safeAreaInsets = androidDisplayCutoutToBorderSize (displayCutout, d.scale);
                    }
                }
            }

            static bool hasAddedMainActivityListener = false;

            if (! hasAddedMainActivityListener)
            {
                hasAddedMainActivityListener = true;

                env->CallVoidMethod (contentView.get(), AndroidView.addOnLayoutChangeListener,
                                     CreateJavaInterface (new MainActivityWindowLayoutListener ([this] { refresh(); }),
                                                          "android/view/View$OnLayoutChangeListener").get());
            }
        }
    }
    else
    {
        // the main activity may have not started yet so add an activity listener
        if (AndroidComponentPeer::activityCallbackListener == nullptr)
        {
            LocalRef<jobject> appContext (getAppContext());

            if (appContext.get() != nullptr)
            {
                AndroidComponentPeer::activityCallbackListener = GlobalRef (CreateJavaInterface (
                        new AndroidComponentPeer::StartupActivityCallbackListener,
                        "android/app/Application$ActivityLifecycleCallbacks"));

                env->CallVoidMethod (appContext.get(),
                                     AndroidApplication.registerActivityLifecycleCallbacks,
                                     AndroidComponentPeer::activityCallbackListener.get());
            }
        }
    }

    displays.add (d);
}

//==============================================================================
Image juce_createIconForFile (const File& /*file*/)
{
    return Image();
}

//==============================================================================
void* CustomMouseCursorInfo::create() const                                         { return nullptr; }
void* MouseCursor::createStandardMouseCursor (MouseCursor::StandardCursorType)      { return nullptr; }
void MouseCursor::deleteMouseCursor (void* /*cursorHandle*/, bool /*isStandard*/)   {}

//==============================================================================
void MouseCursor::showInWindow (ComponentPeer*) const   {}

//==============================================================================
bool DragAndDropContainer::performExternalDragDropOfFiles (const StringArray& /*files*/, bool /*canMove*/,
                                                           Component* /*srcComp*/, std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

bool DragAndDropContainer::performExternalDragDropOfText (const String& /*text*/, Component* /*srcComp*/,
                                                          std::function<void()> /*callback*/)
{
    jassertfalse;    // no such thing on Android!
    return false;
}

//==============================================================================
void LookAndFeel::playAlertSound()
{
}

//==============================================================================
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
 METHOD (getText,      "getText",            "()Ljava/lang/CharSequence;") \
 METHOD (setText,      "setText",            "(Ljava/lang/CharSequence;)V")

DECLARE_JNI_CLASS (AndroidClipboardManager, "android/content/ClipboardManager")
#undef JNI_CLASS_MEMBERS

//==============================================================================
void SystemClipboard::copyTextToClipboard (const String& text)
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    env->CallVoidMethod (clipboardManager.get(), AndroidClipboardManager.setText, javaString(text).get());
}

String SystemClipboard::getTextFromClipboard()
{
    auto* env = getEnv();

    LocalRef<jobject> clipboardManager (env->CallObjectMethod (getAppContext().get(), AndroidContext.getSystemService, javaString ("clipboard").get()));
    LocalRef<jobject> charSequence (env->CallObjectMethod (clipboardManager.get(), AndroidClipboardManager.getText));

    if (charSequence == nullptr)
        return {};

    return juceString(LocalRef<jstring> ((jstring) env->CallObjectMethod(charSequence.get(), JavaCharSequence.toString)));
}

//==============================================================================
const int extendedKeyModifier       = 0x10000;

const int KeyPress::spaceKey        = ' ';
const int KeyPress::returnKey       = 66;
const int KeyPress::escapeKey       = 4;
const int KeyPress::backspaceKey    = 67;
const int KeyPress::leftKey         = extendedKeyModifier + 1;
const int KeyPress::rightKey        = extendedKeyModifier + 2;
const int KeyPress::upKey           = extendedKeyModifier + 3;
const int KeyPress::downKey         = extendedKeyModifier + 4;
const int KeyPress::pageUpKey       = extendedKeyModifier + 5;
const int KeyPress::pageDownKey     = extendedKeyModifier + 6;
const int KeyPress::endKey          = extendedKeyModifier + 7;
const int KeyPress::homeKey         = extendedKeyModifier + 8;
const int KeyPress::deleteKey       = extendedKeyModifier + 9;
const int KeyPress::insertKey       = -1;
const int KeyPress::tabKey          = 61;
const int KeyPress::F1Key           = extendedKeyModifier + 10;
const int KeyPress::F2Key           = extendedKeyModifier + 11;
const int KeyPress::F3Key           = extendedKeyModifier + 12;
const int KeyPress::F4Key           = extendedKeyModifier + 13;
const int KeyPress::F5Key           = extendedKeyModifier + 14;
const int KeyPress::F6Key           = extendedKeyModifier + 16;
const int KeyPress::F7Key           = extendedKeyModifier + 17;
const int KeyPress::F8Key           = extendedKeyModifier + 18;
const int KeyPress::F9Key           = extendedKeyModifier + 19;
const int KeyPress::F10Key          = extendedKeyModifier + 20;
const int KeyPress::F11Key          = extendedKeyModifier + 21;
const int KeyPress::F12Key          = extendedKeyModifier + 22;
const int KeyPress::F13Key          = extendedKeyModifier + 23;
const int KeyPress::F14Key          = extendedKeyModifier + 24;
const int KeyPress::F15Key          = extendedKeyModifier + 25;
const int KeyPress::F16Key          = extendedKeyModifier + 26;
const int KeyPress::F17Key          = extendedKeyModifier + 50;
const int KeyPress::F18Key          = extendedKeyModifier + 51;
const int KeyPress::F19Key          = extendedKeyModifier + 52;
const int KeyPress::F20Key          = extendedKeyModifier + 53;
const int KeyPress::F21Key          = extendedKeyModifier + 54;
const int KeyPress::F22Key          = extendedKeyModifier + 55;
const int KeyPress::F23Key          = extendedKeyModifier + 56;
const int KeyPress::F24Key          = extendedKeyModifier + 57;
const int KeyPress::F25Key          = extendedKeyModifier + 58;
const int KeyPress::F26Key          = extendedKeyModifier + 59;
const int KeyPress::F27Key          = extendedKeyModifier + 60;
const int KeyPress::F28Key          = extendedKeyModifier + 61;
const int KeyPress::F29Key          = extendedKeyModifier + 62;
const int KeyPress::F30Key          = extendedKeyModifier + 63;
const int KeyPress::F31Key          = extendedKeyModifier + 64;
const int KeyPress::F32Key          = extendedKeyModifier + 65;
const int KeyPress::F33Key          = extendedKeyModifier + 66;
const int KeyPress::F34Key          = extendedKeyModifier + 67;
const int KeyPress::F35Key          = extendedKeyModifier + 68;
const int KeyPress::numberPad0      = extendedKeyModifier + 27;
const int KeyPress::numberPad1      = extendedKeyModifier + 28;
const int KeyPress::numberPad2      = extendedKeyModifier + 29;
const int KeyPress::numberPad3      = extendedKeyModifier + 30;
const int KeyPress::numberPad4      = extendedKeyModifier + 31;
const int KeyPress::numberPad5      = extendedKeyModifier + 32;
const int KeyPress::numberPad6      = extendedKeyModifier + 33;
const int KeyPress::numberPad7      = extendedKeyModifier + 34;
const int KeyPress::numberPad8      = extendedKeyModifier + 35;
const int KeyPress::numberPad9      = extendedKeyModifier + 36;
const int KeyPress::numberPadAdd            = extendedKeyModifier + 37;
const int KeyPress::numberPadSubtract       = extendedKeyModifier + 38;
const int KeyPress::numberPadMultiply       = extendedKeyModifier + 39;
const int KeyPress::numberPadDivide         = extendedKeyModifier + 40;
const int KeyPress::numberPadSeparator      = extendedKeyModifier + 41;
const int KeyPress::numberPadDecimalPoint   = extendedKeyModifier + 42;
const int KeyPress::numberPadEquals         = extendedKeyModifier + 43;
const int KeyPress::numberPadDelete         = extendedKeyModifier + 44;
const int KeyPress::playKey         = extendedKeyModifier + 45;
const int KeyPress::stopKey         = extendedKeyModifier + 46;
const int KeyPress::fastForwardKey  = extendedKeyModifier + 47;
const int KeyPress::rewindKey       = extendedKeyModifier + 48;

//==============================================================================
#ifdef JUCE_PUSH_NOTIFICATIONS_ACTIVITY
 struct JuceActivityNewIntentListener
 {
     #define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD, CALLBACK) \
      CALLBACK (appNewIntent, "appNewIntent", "(Landroid/content/Intent;)V")

      DECLARE_JNI_CLASS (JavaActivity, JUCE_PUSH_NOTIFICATIONS_ACTIVITY)
     #undef JNI_CLASS_MEMBERS

     static void JNICALL appNewIntent (JNIEnv*, jobject /*activity*/, jobject intentData)
     {
         juce_handleNotificationIntent (static_cast<void*> (intentData));
     }
 };

 JuceActivityNewIntentListener::JavaActivity_Class JuceActivityNewIntentListener::JavaActivity;
#endif

} // namespace juce
